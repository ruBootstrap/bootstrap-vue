{
  "active": {
    "description": "При значении `true` переводит компонент в активное состояние с активным стилем."
  },
  "activeClass": {
    "description": "<router-link> свойство: Настройка активного класса CSS, применяемого, когда ссылка активна. Обычно Вам нужно установить это имя класса 'active'"
  },
  "alt": {
    "description": "Значение, устанавливаемое для атрибута `alt`"
  },
  "append": {
    "description": "<router-link> свойство: Настройка добавления свойства всегда добавляет относительный путь к текущему пути"
  },
  "ariaControls": {
    "description": "Если этот компонент управляет другим компонентом или элементом, установите для него идентификатор управляемого компонента или элемента"
  },
  "ariaDescribedby": {
    "description": "Идентификатор элемента, который обеспечивает дополнительный контекст для этого компонента. Используется в качестве значения атрибута `aria-describedby`"
  },
  "ariaLabel": {
    "description": "Устанавливает значение атрибута `aria-label` для отображаемого элемента"
  },
  "ariaLabelledby": {
    "description": "Идентификатор элемента, который предоставляет метку для этого компонента. Используется как значение атрибута `aria-labelledby`"
  },
  "ariaLive": {
    "description": "Если визуализируемый элемент является областью `aria-live` (для пользователей программ чтения с экрана), установите значение 'polite' или 'assertive'"
  },
  "ariaRole": {
    "description": "Устанавливает определенное значение для атрибута ARIA `role`"
  },
  "autocomplete": {
    "description": "Устанавливает значение атрибута 'autocomplete' в элементе управления формы"
  },
  "autofocus": {
    "description": "Если установлено значение `true`, пытается автоматически сфокусировать элемент управления, когда он установлен, или повторно активировать, когда находится в состоянии активности. Не устанавливает атрибут `autofocus` на элементе управления"
  },
  "bgVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к фону"
  },
  "bodyBgVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к фону `body`"
  },
  "bodyBorderVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к границе `body`"
  },
  "bodyClass": {
    "description": "CSS-класс (или классы) для применения к `body`"
  },
  "bodyTag": {
    "description": "Указывает тег HTML для отображения вместо тега по умолчанию для `body`"
  },
  "bodyTextVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к тексту `body`"
  },
  "bodyVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к `body`"
  },
  "borderVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к границе"
  },
  "disabled": {
    "description": "Если установлено значение `true`, отключает функциональность компонента и переводит его в отключенное состояние."
  },
  "disabledField": {
    "description": "Имя поля в массиве `options`, которое следует использовать для отключенного состояния"
  },
  "event": {
    "description": "<router-link> свойство: Указывает событие, которое запускает ссылку. В большинстве случаев вы должны оставить это значение по умолчанию"
  },
  "exact": {
    "description": "<router-link> свойство: Поведение сопоставления активного класса по умолчанию включает сопоставление. Установка этого свойства заставляет режим точно соответствовать маршруту"
  },
  "exactActiveClass": {
    "description": "<router-link> свойство: Настройка активного класса CSS, применяемого, когда ссылка активна с точным соответствием. Обычно Вам нужно установить это имя класса 'active'"
  },
  "exactPath": {
    "description": "<router-link> prop: Allows matching only using the path section of the url, effectively ignoring the query and the hash sections"
  },
  "exactPathActiveClass": {
    "description": "<router-link> prop: Configure the active CSS class applied when the link is active with exact path match. Typically you will want to set this to class name 'active'"
  },
  "fade": {
    "description": "Если установлено значение `true`, включает анимацию затухания/переход на компоненте"
  },
  "footer": {
    "description": "Текстовый контент для размещения в `footer`"
  },
  "footerBgVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к фону `footer`"
  },
  "footerBorderVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к границе `footer`"
  },
  "footerClass": {
    "description": "CSS-класс (или классы) для применения к `footer`"
  },
  "footerHtml": {
    "description": "Содержимое строки HTML для размещения в `footer`",
    "xss": true
  },
  "footerTag": {
    "description": "Указывает тег HTML для отображения вместо тега по умолчанию для `footer`"
  },
  "footerTextVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к тексту `footer`"
  },
  "footerVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к `footer`"
  },
  "form": {
    "description": "Идентификатор формы, к которой принадлежит элемент управления формой. Устанавливает атрибут `form` в элементе управления"
  },
  "header": {
    "description": "Текстовый контент для размещения в `header`"
  },
  "headerBgVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к фону `header`"
  },
  "headerBorderVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к границе `header`"
  },
  "headerClass": {
    "description": "CSS-класс (или классы) для применения к `header`"
  },
  "headerHtml": {
    "description": "Содержимое строки HTML для размещения в `header`",
    "xss": true
  },
  "headerTag": {
    "description": "Указывает тег HTML для отображения вместо тега по умолчанию для `header`"
  },
  "headerTextVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к `header` text"
  },
  "headerVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к `header`"
  },
  "href": {
    "description": "<b-link> свойство: Обозначает целевой URL-адрес ссылки для стандартных ссылок"
  },
  "htmlField": {
    "description": "Имя поля в массиве `options`, которое следует использовать для html-метки вместо текстового поля",
    "xss": true
  },
  "id": {
    "description": "Используется для установки атрибута `id` для визуализированного контента и используется в качестве основы для генерации любых дополнительных идентификаторов элементов по мере необходимости."
  },
  "name": {
    "description": "Устанавливает значение атрибута `name` в элементе управления формы"
  },
  "noFade": {
    "description": "Если установлено значение `true`, отключает анимацию затухания/переход на компоненте"
  },
  "noPrefetch": {
    "description": "<nuxt-link> свойство: Чтобы улучшить отзывчивость Ваших приложений Nuxt.js, когда ссылка будет отображаться в области просмотра, Nuxt.js автоматически выполнит предварительную загрузку страницы с разделением кода. Установка `no-prefetch` отключит эту функцию для конкретной ссылки"
  },
  "options": {
    "description": "Массив элементов для визуализации в компоненте"
  },
  "placeholder": {
    "description": "Устанавливает значение атрибута `placeholder` в элементе управления формы"
  },
  "plain": {
    "description": "Визуализируйте элемент управления формы в обычном режиме, а не в режиме пользовательского стиля"
  },
  "plaintext": {
    "description": "Устанавливает элемент управления формы как только для чтения и визуализируйте элемент управления как обычный текст (без границ)"
  },
  "prefetch": {
    "description": "<nuxt-link> свойство: Чтобы улучшить отзывчивость Ваших приложений Nuxt.js, когда ссылка будет отображаться в области просмотра, Nuxt.js автоматически выполнит предварительную загрузку страницы с разделением кода. Установка для `prefetch` значения `true` или `false` перезапишет значение по умолчанию `router.prefetchLinks`",
    "version": "2.15.0"
  },
  "readonly": {
    "description": "Устанавливает атрибут `readonly` в элементе управления формы"
  },
  "rel": {
    "description": "<b-link> свойство: Устанавливает атрибут `rel` для отображаемой ссылки"
  },
  "replace": {
    "description": "<router-link> свойство: Установка свойства `replace` будет вызывать `router.replace()` вместо `router.push()` при нажатии, поэтому навигация не будет оставлять запись в истории"
  },
  "required": {
    "description": "Добавляет атрибут `required` в элемент управления формы"
  },
  "role": {
    "description": "Устанавливает определенное значение для атрибута ARIA `role`"
  },
  "routerComponentName": {
    "description": "<b-link> свойство: BootstrapVue автоматически определяет между `<router-link>` и `<nuxt-link>`. В случаях, когда Вы хотите использовать сторонний компонент ссылки на основе `<router-link>`, установите это свойство на имя компонента, например установите для него значение 'g-link', если Вы используете Gridsome (обратите внимание, что компоненту передаются только определенные свойства `<router-link>`)",
    "version": "2.15.0"
  },
  "routerTag": {
    "description": "<router-link> свойство: Указывает, какой тег отображать, и он все равно будет прослушивать события щелчка для навигации. `router-tag` переводится в свойство тега в окончательном отрисованном `<router-link>`. Обычно следует использовать значение по умолчанию"
  },
  "size": {
    "description": "Устанавливает размер внешнего вида компонента. 'sm', 'md' (по умолчанию) или 'lg'"
  },
  "src": {
    "description": "URL для установки значения атрибута `src`"
  },
  "state": {
    "description": "Управляет внешним видом состояния проверки компонента. `true` для действительного, `false` для недопустимого или `null` для отсутствия проверки состояния"
  },
  "static": {
    "description": "Отображает содержимое компонента на месте в DOM, а не переносит его для добавления к элементу `body`"
  },
  "subTitle": {
    "description": "Текстовый контент для размещения в подзаголовке"
  },
  "subTitleTag": {
    "description": "Указывает тег HTML для отображения вместо тега по умолчанию для подзаголовка"
  },
  "subTitleTextVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к тексту подзаголовка"
  },
  "tag": {
    "description": "Указывает тег HTML для отображения вместо тега по умолчанию"
  },
  "target": {
    "description": "<b-link> свойство: Устанавливает атрибут `target` для отображаемой ссылки"
  },
  "textField": {
    "description": "Имя поля в массиве `options`, которое следует использовать для текстовой метки"
  },
  "textTag": {
    "description": "Указывает тег HTML для отображения вместо тега по умолчанию для контента текста"
  },
  "textVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к тексту"
  },
  "title": {
    "description": "Текстовый контент для размещения в заголовке"
  },
  "titleClass": {
    "description": "CSS-класс (или классы) для применения к заголовке"
  },
  "titleHtml": {
    "description": "Содержимое строки HTML для размещения в заголовке",
    "xss": true
  },
  "titleTag": {
    "description": "Указывает тег HTML для отображения вместо тега по умолчанию для заголовке"
  },
  "titleTextVariant": {
    "description": "Применяет один из вариантов цвета темы Bootstrap к тексту заголовка"
  },
  "to": {
    "description": "<router-link> свойство: Обозначает целевой маршрут ссылки. При нажатии значение свойства будет передано в `router.push()` внутренне, поэтому значение может быть либо строкой, либо объектом дескриптора местоположения"
  },
  "valueField": {
    "description": "Имя поля в массиве `options`, которое следует использовать для значения"
  },
  "variant": {
    "description": "Применяет к компоненту один из вариантов цвета темы Bootstrap."
  }
}
