(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{597:function(n,t){n.exports={baseTOC:{top:"#time",title:"Time",toc:[{href:"#обзор",label:"Обзор"},{href:"#v-model-return-value",label:"v-model return value"},{href:"#disabled-and-readonly-states",label:"Disabled and readonly states"},{href:"#styling",label:"Styling",toc:[{href:"#enabling-of-seconds-spinbutton",label:"Enabling of seconds spinbutton"},{href:"#hiding-the-top-selected-time-header",label:"Hiding the top selected time header"},{href:"#border-and-padding",label:"Border and padding"},{href:"#default-slot",label:"Default slot"}]},{href:"#events",label:"Events",toc:[{href:"#input-event",label:"input event"},{href:"#context-event",label:"context event"}]},{href:"#internationalization",label:"Internationalization",toc:[{href:"#understanding-the-hourcycle",label:"Understanding the hourCycle"},{href:"#forcing-12-or-24-hour-interface",label:"Forcing 12 or 24 hour interface"}]},{href:"#доступность",label:"Доступность"},{href:"#implementation-notes",label:"Implementation notes"},{href:"#смотрите-также",label:"Смотрите также"}]},titleLead:'<h1 id="time" class="bv-no-focus-ring"><span class="bd-content-title">Time</span></h1> <p class="bd-lead">BootstrapVue&#39;s custom <code class="text-nowrap" translate="no">&lt;b-time&gt;</code> component generates a WAI-ARIA compliant time selection widget, which can be used to control other components, or can be used to create customized time picker inputs.</p>',body:'<h2 id="обзор" class="bv-no-focus-ring"><span class="bd-content-title">Обзор<a class="anchorjs-link" href="#обзор" aria-labelledby="обзор"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-time&gt;</code> is WAI-ARIA accessibility compliant, optimized for keyboard control (arrow, page up/down, home, and end keys). Internationalization is also supported, and default&#39;s to the browser&#39;s or page&#39;s locale, if no locale(s) are specified.</p> <p>If you need a time picker as a custom form control input, use the <a href="/docs/components/form-timepicker" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-timepicker&gt;</code></a> component instead.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;auto&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-time</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">locale</span>=<span class="hljs-string">&quot;en&quot;</span> @<span class="hljs-attr">context</span>=<span class="hljs-string">&quot;onContext&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-time</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#x27;{{ value }}&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>&gt;</span>Context:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small&quot;</span>&gt;</span>{{ context }}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">context</span>: <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onContext</span>(<span class="hljs-params">ctx</span>)</span> {\n        <span class="hljs-built_in">this</span>.context = ctx\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-time.vue --&gt;</span></pre></div><h2 id="v-model-return-value" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">v-model</code> return value<a class="anchorjs-link" href="#v-model-return-value" aria-labelledby="v-model-return-value"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-time&gt;</code> always returns a string in the format of <code class="text-nowrap" translate="no">HH:mm:ss</code> which is the same format returned by native browser <code class="text-nowrap" translate="no">&lt;input type=&quot;time&quot;&gt;</code> controls. The value will be in the range of <code class="text-nowrap" translate="no">&#39;00:00:00&#39;</code> up to <code class="text-nowrap" translate="no">&#39;23:59:59&#39;</code> (24-hour clock using the <code class="text-nowrap" translate="no">&#39;h23&#39;</code> hour cycle syntax)</p> <p>If no time is selected, then <code class="text-nowrap" translate="no">&lt;b-time&gt;</code> returns an empty string (<code class="text-nowrap" translate="no">&#39;&#39;</code>).</p> <h2 id="disabled-and-readonly-states" class="bv-no-focus-ring"><span class="bd-content-title">Disabled and readonly states<a class="anchorjs-link" href="#disabled-and-readonly-states" aria-labelledby="disabled-and-readonly-states"></a></span></h2> <p>Setting the <code class="text-nowrap" translate="no">disabled</code> prop will remove all interactivity of the <code class="text-nowrap" translate="no">&lt;b-time&gt;</code> component. Setting the <code class="text-nowrap" translate="no">readonly</code> prop will disable selecting a time, but will keep the spinbuttons focusable.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Select time interactive state&quot;</span>\n      <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;state&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">aria-controls</span>=<span class="hljs-string">&quot;ex-disabled-readonly&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span>Disabled<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;readonly&quot;</span>&gt;</span>Readonly<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;normal&quot;</span>&gt;</span>Normal<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-time</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ex-disabled-readonly&quot;</span>\n      <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n      <span class="hljs-attr">:readonly</span>=<span class="hljs-string">&quot;readonly&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-time</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;disabled&#x27;</span>\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">disabled</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.state === <span class="hljs-string">&#x27;disabled&#x27;</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">readonly</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.state === <span class="hljs-string">&#x27;readonly&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-time-disabled-readonly.vue --&gt;</span></pre></div><h2 id="styling" class="bv-no-focus-ring"><span class="bd-content-title">Styling<a class="anchorjs-link" href="#styling" aria-labelledby="styling"></a></span></h2> <h3 id="enabling-of-seconds-spinbutton" class="bv-no-focus-ring"><span class="bd-content-title">Enabling of seconds spinbutton<a class="anchorjs-link" href="#enabling-of-seconds-spinbutton" aria-labelledby="enabling-of-seconds-spinbutton"></a></span></h3> <p>By default, the seconds spinbutton is not shown. To enable the section of seconds, set the <code class="text-nowrap" translate="no">show-seconds</code> prop to <code class="text-nowrap" translate="no">true</code> to enable the seconds selection spinbutton. When <code class="text-nowrap" translate="no">show-seconds</code> is <code class="text-nowrap" translate="no">false</code> (or not provided), the returned value will always have the seconds portion of the time string set to <code class="text-nowrap" translate="no">00</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-time</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">show-seconds</span> <span class="hljs-attr">locale</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-time</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Value: &#x27;{{ value }}&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-time-show-seconds.vue --&gt;</span></pre></div><h3 id="hiding-the-top-selected-time-header" class="bv-no-focus-ring"><span class="bd-content-title">Hiding the top selected time header<a class="anchorjs-link" href="#hiding-the-top-selected-time-header" aria-labelledby="hiding-the-top-selected-time-header"></a></span></h3> <p>By default, the current selected time will be displayed at the top of the time component, formatted in the locale&#39;s language.</p> <p>You can hide this header via the <code class="text-nowrap" translate="no">hide-header</code> prop. Note this only visually hides the selected time, while keeping it available to screen reader users as an <code class="text-nowrap" translate="no">aria-live</code> region.</p> <h3 id="border-and-padding" class="bv-no-focus-ring"><span class="bd-content-title">Border and padding<a class="anchorjs-link" href="#border-and-padding" aria-labelledby="border-and-padding"></a></span></h3> <p>Fancy a time control with a border with padding? Use Bootstrap&#39;s border and padding utility classes to add borders and padding:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-time</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;border rounded p-2&quot;</span> <span class="hljs-attr">locale</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-time</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-time-border-padding.vue --&gt;</span></pre></div><h3 id="default-slot" class="bv-no-focus-ring"><span class="bd-content-title">Default slot<a class="anchorjs-link" href="#default-slot" aria-labelledby="default-slot"></a></span></h3> <p>Provide optional content at the bottom of the time interface via the use of <code class="text-nowrap" translate="no">default</code> slot. The slot can be used to add buttons such as Now or Reset, etc.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-time</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">show-seconds</span> <span class="hljs-attr">locale</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex&quot;</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;ltr&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n        <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n        <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-danger&quot;</span>\n        <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;value&quot;</span>\n        @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clearTime&quot;</span>\n      &gt;</span>\n        Clear time\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n        <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n        <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-primary&quot;</span>\n        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ml-auto&quot;</span>\n        @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setNow&quot;</span>\n      &gt;</span>\n        Set Now\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-time</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">setNow</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()\n        <span class="hljs-comment">// Grab the HH:mm:ss part of the time string</span>\n        <span class="hljs-built_in">this</span>.value = now.toTimeString().slice(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">clearTime</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.value = <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-time-default-slot.vue --&gt;</span></pre></div><h2 id="events" class="bv-no-focus-ring"><span class="bd-content-title">Events<a class="anchorjs-link" href="#events" aria-labelledby="events"></a></span></h2> <h3 id="input-event" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">input</code> event<a class="anchorjs-link" href="#input-event" aria-labelledby="input-event"></a></span></h3> <p>The <code class="text-nowrap" translate="no">&#39;input&#39;</code> event is emitted when updating the <code class="text-nowrap" translate="no">v-model</code>. The event has a single argument which is the selected time as a string. The value is a string in the format of <code class="text-nowrap" translate="no">&#39;HH:mm:ss&#39;</code> (or an empty string if no time is selected). Valid values are in the range of <code class="text-nowrap" translate="no">&#39;00:00:00&#39;</code> through <code class="text-nowrap" translate="no">23:59:59&#39;</code>.</p> <p>If fhe <code class="text-nowrap" translate="no">show-seconds</code> prop is not set, the seconds portion of the time value will always be <code class="text-nowrap" translate="no">&#39;00&#39;</code>.</p> <p>If the <code class="text-nowrap" translate="no">disabled</code> or <code class="text-nowrap" translate="no">readonly</code> props are set, the <code class="text-nowrap" translate="no">&#39;input&#39;</code> event will <strong>not</strong> be emitted.</p> <h3 id="context-event" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">context</code> event<a class="anchorjs-link" href="#context-event" aria-labelledby="context-event"></a></span></h3> <p>The <code class="text-nowrap" translate="no">&#39;context&#39;</code> event is emitted whenever a user selects a time, or the user changes a value of one of the spinbuttons. It will also be emitted when the component is created (just before insertion into the DOM), or when the resolved locale has changed.</p> <p>The event will not be emitted when the <code class="text-nowrap" translate="no">disabled</code> or <code class="text-nowrap" translate="no">readonly</code> props are set (except for the initial emit when the time component is created).</p> <p>The <code class="text-nowrap" translate="no">&#39;context&#39;</code> event is passed a context object as it&#39;s only argument, with the following properties:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">value</code></td> <td>The current value as an <code class="text-nowrap" translate="no">HH:mm:ss</code> string or an empty string <code class="text-nowrap" translate="no">&#39;&#39;</code> if no time selected</td> </tr> <tr> <td><code class="text-nowrap" translate="no">formatted</code></td> <td>The current value formatted in the resolved locale, or the <code class="text-nowrap" translate="no">label-no-time</code> prop value if no time selected</td> </tr> <tr> <td><code class="text-nowrap" translate="no">hours</code></td> <td>The currently selected hour (always 24 hour, <code class="text-nowrap" translate="no">h23&#39;</code> format) as a number or <code class="text-nowrap" translate="no">null</code> if no hour</td> </tr> <tr> <td><code class="text-nowrap" translate="no">minutes</code></td> <td>The currently selected minute value as a number or <code class="text-nowrap" translate="no">null</code> if no minute</td> </tr> <tr> <td><code class="text-nowrap" translate="no">seconds</code></td> <td>The currently selected seconds value as a number or <code class="text-nowrap" translate="no">null</code> if no seconds</td> </tr> <tr> <td><code class="text-nowrap" translate="no">locale</code></td> <td>The locale resolved by the time picker, this <em>may</em> be different than the requested locale</td> </tr> <tr> <td><code class="text-nowrap" translate="no">isRTL</code></td> <td>Will be <code class="text-nowrap" translate="no">true</code> is the locale is RTL (right-to-left)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">hour12</code></td> <td>Boolean value indicating if the interface is using 12 hour format</td> </tr> <tr> <td><code class="text-nowrap" translate="no">hourCycle</code></td> <td>A string representing the type of hour cycle used for the spinbuttons: <code class="text-nowrap" translate="no">&#39;h11&#39;</code>, <code class="text-nowrap" translate="no">&#39;h12&#39;</code>, <code class="text-nowrap" translate="no">&#39;h23&#39;</code> or <code class="text-nowrap" translate="no">&#39;h24&#39;</code></td> </tr> </tbody></table> </div><p>Refer to the <a href="#internationalization" class="font-weight-bold">Internationalization section</a> for information on the context properties <code class="text-nowrap" translate="no">locale</code>, <code class="text-nowrap" translate="no">hour12</code> and <code class="text-nowrap" translate="no">hourCycle</code>.</p> <h2 id="internationalization" class="bv-no-focus-ring"><span class="bd-content-title">Internationalization<a class="anchorjs-link" href="#internationalization" aria-labelledby="internationalization"></a></span></h2> <p>Internationalization of the time interface is provided via <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">Intl.DateTimeFormat</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">Intl.NumberFormat</code></a>, except for the labels applied to elements of the time control (aria-labels, selected status, etc.). You must provide your own translations for these labels. The available locales will be browser dependent (not all browsers support all locales).</p> <p>By default <code class="text-nowrap" translate="no">&lt;b-time&gt;</code> will use the browser&#39;s default locale, but you can specify the locale (or locales) to use via the <code class="text-nowrap" translate="no">locale</code> prop. The prop accepts either a single locale string, or an array of locale strings (listed in order of most preferred locale to least preferred).</p> <p>The emitted <code class="text-nowrap" translate="no">&#39;context&#39;</code> event will include which locale the time control has resolved to (which may not be the same locale as requested, depending on the supported locales of <code class="text-nowrap" translate="no">Intl</code>).</p> <p>For server side rendering (SSR) when using Node.js, ensure that the Node.js runtime you are using supports <code class="text-nowrap" translate="no">Intl</code> and the locales you will be using. Refer to the <a href="https://nodejs.org/api/intl.html" target="_blank" rel="noopener">Node Intl support documentation</a> for details.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;example-locales&quot;</span>&gt;</span>Locale:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-locales&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;locale&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;locales&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;auto&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-time</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n        <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;labels[locale] || {}&quot;</span>\n        <span class="hljs-attr">:locale</span>=<span class="hljs-string">&quot;locale&quot;</span>\n        <span class="hljs-attr">show-seconds</span>\n        @<span class="hljs-attr">context</span>=<span class="hljs-string">&quot;onContext&quot;</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-time</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#x27;{{ value }}&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>&gt;</span>Context:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small&quot;</span>&gt;</span>{{ context }}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>\n   <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">context</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">locale</span>: <span class="hljs-string">&#x27;en-US&#x27;</span>,\n        <span class="hljs-attr">locales</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;English US (en-US)&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;German (de)&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;ar-EG&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Arabic Egyptian (ar-EG)&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;zh&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Chinese (zh)&#x27;</span> }\n        ],\n        <span class="hljs-attr">labels</span>: {\n          <span class="hljs-attr">de</span>: {\n            <span class="hljs-attr">labelHours</span>: <span class="hljs-string">&#x27;Stunden&#x27;</span>,\n            <span class="hljs-attr">labelMinutes</span>: <span class="hljs-string">&#x27;Minuten&#x27;</span>,\n            <span class="hljs-attr">labelSeconds</span>: <span class="hljs-string">&#x27;Sekunden&#x27;</span>,\n            <span class="hljs-attr">labelIncrement</span>: <span class="hljs-string">&#x27;Erhöhen&#x27;</span>,\n            <span class="hljs-attr">labelDecrement</span>: <span class="hljs-string">&#x27;Verringern&#x27;</span>,\n            <span class="hljs-attr">labelSelected</span>: <span class="hljs-string">&#x27;Ausgewählte Zeit&#x27;</span>,\n            <span class="hljs-attr">labelNoTimeSelected</span>: <span class="hljs-string">&#x27;Keine Zeit ausgewählt&#x27;</span>\n          },\n          <span class="hljs-string">&#x27;ar-EG&#x27;</span>: {\n            <span class="hljs-attr">labelHours</span>: <span class="hljs-string">&#x27;ساعات&#x27;</span>,\n            <span class="hljs-attr">labelMinutes</span>: <span class="hljs-string">&#x27;الدقائق&#x27;</span>,\n            <span class="hljs-attr">labelSeconds</span>: <span class="hljs-string">&#x27;ثواني&#x27;</span>,\n            <span class="hljs-attr">labelAmpm</span>: <span class="hljs-string">&#x27;صباحا مساء&#x27;</span>,\n            <span class="hljs-attr">labelAm</span>: <span class="hljs-string">&#x27;ص&#x27;</span>,\n            <span class="hljs-attr">labelPm</span>: <span class="hljs-string">&#x27;م&#x27;</span>,\n            <span class="hljs-attr">labelIncrement</span>: <span class="hljs-string">&#x27;زيادة&#x27;</span>,\n            <span class="hljs-attr">labelDecrement</span>: <span class="hljs-string">&#x27;إنقاص&#x27;</span>,\n            <span class="hljs-attr">labelSelected</span>: <span class="hljs-string">&#x27;الوقت المحدد&#x27;</span>,\n            <span class="hljs-attr">labelNoTimeSelected</span>: <span class="hljs-string">&#x27;لا وقت المختار&#x27;</span>\n          },\n          <span class="hljs-attr">zh</span>: {\n            <span class="hljs-attr">labelHours</span>: <span class="hljs-string">&#x27;小时&#x27;</span>,\n            <span class="hljs-attr">labelMinutes</span>: <span class="hljs-string">&#x27;分钟&#x27;</span>,\n            <span class="hljs-attr">labelSeconds</span>: <span class="hljs-string">&#x27;秒&#x27;</span>,\n            <span class="hljs-attr">labelAmpm</span>: <span class="hljs-string">&#x27;上午下午&#x27;</span>,\n            <span class="hljs-attr">labelAm</span>: <span class="hljs-string">&#x27;上午&#x27;</span>,\n            <span class="hljs-attr">labelPm</span>: <span class="hljs-string">&#x27;下午&#x27;</span>,\n            <span class="hljs-attr">labelIncrement</span>: <span class="hljs-string">&#x27;增量&#x27;</span>,\n            <span class="hljs-attr">labelDecrement</span>: <span class="hljs-string">&#x27;减量&#x27;</span>,\n            <span class="hljs-attr">labelSelected</span>: <span class="hljs-string">&#x27;选定时间&#x27;</span>,\n            <span class="hljs-attr">labelNoTimeSelected</span>: <span class="hljs-string">&#x27;没有选择时间&#x27;</span>\n          }\n        }\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onContext</span>(<span class="hljs-params">ctx</span>)</span> {\n        <span class="hljs-built_in">this</span>.context = ctx\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-time-i18n.vue --&gt;</span></pre></div><h3 id="understanding-the-hourcycle" class="bv-no-focus-ring"><span class="bd-content-title">Understanding the <code class="text-nowrap" translate="no">hourCycle</code><a class="anchorjs-link" href="#understanding-the-hourcycle" aria-labelledby="understanding-the-hourcycle"></a></span></h3> <p>There are 2 main types of time keeping conventions (clocks) used around the world: the 12-hour clock and the 24-hour clock. The <code class="text-nowrap" translate="no">hourCycle</code> property allows you to access the clock type used by a particular locale. The hour cycle type can have several different values, which are listed in the table below. The <code class="text-nowrap" translate="no">hourCycle</code> signals how the time <code class="text-nowrap" translate="no">&#39;00:00:00&#39;</code> (the start of the day) should be presented/formatted to a user of a particular locale. The <a href="#context-event" class="font-weight-bold"><code class="text-nowrap" translate="no">&#39;context&#39;</code> event</a> includes the resolved <code class="text-nowrap" translate="no">hourCycle</code> value.</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th><code class="text-nowrap" translate="no">hourCycle</code></th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">&#39;h12&#39;</code></td> <td>Hour system using <code class="text-nowrap" translate="no">1</code>–<code class="text-nowrap" translate="no">12</code>. The 12 hour clock, with midnight starting at 12:00 am</td> </tr> <tr> <td><code class="text-nowrap" translate="no">&#39;h23&#39;</code></td> <td>Hour system using <code class="text-nowrap" translate="no">0</code>–<code class="text-nowrap" translate="no">23</code>. The 24 hour clock, with midnight starting at 0:00</td> </tr> <tr> <td><code class="text-nowrap" translate="no">&#39;h11&#39;</code></td> <td>Hour system using <code class="text-nowrap" translate="no">0</code>–<code class="text-nowrap" translate="no">11</code>. The 12 hour clock, with midnight starting at 0:00 am</td> </tr> <tr> <td><code class="text-nowrap" translate="no">&#39;h24&#39;</code></td> <td>Hour system using <code class="text-nowrap" translate="no">1</code>–<code class="text-nowrap" translate="no">24</code>. The 24 hour clock, with midnight starting at 24:00</td> </tr> </tbody></table> </div><p>Native HTML5 <code class="text-nowrap" translate="no">&lt;input type=&quot;date&quot;&gt;</code> returns the time value in the <code class="text-nowrap" translate="no">&#39;h23&#39;</code> format, and <code class="text-nowrap" translate="no">&lt;b-time&gt;</code> also returns the v-model in the <code class="text-nowrap" translate="no">&#39;h23&#39;</code> format. This value may differ from what is presented to the user via the GUI (spin buttons) of the <code class="text-nowrap" translate="no">&lt;b-time&gt;</code> component, dependent upon the <a href="#internationalization" class="font-weight-bold">locale selected</a>.</p> <p><strong>Note:</strong> IE 11 <em>does not support</em> resolving the <code class="text-nowrap" translate="no">hourCycle</code> value of a locale, so we assume either <code class="text-nowrap" translate="no">h12</code> or <code class="text-nowrap" translate="no">h23</code> based on the resolved <code class="text-nowrap" translate="no">hour12</code> value.</p> <h3 id="forcing-12-or-24-hour-interface" class="bv-no-focus-ring"><span class="bd-content-title">Forcing 12 or 24 hour interface<a class="anchorjs-link" href="#forcing-12-or-24-hour-interface" aria-labelledby="forcing-12-or-24-hour-interface"></a></span></h3> <p>12-hour versus 24-hour input is determined by the client browsers default locale (or the locale resolved from the <code class="text-nowrap" translate="no">locale</code> prop). To force a 12-hour user interface, set the prop <code class="text-nowrap" translate="no">hour12</code> to <code class="text-nowrap" translate="no">true</code>. To force a 24-hour user interface, set the prop <code class="text-nowrap" translate="no">hour12</code> to <code class="text-nowrap" translate="no">false</code>. The default for prop <code class="text-nowrap" translate="no">hour12</code> is <code class="text-nowrap" translate="no">null</code> which uses the resolved locale to determine which interface to use.</p> <p>The setting of the <code class="text-nowrap" translate="no">hour12</code> prop will affect which <a href="#understanding-the-hourcycle" class="font-weight-bold"><code class="text-nowrap" translate="no">hourCycle</code></a> is resolved for formatting the hours spinbutton. Note that while this may affect the format of the hour spinbutton, but the formatted time string result <em>may</em> show the <code class="text-nowrap" translate="no">&#39;h12</code> or <code class="text-nowrap" translate="no">&#39;h23&#39;</code> format due to limitations in the client <code class="text-nowrap" translate="no">Intl.DateTimeFormat</code> support for a particular locale. It is therefore <strong>recommended to leave the <code class="text-nowrap" translate="no">hour12</code> prop set to <code class="text-nowrap" translate="no">null</code> (default)</strong>, so show the locale default time/hour formatting.</p> <h2 id="доступность" class="bv-no-focus-ring"><span class="bd-content-title">Доступность<a class="anchorjs-link" href="#доступность" aria-labelledby="доступность"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-time&gt;</code> provides many accessibility features, such as <code class="text-nowrap" translate="no">aria-live</code> regions, roles, aria labeling, shortcut keys and full keyboard navigation to work with most screen readers.</p> <p>Keyboard navigation:</p> <ul> <li><kbd class="notranslate" translate="no">ArrowUp</kbd> Increments the currently selected spinbutton value</li> <li><kbd class="notranslate" translate="no">ArrowDown</kbd> Decrements the currently selected spinbutton value</li> <li><kbd class="notranslate" translate="no">Home</kbd> Sets the selected spinbutton to the minimum value</li> <li><kbd class="notranslate" translate="no">End</kbd> Sets the selected spinbutton to the maximum value</li> <li><kbd class="notranslate" translate="no">PageUp</kbd> Increases the selected spinbutton value by the spinbutton&#39;s step by a larger value</li> <li><kbd class="notranslate" translate="no">PageDown</kbd> Decreases the selected spinbutton value by the spinbutton&#39;s step by a larger value</li> <li><kbd class="notranslate" translate="no">ArrowRight</kbd> Moves focus to the next spin button in the component</li> <li><kbd class="notranslate" translate="no">ArrowLeft</kbd> Moves focus to the previous spin button in the component</li> </ul> <p>Several of the <code class="text-nowrap" translate="no">label-*</code> props are not visible on screen, but are used to label various elements within the calendar for screen reader users. e.g. the <code class="text-nowrap" translate="no">label-selected</code> prop is added to the element that displays the selected value.</p> <p>When internationalizing the datepicker, it is important to also update the <code class="text-nowrap" translate="no">label-*</code> props with appropriate translated strings, so that international screen reader users will hear the correct prompts and descriptions.</p> <h2 id="implementation-notes" class="bv-no-focus-ring"><span class="bd-content-title">Implementation notes<a class="anchorjs-link" href="#implementation-notes" aria-labelledby="implementation-notes"></a></span></h2> <p>The <code class="text-nowrap" translate="no">&lt;b-time&gt;</code> component is based upon the custom BootstrapVue component <a href="/docs/components/form-spinbutton" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-spinbutton&gt;</code></a>.</p> <p><code class="text-nowrap" translate="no">&lt;b-time&gt;</code> uses Bootstrap&#39;s border and flex utility classes, along with button (<code class="text-nowrap" translate="no">btn-*</code>) classes and the <code class="text-nowrap" translate="no">form-control</code> class. BootstrapVue&#39;s custom SCSS/CSS is also required for proper styling.</p> <h2 id="смотрите-также" class="bv-no-focus-ring"><span class="bd-content-title">Смотрите также<a class="anchorjs-link" href="#смотрите-также" aria-labelledby="смотрите-также"></a></span></h2> <ul> <li><a href="/docs/components/form-timepicker" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-timepicker&gt;</code> Time picker custom form input</a></li> <li><a href="/docs/components/calendar" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-calendar&gt;</code> Calendar date selection widget</a></li> <li><a href="/docs/components/form-datepicker" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-datepicker&gt;</code> Date picker custom form input</a></li> </ul>'}}}]);