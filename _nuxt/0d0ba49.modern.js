(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{481:function(t,n){t.exports={baseTOC:{top:"#toast",title:"Toast",toc:[{href:"#обзор",label:"Обзор",toc:[{href:"#toast-features-and-notes",label:"Toast features and notes"}]},{href:"#toasts-on-demand",label:"Toasts on demand"},{href:"#опции",label:"Опции",toc:[{href:"#title",label:"Title"},{href:"#transparency",label:"Transparency"},{href:"#variants",label:"Variants"},{href:"#toaster-target",label:"Toaster target"},{href:"#prepend-and-append",label:"Prepend and append"},{href:"#auto-hide",label:"Auto-hide"},{href:"#close-button",label:"Close button"},{href:"#toast-roles",label:"Toast roles"},{href:"#links",label:"Links"}]},{href:"#b-toast-component",label:"&lt;b-toast&gt; component",toc:[{href:"#slots",label:"Slots"}]},{href:"#b-toaster-target-component",label:"&lt;b-toaster&gt; target component"},{href:"#advanced-usage",label:"Advanced usage"},{href:"#alerts-versus-toasts",label:"Alerts versus toasts"},{href:"#доступность",label:"Доступность",toc:[{href:"#доступность-tips",label:"Доступность tips"},{href:"#internet-explorer-screen-reader-support",label:"Internet Explorer screen reader support"}]}]},titleLead:'<h1 id="toast" class="bv-no-focus-ring"><span class="bd-content-title">Toast</span></h1> <p class="bd-lead">Push notifications to your visitors with a <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code>, lightweight components which are easily customizable for generating alert messages.</p>',body:'<p>Toasts are lightweight notifications designed to mimic the push notifications that have been popularized by mobile and desktop operating systems.</p> <p>Toasts are intended to be small interruptions to your visitors or users, and therefore should contain minimal, to-the-point, non-interactive content. Please refer to the <a href="#accessibility-tips" class="font-weight-bold">Accessibility tips</a> section below for <strong>important</strong> usage information.</p> <h2 id="обзор" class="bv-no-focus-ring"><span class="bd-content-title">Обзор<a class="anchorjs-link" href="#обзор" aria-labelledby="обзор"></a></span></h2> <p>To encourage extensible and predictable toasts, we recommend providing a header (title) and body. Toast headers use the style <code class="text-nowrap" translate="no">&#39;display: flex&#39;</code>, allowing easy alignment of content thanks to Bootstrap&#39;s <a href="/docs/reference/utility-classes" class="font-weight-bold">margin and flexbox utility classes</a>.</p> <p>Toasts are slightly translucent, too, so they blend over whatever they might appear over. For browsers that support the <code class="text-nowrap" translate="no">backdrop-filter</code> CSS property, they also attempt to blur the elements under the toast.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-3 bg-secondary progress-bar-striped&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;min-height: 170px;&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$bvToast.show(&#x27;example-toast&#x27;)&quot;</span>&gt;</span>\n      Show toast\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-toast</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-toast&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;BootstrapVue&quot;</span> <span class="hljs-attr">static</span> <span class="hljs-attr">no-auto-hide</span>&gt;</span>\n      Hello, world! This is a toast message.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-toast</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toast-intro.vue --&gt;</span></pre></div><p><strong>Примечание:</strong> we are using the <code class="text-nowrap" translate="no">static</code> prop in the above example to render the toast in-place in the document, rather than transporting it to a <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> target container. And we have added classes <code class="text-nowrap" translate="no">bg-secondary</code> and <code class="text-nowrap" translate="no">progress-bar-striped</code> to the outer <code class="text-nowrap" translate="no">&lt;div&gt;</code> for illustrative purposes of toast transparency only.</p> <h3 id="toast-features-and-notes" class="bv-no-focus-ring"><span class="bd-content-title">Toast features and notes<a class="anchorjs-link" href="#toast-features-and-notes" aria-labelledby="toast-features-and-notes"></a></span></h3> <ul> <li>Toasts can be generated on demand via the injection <code class="text-nowrap" translate="no">this.$bvToast</code> object, or manually created using the <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> component.</li> <li>Titles are optional, but should be included, titles are rendered inside a <code class="text-nowrap" translate="no">&lt;strong&gt;</code> element, unless using the <code class="text-nowrap" translate="no">toast-title</code> slot.</li> <li>The close button at the top right of the toast can be removed via the <code class="text-nowrap" translate="no">no-close-button</code> prop.</li> <li>A title bar is shown, unless you give no title and set the <code class="text-nowrap" translate="no">no-close-button</code> prop.</li> <li>Auto-hiding occurs after 5000 ms, which can be changed via the <code class="text-nowrap" translate="no">auto-hide-delay</code> prop, or disabled with the <code class="text-nowrap" translate="no">no-auto-hide</code> prop.</li> <li>When auto-hide is enabled, while you hover over the toast, the auto-hide countdown will pause. You can disable this feature by setting the <code class="text-nowrap" translate="no">no-hover-pause</code> prop to <code class="text-nowrap" translate="no">true</code>.</li> <li>If you disable the auto-hide feature, avoid hiding the close button, or if you hide the close button be sure to allow the toast to auto-dismiss. Please refer to the <a href="#accessibility-tips" class="font-weight-bold">Accessibility tips</a> section below for <strong>important</strong> usage information.</li> <li>Toast transparency can be disabled by setting the <code class="text-nowrap" translate="no">solid</code> prop to <code class="text-nowrap" translate="no">true</code>.</li> <li>Toasts will show inside a named <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> target component. BootstrapVue comes with several pre-defined toaster targets. Toasts will check for the named toaster in the document before they are shown, and will dynamically create the named toaster target if one is not found.</li> <li>Toaster targets are defined completely with CSS for controlling the positioning of the contained <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> components.</li> <li>Toasts can can targeted to any named toaster.</li> <li>Toasts are wrapped in a <code class="text-nowrap" translate="no">&lt;div&gt;</code> with class <code class="text-nowrap" translate="no">b-toast</code> to allow for Vue list-transition support when displayed in a toaster component.</li> </ul> <p>BootstrapVue uses <a href="https://portal-vue.linusb.org/" target="_blank" rel="noopener">PortalVue</a> to transport toasts into the toasters.</p> <h2 id="toasts-on-demand" class="bv-no-focus-ring"><span class="bd-content-title">Toasts on demand<a class="anchorjs-link" href="#toasts-on-demand" aria-labelledby="toasts-on-demand"></a></span></h2> <p>Generate a dynamic toast from anywhere in your app via the <code class="text-nowrap" translate="no">this.$bvToast</code> Vue component <em>instance</em> injection, without the need to place a <a href="#b-toast-component" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-toast&gt;</code></a> component in your app.</p> <p>Use the <code class="text-nowrap" translate="no">this.$bvToast.toast()</code> method to generate on demand toasts. The method accepts two arguments:</p> <ul> <li><code class="text-nowrap" translate="no">message</code>: the content of the toast body (either a string, or an array of <code class="text-nowrap" translate="no">VNodes</code>). Required. Toasts with an empty message will not be shown. See the <a href="#advanced-usage" class="font-weight-bold">Advanced usage</a> section for an example of passing an array of <code class="text-nowrap" translate="no">VNodes</code> as the message.</li> <li><code class="text-nowrap" translate="no">options</code>: an optional options object for providing a title and/or additional configuration options. The <code class="text-nowrap" translate="no">title</code> option can be either a string or an array of <code class="text-nowrap" translate="no">VNodes</code></li> </ul> <p>The options argument accepts most of the props that the <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> component accepts (with the exception of <code class="text-nowrap" translate="no">static</code>, and <code class="text-nowrap" translate="no">visible</code>) in <samp class="notranslate" translate="no">camelCase</samp> name format instead of <samp class="notranslate" translate="no">kebab-case</samp>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast()&quot;</span>&gt;</span>Show Toast<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(true)&quot;</span>&gt;</span>Show Toast (appended)<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">toastCount</span>: <span class="hljs-number">0</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">makeToast</span>(<span class="hljs-params">append = <span class="hljs-literal">false</span></span>)</span> {\n        <span class="hljs-built_in">this</span>.toastCount++\n        <span class="hljs-built_in">this</span>.$bvToast.toast(<span class="hljs-string">`This is toast number <span class="hljs-subst">${<span class="hljs-built_in">this</span>.toastCount}</span>`</span>, {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;BootstrapVue Toast&#x27;</span>,\n          <span class="hljs-attr">autoHideDelay</span>: <span class="hljs-number">5000</span>,\n          <span class="hljs-attr">appendToast</span>: append\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toasts-bv-toast-example.vue --&gt;</span></pre></div><p>Once a toast which was generated using <code class="text-nowrap" translate="no">this.$bvToast.toast()</code> has been hidden, it will automatically be destroyed and removed from the document.</p> <p><strong>Примечания:</strong></p> <ul> <li>The <code class="text-nowrap" translate="no">this.$bvToast</code> injection is only available when using the full <code class="text-nowrap" translate="no">BootstrapVue</code> plugin or the <code class="text-nowrap" translate="no">ToastPlugin</code> plugin. It is not available if importing just the <code class="text-nowrap" translate="no">b-toast</code> or <code class="text-nowrap" translate="no">b-toaster</code> components. To just import the <code class="text-nowrap" translate="no">$bvToast</code> injection, use the <code class="text-nowrap" translate="no">BVToastPlugin</code> plugin.</li> <li>A new <code class="text-nowrap" translate="no">$bvToast</code> injection (mixin) is created for each Vue virtual machine instance (i.e. each instantiated component), and is not usable via direct access to the <code class="text-nowrap" translate="no">Vue.prototype</code>, as it needs access to the instance&#39;s <code class="text-nowrap" translate="no">this</code> and <code class="text-nowrap" translate="no">$root</code> contexts.</li> <li>Toasts generated via <code class="text-nowrap" translate="no">this.$bvToast.toast()</code> are children of the Vue instance that calls the <code class="text-nowrap" translate="no">this.$bvToast.toast()</code> method, and will be hidden and destroyed if that Vue instance (i.e. your component or app) is also destroyed. If the vm context is inside a <code class="text-nowrap" translate="no">&lt;router-view&gt;</code>, and the <code class="text-nowrap" translate="no">$route</code> changes, the toast will also be destroyed (as all the children of <code class="text-nowrap" translate="no">&lt;router-view&gt;</code> are destroyed. To make on-demand toasts persist across router <code class="text-nowrap" translate="no">$route</code> changes, use <code class="text-nowrap" translate="no">this.$root.$bvToast.toast()</code> instead to make the toast&#39;s parent the root of your app.</li> <li>Toasts require a message. Toasts on demand with an empty message will silently not be shown.</li> </ul> <h2 id="опции" class="bv-no-focus-ring"><span class="bd-content-title">Опции<a class="anchorjs-link" href="#опции" aria-labelledby="опции"></a></span></h2> <p>Toasts have various options that can control their style and behaviour. Options are available both as props on the <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> component and as properties of the options object passed to <code class="text-nowrap" translate="no">this.$bvToast.toast()</code>. When passing options to <code class="text-nowrap" translate="no">this.$bvToast.toast()</code>, use the <samp class="notranslate" translate="no">camelCase</samp> version of the component prop name, i.e. use <code class="text-nowrap" translate="no">noAutoHide</code> instead of <code class="text-nowrap" translate="no">no-auto-hide</code>.</p> <h3 id="title" class="bv-no-focus-ring"><span class="bd-content-title">Title<a class="anchorjs-link" href="#title" aria-labelledby="title"></a></span></h3> <p>Add a title to your toast via the <code class="text-nowrap" translate="no">title</code> option. Just like the toast <code class="text-nowrap" translate="no">message</code>, the title can be a simple string, or an array of VNodes. See the <a href="#advanced-usage" class="font-weight-bold">Advanced usage</a> section for an example of passing an array of <code class="text-nowrap" translate="no">VNodes</code> as the message and title.</p> <h3 id="transparency" class="bv-no-focus-ring"><span class="bd-content-title">Transparency<a class="anchorjs-link" href="#transparency" aria-labelledby="transparency"></a></span></h3> <p>Toasts have a semi-transparent background by default. To disable the default transparency, just set the <code class="text-nowrap" translate="no">solid</code> prop to <code class="text-nowrap" translate="no">true</code> to remove the alpha channel from the background color.</p> <p>Transparency can also be altered via the BootstrapVue custom SCSS variable <code class="text-nowrap" translate="no">$b-toast-background-opacity</code> when using the SCSS files rather than CSS files. Refer to the <a href="/docs/reference/theming" class="font-weight-bold">Theming</a> reference section.</p> <h3 id="variants" class="bv-no-focus-ring"><span class="bd-content-title">Variants<a class="anchorjs-link" href="#variants" aria-labelledby="variants"></a></span></h3> <p>BootstrapVue toasts provide custom CSS to define color variants. Variants follow the standard Bootstrap v4 variant names. If you have custom SCSS defined Bootstrap color theme variants, the toast custom SCSS will automatically create toast variants for you (refer to the <a href="/docs/reference/theming" class="font-weight-bold">Theming</a> reference section).</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast()&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>По умолчанию<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;primary&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;secondary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;secondary&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Secondary<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;danger&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Danger<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;warning&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;warning&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Warning<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;success&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;success&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;info&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;info&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Info<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">makeToast</span>(<span class="hljs-params">variant = <span class="hljs-literal">null</span></span>)</span> {\n        <span class="hljs-built_in">this</span>.$bvToast.toast(<span class="hljs-string">&#x27;Toast body content&#x27;</span>, {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">`Variant <span class="hljs-subst">${variant || <span class="hljs-string">&#x27;default&#x27;</span>}</span>`</span>,\n          <span class="hljs-attr">variant</span>: variant,\n          <span class="hljs-attr">solid</span>: <span class="hljs-literal">true</span>\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toast-variants.vue --&gt;</span></pre></div><h3 id="toaster-target" class="bv-no-focus-ring"><span class="bd-content-title">Toaster target<a class="anchorjs-link" href="#toaster-target" aria-labelledby="toaster-target"></a></span></h3> <p>BootstrapVue comes with the following &quot;built-in&quot; toaster names (and associated styles defined in SCSS):</p> <ul> <li><code class="text-nowrap" translate="no">b-toaster-top-right</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-left</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-center</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-full</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-right</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-left</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-center</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-full</code></li> </ul> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-top-right&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-top-right<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-top-left&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-top-left<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-top-center&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-top-center<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-top-full&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-top-full<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-bottom-right&#x27;, true)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-bottom-right<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-bottom-left&#x27;, true)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-bottom-left<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-bottom-center&#x27;, true)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-bottom-center<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-bottom-full&#x27;, true)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-bottom-full<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">toast</span>(<span class="hljs-params">toaster, append = <span class="hljs-literal">false</span></span>)</span> {\n        <span class="hljs-built_in">this</span>.counter++\n        <span class="hljs-built_in">this</span>.$bvToast.toast(<span class="hljs-string">`Toast <span class="hljs-subst">${<span class="hljs-built_in">this</span>.counter}</span> body content`</span>, {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">`Toaster <span class="hljs-subst">${toaster}</span>`</span>,\n          <span class="hljs-attr">toaster</span>: toaster,\n          <span class="hljs-attr">solid</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">appendToast</span>: append\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toast-targets.vue --&gt;</span></pre></div><p><strong>Примечания:</strong></p> <ul> <li>Toaster target names that have not been defined in CSS will render at the bottom of the document, stacked and not positioned (appended to <code class="text-nowrap" translate="no">&lt;body&gt;</code> inside a <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> with class name and ID set to the toaster target name). The only default styling the toaster will have is a <code class="text-nowrap" translate="no">z-index</code> of <code class="text-nowrap" translate="no">1100</code>.</li> <li>Avoid using <code class="text-nowrap" translate="no">b-toaster-top-*</code> toasters together, or <code class="text-nowrap" translate="no">b-toaster-bottom-*</code> toasters together, at the same time in your app as notifications could be obscured/overlap on small screens (i.e. <code class="text-nowrap" translate="no">xs</code>).</li> </ul> <h3 id="prepend-and-append" class="bv-no-focus-ring"><span class="bd-content-title">Prepend and append<a class="anchorjs-link" href="#prepend-and-append" aria-labelledby="prepend-and-append"></a></span></h3> <p>Toasts default to prepending themselves to the top of the toasts shown in the specified toaster in the order they were created. To append new toasts to the bottom, set the <code class="text-nowrap" translate="no">append-toast</code> prop to <code class="text-nowrap" translate="no">true</code>.</p> <h3 id="auto-hide" class="bv-no-focus-ring"><span class="bd-content-title">Auto-hide<a class="anchorjs-link" href="#auto-hide" aria-labelledby="auto-hide"></a></span></h3> <p>Change to auto hide delay time via the <code class="text-nowrap" translate="no">auto-hide-delay</code> prop (value is in milliseconds), which defaults to <code class="text-nowrap" translate="no">5000</code> (minimum value <code class="text-nowrap" translate="no">1000</code>). Or, disable the auto-hide feature completely by setting the <code class="text-nowrap" translate="no">no-auto-hide</code> prop to <code class="text-nowrap" translate="no">true</code>.</p> <p>When auto-hide is enabled, hovering over the toast will pause the auto-hide timer. When you un-hover the toast, the auto-hide timer will be resumed. You can disable this feature by setting the <code class="text-nowrap" translate="no">no-hover-pause</code> prop to <code class="text-nowrap" translate="no">true</code>.</p> <h3 id="close-button" class="bv-no-focus-ring"><span class="bd-content-title">Close button<a class="anchorjs-link" href="#close-button" aria-labelledby="close-button"></a></span></h3> <p>Toasts have a close button to hide them on use click by default. Setting the <code class="text-nowrap" translate="no">no-close-button</code> prop to <code class="text-nowrap" translate="no">true</code> will prevent this and creates a toast without the default close button.</p> <p>It is still possible to create a custom close button for the toast by providing a unique ID and use the <code class="text-nowrap" translate="no">this.$bvToast.hide(id)</code> method to hide the specific toast:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showToast&quot;</span>&gt;</span>Show Toast<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">showToast</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Use a shorter name for `this.$createElement`</span>\n        <span class="hljs-keyword">const</span> h = <span class="hljs-built_in">this</span>.$createElement\n        <span class="hljs-comment">// Create a ID with a incremented count</span>\n        <span class="hljs-keyword">const</span> id = <span class="hljs-string">`my-toast-<span class="hljs-subst">${<span class="hljs-built_in">this</span>.count++}</span>`</span>\n\n        <span class="hljs-comment">// Create the custom close button</span>\n        <span class="hljs-keyword">const</span> $closeButton = h(\n          <span class="hljs-string">&#x27;b-button&#x27;</span>,\n          {\n            <span class="hljs-attr">on</span>: { <span class="hljs-attr">click</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">this</span>.$bvToast.hide(id) }\n          },\n          <span class="hljs-string">&#x27;Close&#x27;</span>\n        )\n\n        <span class="hljs-comment">// Create the toast</span>\n        <span class="hljs-built_in">this</span>.$bvToast.toast([$closeButton], {\n          <span class="hljs-attr">id</span>: id,\n          <span class="hljs-attr">title</span>: <span class="hljs-string">`Toast <span class="hljs-subst">${<span class="hljs-built_in">this</span>.count}</span>`</span>,\n          <span class="hljs-attr">noCloseButton</span>: <span class="hljs-literal">true</span>\n        })\n      }\n    }\n }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toasts-advanced.vue --&gt;</span></pre></div><h3 id="toast-roles" class="bv-no-focus-ring"><span class="bd-content-title">Toast roles<a class="anchorjs-link" href="#toast-roles" aria-labelledby="toast-roles"></a></span></h3> <p>Toasts are rendered with a default <code class="text-nowrap" translate="no">role</code> attribute of <code class="text-nowrap" translate="no">&#39;alert&#39;</code> and <code class="text-nowrap" translate="no">aria-live</code> attribute of <code class="text-nowrap" translate="no">&#39;assertive&#39;</code>. For toasts that are meant for a casual notification, set the <code class="text-nowrap" translate="no">is-status</code> prop to <code class="text-nowrap" translate="no">true</code>, which will change the <code class="text-nowrap" translate="no">role</code> and <code class="text-nowrap" translate="no">aria-live</code> attributes to <code class="text-nowrap" translate="no">&#39;status&#39;</code> and <code class="text-nowrap" translate="no">&#39;polite&#39;</code> respectively.</p> <p>For more information, please the the <a href="#accessibility" class="font-weight-bold">Accessibility</a> section below.</p> <h3 id="links" class="bv-no-focus-ring"><span class="bd-content-title">Links<a class="anchorjs-link" href="#links" aria-labelledby="links"></a></span></h3> <p>Optionally convert the toast body to a link (<code class="text-nowrap" translate="no">&lt;a&gt;</code>) or <code class="text-nowrap" translate="no">&lt;router-link&gt;</code> (or <code class="text-nowrap" translate="no">&lt;nuxt-link&gt;</code>) via the <code class="text-nowrap" translate="no">href</code> and <code class="text-nowrap" translate="no">to</code> props respectively. When set, the entire toast body becomes a link.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast()&quot;</span>&gt;</span>Toast with link<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">toast</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$bvToast.toast(<span class="hljs-string">`Toast with action link`</span>, {\n          <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;#foo&#x27;</span>,\n          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Example&#x27;</span>\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toast-link.vue --&gt;</span></pre></div><h2 id="b-toast-component" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> component<a class="anchorjs-link" href="#b-toast-component" aria-labelledby="b-toast-component"></a></span></h2> <p>When you have a custom component that would like to display just a single toast at a time, use the <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> component. The <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> component can be placed anywhere in your custom component or app, and does not render an element (they render a comment placeholder node which will not affect layout).</p> <p>The toast can be made visible via a <code class="text-nowrap" translate="no">v-model</code> (which is tied to the <code class="text-nowrap" translate="no">visible</code> prop), or shown using the component&#39;s <code class="text-nowrap" translate="no">show()</code> and <code class="text-nowrap" translate="no">hide()</code> instance methods, or via the <code class="text-nowrap" translate="no">this.$bvToast.show(id)</code> and <code class="text-nowrap" translate="no">this.$bvToast.hide(id)</code> methods (requires that a unique ID be set on the <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> component).</p> <p>Toasts, by default will be paced into the <code class="text-nowrap" translate="no">b-toaster-top-right</code> <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> component. The toaster specified by the <code class="text-nowrap" translate="no">toaster</code> prop will be created on demand if it doesn&#39;t already exist in document.</p> <p>You can force a <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> to appear in-place in the document by setting the <code class="text-nowrap" translate="no">static</code> prop to <code class="text-nowrap" translate="no">true</code>. you still need to show and hide the toast, but it will not be transported into a toaster component.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$bvToast.show(&#x27;my-toast&#x27;)&quot;</span>&gt;</span>Show toast<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-toast</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-toast&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;warning&quot;</span> <span class="hljs-attr">solid</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">toast-title</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-grow-1 align-items-baseline&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-img</span> <span class="hljs-attr">blank</span> <span class="hljs-attr">blank-color</span>=<span class="hljs-string">&quot;#ff5555&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-2&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-img</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-auto&quot;</span>&gt;</span>Notice!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted mr-2&quot;</span>&gt;</span>42 seconds ago<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      This is the content of the toast.\n      It is short and to the point.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-toast</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toast-component.vue --&gt;</span></pre></div><h3 id="slots" class="bv-no-focus-ring"><span class="bd-content-title">Slots<a class="anchorjs-link" href="#slots" aria-labelledby="slots"></a></span></h3> <ul> <li><code class="text-nowrap" translate="no">toast-title</code>: Content to replace the default title element.</li> <li><code class="text-nowrap" translate="no">default</code>: Content of the toast body</li> </ul> <p>Both slots are optionally scoped with the following scope:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Method or property</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">hide()</code></td> <td>Hides the toast when called. Useful if you are providing your own close button.</td> </tr> </tbody></table> </div><p>Slots are only available when using the <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> component.</p> <h2 id="b-toaster-target-component" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> target component<a class="anchorjs-link" href="#b-toaster-target-component" aria-labelledby="b-toaster-target-component"></a></span></h2> <p>The <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> component provides a container where toasts will appear (the <em>Toaster</em>). Toasters require a unique name, and toasts can be targeted to appear in a specific named toaster.</p> <p>In most cases you will not need to directly use this component, as <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> will automatically insert a <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> component (appended to <code class="text-nowrap" translate="no">&lt;body&gt;</code>) with the requested toaster name if one is not found in the document. But sometimes you may want to explicitly place a toaster in your app.</p> <p>The toaster <code class="text-nowrap" translate="no">name</code> becomes the ID of the inserted container, and will also be used a class name on the rendered toaster container.</p> <p>Toaster positioning and the positioning of toasts inside the toaster is driven completely by CSS classes (based on the name of the toaster)</p> <p>The following &quot;built-in&quot; toaster names (and associated styles) are defined in BootstrapVue&#39;s custom SCSS:</p> <ul> <li><code class="text-nowrap" translate="no">b-toaster-top-right</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-left</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-center</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-full</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-right</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-left</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-center</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-full</code></li> </ul> <p>The above toasters place the toasts in a stacked (columnar format), fixed within the viewport (meaning they will always be in view regardless of viewport scroll position). If there are more toasts than can fit on the viewport screen, some will be visually hidden offscreen until other toasts are closed/hidden.</p> <p><code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> uses the <code class="text-nowrap" translate="no">b-toaster-top-right</code> toaster by default.</p> <p><strong>Примечания:</strong></p> <ul> <li>If a <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> with the same name already exists in document (either auto-created by <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code>, <code class="text-nowrap" translate="no">this.$bvToast.toast()</code>, or manually placed), then <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> will just render an empty <code class="text-nowrap" translate="no">&lt;div&gt;</code> element and issue a console warning.</li> <li>If manually placing a <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> component, make sure it is placed as the last element in bottom of your app root element, so that it will be available to all pages in your app.</li> <li>Toasters that get destroyed will be auto re-created if a new toast targeted for the toaster name is shown.</li> <li>In the majority of use cases, you should not need to manually place/create a <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> component in your app, as they will be auto generated on demand if needed. But if you need to override any of the toaster default settings, ensure that you place the toaster in your app in a location that will not be destroyed due to changes in the route.</li> </ul> <h2 id="advanced-usage" class="bv-no-focus-ring"><span class="bd-content-title">Advanced usage<a class="anchorjs-link" href="#advanced-usage" aria-labelledby="advanced-usage"></a></span></h2> <p>When using the <code class="text-nowrap" translate="no">this.$bvToast.toast(...)</code> method for generating toasts, you may want the toast content to be more than just a string message. As mentioned in the <a href="#toasts-on-demand" class="font-weight-bold">Toasts on demand</a> section above, you can pass arrays of <code class="text-nowrap" translate="no">VNodes</code> as the message and title for more complex content.</p> <p>Remember to keep toast content simple and to the point. Avoid placing interactive components or elements inside toasts, as this can cause issues for users of assistive technologies. Refer to the <a href="#accessibility" class="font-weight-bold">Accessibility</a> section below.</p> <p>Below is an example of using Vue&#39;s <a href="https://vuejs.org/v2/guide/render-function.html#The-Virtual-DOM" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">this.$createElement()</code></a> method for generating more complex toast content:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showToast&quot;</span>&gt;</span>Show Toast with custom content<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">showToast</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Use a shorter name for this.$createElement</span>\n        <span class="hljs-keyword">const</span> h = <span class="hljs-built_in">this</span>.$createElement\n        <span class="hljs-comment">// Increment the toast count</span>\n        <span class="hljs-built_in">this</span>.count++\n        <span class="hljs-comment">// Create the message</span>\n        <span class="hljs-keyword">const</span> vNodesMsg = h(\n          <span class="hljs-string">&#x27;p&#x27;</span>,\n          { <span class="hljs-attr">class</span>: [<span class="hljs-string">&#x27;text-center&#x27;</span>, <span class="hljs-string">&#x27;mb-0&#x27;</span>] },\n          [\n            h(<span class="hljs-string">&#x27;b-spinner&#x27;</span>, { <span class="hljs-attr">props</span>: { <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;grow&#x27;</span>, <span class="hljs-attr">small</span>: <span class="hljs-literal">true</span> } }),\n            <span class="hljs-string">&#x27; Flashy &#x27;</span>,\n            h(<span class="hljs-string">&#x27;strong&#x27;</span>, <span class="hljs-string">&#x27;toast&#x27;</span>),\n            <span class="hljs-string">` message #<span class="hljs-subst">${<span class="hljs-built_in">this</span>.count}</span> `</span>,\n            h(<span class="hljs-string">&#x27;b-spinner&#x27;</span>, { <span class="hljs-attr">props</span>: { <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;grow&#x27;</span>, <span class="hljs-attr">small</span>: <span class="hljs-literal">true</span> } })\n          ]\n        )\n        <span class="hljs-comment">// Create the title</span>\n        <span class="hljs-keyword">const</span> vNodesTitle = h(\n          <span class="hljs-string">&#x27;div&#x27;</span>,\n          { <span class="hljs-attr">class</span>: [<span class="hljs-string">&#x27;d-flex&#x27;</span>, <span class="hljs-string">&#x27;flex-grow-1&#x27;</span>, <span class="hljs-string">&#x27;align-items-baseline&#x27;</span>, <span class="hljs-string">&#x27;mr-2&#x27;</span>] },\n          [\n            h(<span class="hljs-string">&#x27;strong&#x27;</span>, { <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;mr-2&#x27;</span> }, <span class="hljs-string">&#x27;The Title&#x27;</span>),\n            h(<span class="hljs-string">&#x27;small&#x27;</span>, { <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;ml-auto text-italics&#x27;</span> }, <span class="hljs-string">&#x27;5 minutes ago&#x27;</span>)\n          ]\n        )\n        <span class="hljs-comment">// Pass the VNodes as an array for message and title</span>\n        <span class="hljs-built_in">this</span>.$bvToast.toast([vNodesMsg], {\n          <span class="hljs-attr">title</span>: [vNodesTitle],\n          <span class="hljs-attr">solid</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;info&#x27;</span>\n        })\n      }\n    }\n }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toasts-advanced.vue --&gt;</span></pre></div><h2 id="alerts-versus-toasts" class="bv-no-focus-ring"><span class="bd-content-title">Alerts versus toasts<a class="anchorjs-link" href="#alerts-versus-toasts" aria-labelledby="alerts-versus-toasts"></a></span></h2> <p>In some cases you may need just a simple alert style message (i.e. cookie usage notifications, etc.). In these cases it is usually better to use an fixed position alert instead of a toast, by applying a few Bootstrap <a href="/docs/reference/utility-classes" class="font-weight-bold">utility classes</a> and a small bit of custom styling on a <a href="/docs/components/alert" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-alert&gt;</code></a> component:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showBottom = !showBottom&quot;</span>&gt;</span>\n      {{ showBottom ? &#x27;Hide&#x27; : &#x27;Show&#x27; }} Fixed bottom Alert\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-alert</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;showBottom&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;position-fixed fixed-bottom m-0 rounded-0&quot;</span>\n      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;z-index: 2000;&quot;</span>\n      <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;warning&quot;</span>\n      <span class="hljs-attr">dismissible</span>\n    &gt;</span>\n      Fixed position (bottom) alert!\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-alert</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showTop = !showTop&quot;</span>&gt;</span>\n      {{ showTop ? &#x27;Hide&#x27; : &#x27;Show&#x27; }} Fixed top Alert\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-alert</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;showTop&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;position-fixed fixed-top m-0 rounded-0&quot;</span>\n      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;z-index: 2000;&quot;</span>\n      <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;success&quot;</span>\n      <span class="hljs-attr">dismissible</span>\n    &gt;</span>\n      Fixed position (top) alert!\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-alert</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">showBottom</span>: <span class="hljs-literal">false</span>,\n      <span class="hljs-attr">showTop</span>: <span class="hljs-literal">false</span>\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- fixed-position-alerts.vue --&gt;</span></pre></div><p>We use class <code class="text-nowrap" translate="no">position-fixed</code> to set the positioning to fixed within the user&#39;s viewport, and either class <code class="text-nowrap" translate="no">fixed-bottom</code> or <code class="text-nowrap" translate="no">fixed-top</code> to position the alert on the bottom or top of the viewport. Class <code class="text-nowrap" translate="no">m-0</code> removes the default margins around the alert and <code class="text-nowrap" translate="no">rounded-0</code> removes the default rounded corners. We also set the <code class="text-nowrap" translate="no">z-index</code> to a large value to ensure the alert appears over any other content on the page (the default for <code class="text-nowrap" translate="no">fixed-top</code> and <code class="text-nowrap" translate="no">fixed-bottom</code> is <code class="text-nowrap" translate="no">1030</code>). You may need to adjust the <code class="text-nowrap" translate="no">z-index</code> for your specific layout.</p> <p>Since the alert markup remains in the DOM where you placed the <code class="text-nowrap" translate="no">&lt;b-alert&gt;</code> component, its tab sequence (for accessing the dismiss button) is easily accessible to screen reader and keyboard-only users.</p> <h2 id="доступность" class="bv-no-focus-ring"><span class="bd-content-title">Доступность<a class="anchorjs-link" href="#доступность" aria-labelledby="доступность"></a></span></h2> <p>Toasts are intended to be <strong>small interruptions</strong> to your visitors or users, so to help those with screen readers and similar assistive technologies, toasts are wrapped in an aria-live region. Changes to live regions (such as injecting/updating a toast component) are automatically announced by screen readers without needing to move the user&#39;s focus or otherwise interrupt the user. Additionally, <code class="text-nowrap" translate="no">aria-atomic=&quot;true&quot;</code> is automatically set to ensure that the entire toast is always announced as a single (atomic) unit, rather than announcing what was changed (which could lead to problems if you only update part of the toast&#39;s content, or if displaying the same toast content at a later point in time).</p> <p>If you just need a single simple message to appear along the bottom or top of the user&#39;s window, use a <a href="#alerts-versus-toasts" class="font-weight-bold">fixed position <code class="text-nowrap" translate="no">&lt;b-alert&gt;</code></a> instead.</p> <h3 id="доступность-tips" class="bv-no-focus-ring"><span class="bd-content-title">Доступность tips<a class="anchorjs-link" href="#доступность-tips" aria-labelledby="доступность-tips"></a></span></h3> <p>Typically, toast messages should display one or two-line non-critical messages that <strong>do not</strong> require user interaction. Without taking extra steps, toasts can have numerous accessibility issues that can impact both people with and without disabilities. The following list, while not complete, provides general guidelines when using toasts.</p> <ul> <li>If the information needed is important for the process, e.g. for a list of errors in a form, then use the <a href="/docs/components/alert" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-alert&gt;</code></a> component instead of <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code>.</li> <li><code class="text-nowrap" translate="no">&lt;b-toast&gt;</code>, by default, sets the attributes <code class="text-nowrap" translate="no">role</code> to <code class="text-nowrap" translate="no">&#39;alert&#39;</code> and <code class="text-nowrap" translate="no">aria-live</code> to <code class="text-nowrap" translate="no">&#39;assertive&#39;</code>. If it&#39;s an important message like an error, this default setting is appropriate, otherwise set the prop <code class="text-nowrap" translate="no">is-status</code> to <code class="text-nowrap" translate="no">true</code> which will change the attributes <code class="text-nowrap" translate="no">role</code> to <code class="text-nowrap" translate="no">&#39;status&#39;</code> and <code class="text-nowrap" translate="no">aria-live</code> to <code class="text-nowrap" translate="no">&#39;polite&#39;</code>.</li> <li>Avoid popping up a toast message on page load. Performing unexpected actions on page load is very confusing to screen reader users. If a toast is needed on page load or route change, delay showing the toast by several seconds so that the screen reader will finishing announcing information about the current page without interruption by a the toast.</li> <li>When setting prop <code class="text-nowrap" translate="no">no-auto-hide</code> to <code class="text-nowrap" translate="no">true</code>, you must have a close button to allow users to dismiss the toast. If you have also set prop <code class="text-nowrap" translate="no">no-close-button</code> to <code class="text-nowrap" translate="no">true</code>, you must provide your own close button or dismiss the toast by some other means. Toasts have a tab index of <code class="text-nowrap" translate="no">0</code> so that they can be reached by keyboard-only users.</li> <li>Avoid initiating many toasts in quick succession, as screen readers may interrupt reading the current toast and announce the new toast, causing the context of the previous toast to be missed.</li> <li>For toasts with long textual content, adjust the <code class="text-nowrap" translate="no">auto-hide-delay</code> to a larger timeout, to allow users time to read the content of the toast. The average person reads about 200 words per minute, so a good length of time to keep messages up is 5 seconds, plus 300 extra milliseconds per word. The shortest default that should be used as a best practice is 5 seconds (5000ms). In addition to a reasonable default timeout, you could also allow the user to choose how long they want toasts to stay up for. Most people inherently understand whether they are fast or slow readers. Having a profile setting that is part of the user login will allow slow readers to pick a longer time if the messages are going away too fast, and fast readers to pick a short time if the messages are staying up too long.</li> <li>To account for memory loss and distraction as well as disability-related issues such as ADHD, a best practice would be to implement a location where users can refer to a list of past toast messages which have been shown. Preferably this list should be sortable, with the default being chronological.</li> </ul> <h3 id="internet-explorer-screen-reader-support" class="bv-no-focus-ring"><span class="bd-content-title">Internet Explorer screen reader support<a class="anchorjs-link" href="#internet-explorer-screen-reader-support" aria-labelledby="internet-explorer-screen-reader-support"></a></span></h3> <p>Unfortunately, IE 11 when used with <a href="https://github.com/nvaccess/nvda" target="_blank" rel="noopener">NVDA</a> or <a href="https://www.freedomscientific.com/products/software/jaws/" target="_blank" rel="noopener">JAWS</a> screen readers, will not properly announce/voice toasts when they appear. If you have a large non-sighted user-base using IE 11, you may want to create an additional off-screen <code class="text-nowrap" translate="no">aria-live</code> region for IE 11 browsers only (created on page load) where copies of toast message text are placed dynamically, in addition to displaying toasts.</p>'}}}]);