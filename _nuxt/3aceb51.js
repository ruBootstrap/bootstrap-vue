(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{574:function(n,t){n.exports={baseTOC:{top:"#теги-формы",title:"Теги формы",toc:[{href:"#базовое-использование",label:"Базовое использование"},{href:"#создание-тегов-с-использованием-разделителей",label:"Создание тегов с использованием разделителей"},{href:"#удаление-последнего-тега-нажатием-клавиши-backspace",label:"Удаление последнего тега нажатием клавиши Backspace"},{href:"#стилизация-опций",label:"Стилизация опций"},{href:"#использование-с-нативной-отправкой-браузера-form",label:"Использование с нативной отправкой браузера &lt;form&gt;"},{href:"#валидация-тега",label:"Валидация тега",toc:[{href:"#обнаружение-новых-недействительных-и-повторяющихся-тегов",label:"Обнаружение новых, недействительных и повторяющихся тегов"}]},{href:"#ограничение-тегов",label:"Ограничение тегов"},{href:"#пользовательский-рендеринг-со-слотом-по-умолчанию",label:"Пользовательский рендеринг со слотом по умолчанию",toc:[{href:"#свойства-области",label:"Свойства области"},{href:"#использование-собственных-входов-браузера",label:"Использование собственных входов браузера"},{href:"#использование-компонентов-пользовательской-формы",label:"Использование компонентов пользовательской формы"},{href:"#расширенное-использование-пользовательского-рендеринга",label:"Расширенное использование пользовательского рендеринга"},{href:"#создание-компонентов-оболочки",label:"Создание компонентов оболочки"}]},{href:"#вспомогательный-компонент-b-form-tag",label:"Вспомогательный компонент &lt;b-form-tag&gt;"}]},titleLead:'<h1 id="теги-формы" class="bv-no-focus-ring"><span class="bd-content-title">Теги формы</span></h1> <p class="bd-lead">Легкий пользовательский элемент управления формой ввода с тегами, с параметрами для настраиваемого рендеринга интерфейса, обнаружения повторяющихся тегов и дополнительной проверки тегов.</p>',body:'<p>Теги - это массивы коротких строк, которые используются различными способами, например, для присвоения категорий. Используйте пользовательский интерфейс по умолчанию или создайте свой собственный пользовательский интерфейс с помощью слота с заданной областью действия по умолчанию.</p> <h2 id="базовое-использование" class="bv-no-focus-ring"><span class="bd-content-title">Базовое использование<a class="anchorjs-link" href="#базовое-использование" aria-labelledby="базовое-использование"></a></span></h2> <p>В тегах будут удалены все начальные и конечные пробелы, а дублирование тегов не допускается. Теги, содержащие пробелы, разрешены по умолчанию.</p> <p>Теги добавляются путем нажатия кнопки <strong>Добавить</strong>, нажатия клавиши <kbd class="notranslate" translate="no">Enter</kbd> или, необязательно, когда событие <code class="text-nowrap" translate="no">change</code> запускается на входе нового тега (т.е. когда фокус перемещается с ввода). Кнопка <strong>Добавить</strong> появится только тогда, когда пользователь ввел новое значение тега.</p> <p><strong>Рендеринг по умолчанию:</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-basic&quot;</span>&gt;</span>Введите новый тег и нажмите ввод<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-basic&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Значение: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-example.vue --&gt;</span></pre></div><p>Вы можете отключить добавление нового тега при нажатии <kbd class="notranslate" translate="no">Enter</kbd> через свойство <code class="text-nowrap" translate="no">no-add-on-enter</code> и включить добавление тега в событие ввода <code class="text-nowrap" translate="no">change</code> через <code class="text-nowrap" translate="no">add-on-change</code>.</p> <h2 id="создание-тегов-с-использованием-разделителей" class="bv-no-focus-ring"><span class="bd-content-title">Создание тегов с использованием разделителей<a class="anchorjs-link" href="#создание-тегов-с-использованием-разделителей" aria-labelledby="создание-тегов-с-использованием-разделителей"></a></span></h2> <p>Для автоматического создания тегов при вводе символа-разделителя (например, <kbd class="notranslate" translate="no">Space</kbd>, <kbd class="notranslate" translate="no">,</kbd>, и т. д.) Установите свойство <code class="text-nowrap" translate="no">separator</code> на символ, который будет запускать тег добавлен. Если необходимо несколько символов-разделителей, включите их как одну строку (например, <code class="text-nowrap" translate="no">&#39; ,;&#39;</code>) или массив символов (например, <code class="text-nowrap" translate="no">[&#39; &#39;, &#39;,&#39;, &#39;;&#39;]</code>), что вызовет новый тег, который будет добавлен при вводе <kbd class="notranslate" translate="no">Space</kbd>, <kbd class="notranslate" translate="no">,</kbd> <em>или</em> <kbd class="notranslate" translate="no">;</kbd>. Разделители должны состоять из одного символа.</p> <p>В следующем примере тег автоматически создается при вводе <kbd class="notranslate" translate="no">Space</kbd>, <kbd class="notranslate" translate="no">,</kbd> или <kbd class="notranslate" translate="no">;</kbd>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-separators&quot;</span>&gt;</span>Введите теги через пробел, запятую или точку с запятой<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-separators&quot;</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot; ,;&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Введите новые теги через пробел, запятую или точку с запятой&quot;</span>\n      <span class="hljs-attr">no-add-on-enter</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Значение: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-separator.vue --&gt;</span></pre></div><h2 id="удаление-последнего-тега-нажатием-клавиши-backspace" class="bv-no-focus-ring"><span class="bd-content-title">Удаление последнего тега нажатием клавиши Backspace<a class="anchorjs-link" href="#удаление-последнего-тега-нажатием-клавиши-backspace" aria-labelledby="удаление-последнего-тега-нажатием-клавиши-backspace"></a></span></h2> <p>Когда свойство <code class="text-nowrap" translate="no">remove-on-delete</code> установлено, и пользователь нажимает <kbd class="notranslate" translate="no">Backspace</kbd> (или <kbd class="notranslate" translate="no">Del</kbd>) <em>и</em> входное значение пусто, последний тег в списке тегов будет удален.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-remove-on-delete&quot;</span>&gt;</span>Введите новые теги через пробел<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-remove-on-delete&quot;</span>\n      <span class="hljs-attr">:input-attrs</span>=<span class="hljs-string">&quot;{ &#x27;aria-describedby&#x27;: &#x27;tags-remove-on-delete-help&#x27; }&quot;</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot; &quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Введите новые теги через пробел&quot;</span>\n      <span class="hljs-attr">remove-on-delete</span>\n      <span class="hljs-attr">no-add-on-enter</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-text</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tags-remove-on-delete-help&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n      Нажмите <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>Backspace<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span>, чтобы удалить последний введенный тег\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-text</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Значение: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;grape&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-remove-on-delete.vue --&gt;</span></pre></div><h2 id="стилизация-опций" class="bv-no-focus-ring"><span class="bd-content-title">Стилизация опций<a class="anchorjs-link" href="#стилизация-опций" aria-labelledby="стилизация-опций"></a></span></h2> <p>Для изменения основного стиля интерфейса с тегами по умолчанию доступны несколько свойств:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Свойство</th> <th>Описание</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">tag-pills</code></td> <td>Отображает метки в виде таблеток</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tag-variant</code></td> <td>Применяет один из цветов темы контекстного варианта Bootstrap к тегам</td> </tr> <tr> <td><code class="text-nowrap" translate="no">size</code></td> <td>Установите размер внешнего вида компонента. &#39;sm&#39;, &#39;md&#39; (по умолчанию) или &#39;lg&#39;</td> </tr> <tr> <td><code class="text-nowrap" translate="no">placeholder</code></td> <td>Текст-заполнитель для нового элемента ввода тега</td> </tr> <tr> <td><code class="text-nowrap" translate="no">state</code></td> <td>Устанавливает контекстное состояние элемента управления. Установите значение <code class="text-nowrap" translate="no">true</code> (для действительного), <code class="text-nowrap" translate="no">false</code> (для недопустимого) или <code class="text-nowrap" translate="no">null</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">disabled</code></td> <td>Переводит компонент в отключенное состояние</td> </tr> </tbody></table> </div><p>Дополнительные сведения см. В разделе справки по компонентам внизу этой страницы.</p> <p>Стиль фокуса и состояния проверки компонента основан на настраиваемом CSS BootstrapVue.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-pills&quot;</span>&gt;</span>Введите теги<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-pills&quot;</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n      <span class="hljs-attr">tag-variant</span>=<span class="hljs-string">&quot;primary&quot;</span>\n      <span class="hljs-attr">tag-pills</span>\n      <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot; &quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Введите новые теги через пробел&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Значение: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;grape&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-style-options.vue --&gt;</span></pre></div><h2 id="использование-с-нативной-отправкой-браузера-form" class="bv-no-focus-ring"><span class="bd-content-title">Использование с нативной отправкой браузера <code class="text-nowrap" translate="no">&lt;form&gt;</code><a class="anchorjs-link" href="#использование-с-нативной-отправкой-браузера-form" aria-labelledby="использование-с-нативной-отправкой-браузера-form"></a></span></h2> <p>Значение помеченного ввода не будет отправлено через стандартную форму <code class="text-nowrap" translate="no">action</code>, если вы не укажете имя через свойство <code class="text-nowrap" translate="no">name</code>. Если указано имя, <code class="text-nowrap" translate="no">&lt;b-form-tags&gt;</code> создает скрытый <code class="text-nowrap" translate="no">&lt;input&gt;</code> для каждого тега. Скрытый ввод будет иметь атрибут <code class="text-nowrap" translate="no">name</code>, установленный на значение свойства <code class="text-nowrap" translate="no">name</code>.</p> <p>Скрытые входные данные также будут сгенерированы при использовании <a href="#custom-rendering-with-default-scoped-slot" class="font-weight-bold">пользовательского рендеринга</a> (когда задано свойство <code class="text-nowrap" translate="no">name</code>).</p> <h2 id="валидация-тега" class="bv-no-focus-ring"><span class="bd-content-title">Валидация тега<a class="anchorjs-link" href="#валидация-тега" aria-labelledby="валидация-тега"></a></span></h2> <p>По умолчанию, <code class="text-nowrap" translate="no">&lt;b-form-tags&gt;</code> определяет, когда пользователь пытается ввести (с учетом регистра) повторяющийся тег, и предоставляет пользователю интегрированную обратную связь.</p> <p>При желании вы можете предоставить метод проверки тегов через свойство <code class="text-nowrap" translate="no">tag-validator</code>. Функция валидатора получит один аргумент, который является добавляемым тегом, и должна возвращать либо <code class="text-nowrap" translate="no">true</code>, если тег проходит проверку и может быть добавлен, либо <code class="text-nowrap" translate="no">false</code>, если тег не прошел проверку (в этом случае он не добавляется в массив тегов). Интегрированная обратная связь будет предоставлена пользователю с указанием недействительных тегов, которые не удалось добавить.</p> <p>Проверка тега происходит только для тегов, добавленных с помощью пользовательского ввода. Изменения тегов через <code class="text-nowrap" translate="no">v-model</code> не проверяются.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Пример проверки тегов&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;tags-validation&quot;</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n        <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-validation&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;tags&quot;</span>\n        <span class="hljs-attr">:input-attrs</span>=<span class="hljs-string">&quot;{ &#x27;aria-describedby&#x27;: &#x27;tags-validation-help&#x27; }&quot;</span>\n        <span class="hljs-attr">:tag-validator</span>=<span class="hljs-string">&quot;tagValidator&quot;</span>\n        <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>\n        <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot; &quot;</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">invalid-feedback</span>&gt;</span>\n        Вы должны предоставить не менее 3 тегов и не более 8\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">description</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tags-validation-help&quot;</span>&gt;</span>\n         Теги должны содержать от 3 до 5 символов в нижнем регистре. Введите теги через пробел или нажмите клавишу ВВОД.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">tags</span>: [],\n        <span class="hljs-attr">dirty</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Общее состояние проверки компонентов</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dirty ? (<span class="hljs-built_in">this</span>.tags.length &gt; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-built_in">this</span>.tags.length &lt; <span class="hljs-number">9</span>) : <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-attr">watch</span>: {\n      <span class="hljs-function"><span class="hljs-title">tags</span>(<span class="hljs-params">newValue, oldValue</span>)</span> {\n        <span class="hljs-comment">// Установить грязный флаг при первом изменении массива тегов</span>\n        <span class="hljs-built_in">this</span>.dirty = <span class="hljs-literal">true</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">tagValidator</span>(<span class="hljs-params">tag</span>)</span> {\n        <span class="hljs-comment">// Функция проверки индивидуальных тегов</span>\n        <span class="hljs-keyword">return</span> tag === tag.toLowerCase() &amp;&amp; tag.length &gt; <span class="hljs-number">2</span> &amp;&amp; tag.length &lt; <span class="hljs-number">6</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-validation-feedback.vue --&gt;</span></pre></div><h3 id="обнаружение-новых-недействительных-и-повторяющихся-тегов" class="bv-no-focus-ring"><span class="bd-content-title">Обнаружение новых, недействительных и повторяющихся тегов<a class="anchorjs-link" href="#обнаружение-новых-недействительных-и-повторяющихся-тегов" aria-labelledby="обнаружение-новых-недействительных-и-повторяющихся-тегов"></a></span></h3> <p>Событие <code class="text-nowrap" translate="no">tag-state</code> будет генерироваться всякий раз, когда новые теги вводятся в новый элемент ввода тега, теги, не прошедшие проверку, или обнаруживаются повторяющиеся теги. Обработчик событий получит в качестве аргументов три массива:</p> <ul> <li><code class="text-nowrap" translate="no">validTags</code> (теги, которые проходят проверку)</li> <li><code class="text-nowrap" translate="no">invalidTags</code> (теги, не прошедшие валидацию)</li> <li><code class="text-nowrap" translate="no">duplicateTags</code> (теги, которые будут дублировать существующие или допустимые теги).</li> </ul> <p>Событие будет сгенерировано только при изменении ввода нового тега (вводятся символы, которые будут считаться частью тега), или когда пользователь попытается добавить тег (например, с помощью <kbd class="notranslate" translate="no">Enter</kbd>, кликнув по кнопке <strong>Add</strong> или ввести разделитель). Три массива будут пустыми, когда пользователь очистит новый элемент ввода тега (или будет содержать только пробелы).</p> <p>Если вы предоставляете свой собственный отзыв о повторяющихся и недействительных тегах (с помощью события <code class="text-nowrap" translate="no">tag-state</code>) за пределами компонента <code class="text-nowrap" translate="no">&lt;b-form-tags&gt;</code>, вы можете отключить встроенные повторяющиеся и недопустимые сообщения с помощью установка <code class="text-nowrap" translate="no">duplicate-tag-text</code> и <code class="text-nowrap" translate="no">invalid-tag-text</code> (соответственно) либо на пустую строку (<code class="text-nowrap" translate="no">&#39;&#39;</code>) или <code class="text-nowrap" translate="no">null</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-state-event&quot;</span>&gt;</span>Введите теги<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-state-event&quot;</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;tags&quot;</span>\n      <span class="hljs-attr">:tag-validator</span>=<span class="hljs-string">&quot;validator&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter tags (3-5 characters) separated by space&quot;</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot; &quot;</span>\n      @<span class="hljs-attr">tag-state</span>=<span class="hljs-string">&quot;onTagState&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Теги: {{ tags }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Значения событий:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>validTags: {{ validTags }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>invalidTags: {{ invalidTags }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>duplicateTags: {{ duplicateTags }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">tags</span>: [],\n        <span class="hljs-attr">validTags</span>: [],\n        <span class="hljs-attr">invalidTags</span>: [],\n        <span class="hljs-attr">duplicateTags</span>: []\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onTagState</span>(<span class="hljs-params">valid, invalid, duplicate</span>)</span> {\n        <span class="hljs-built_in">this</span>.validTags = valid\n        <span class="hljs-built_in">this</span>.invalidTags = invalid\n        <span class="hljs-built_in">this</span>.duplicateTags = duplicate\n      },\n      <span class="hljs-function"><span class="hljs-title">validator</span>(<span class="hljs-params">tag</span>)</span> {\n        <span class="hljs-keyword">return</span> tag.length &gt; <span class="hljs-number">2</span> &amp;&amp; tag.length &lt; <span class="hljs-number">6</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-tags-state-event.vue --&gt;</span></pre></div><h2 id="ограничение-тегов" class="bv-no-focus-ring"><span class="bd-content-title">Ограничение тегов<a class="anchorjs-link" href="#ограничение-тегов" aria-labelledby="ограничение-тегов"></a></span></h2> <p>Если вы хотите ограничить количество тегов, которые пользователь может добавить, используйте опцию <code class="text-nowrap" translate="no">limit</code>. Когда настроено, добавление большего количества тегов, чем позволяет <code class="text-nowrap" translate="no">limit</code>, возможно только с помощью <code class="text-nowrap" translate="no">v-model</code>.</p> <p>Когда лимит тегов достигнут, пользователь по-прежнему может печатать, но добавление дополнительных тегов отключено. Отображается сообщение с обратной связью пользователя о достигнутом пределе. Это сообщение можно настроить с помощью свойства <code class="text-nowrap" translate="no">limit-tags-text</code>. Установка либо пустой строки (<code class="text-nowrap" translate="no">&#39;&#39;</code>) или <code class="text-nowrap" translate="no">null</code> отключит обратную связь.</p> <p>Свойство <code class="text-nowrap" translate="no">limit</code> не влияет на удаление тегов.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-limit&quot;</span>&gt;</span>Введите теги<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-limit&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">:limit</span>=<span class="hljs-string">&quot;limit&quot;</span> <span class="hljs-attr">remove-on-delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Значение: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [],\n        <span class="hljs-attr">limit</span>: <span class="hljs-number">5</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-limit.vue --&gt;</span></pre></div><h2 id="пользовательский-рендеринг-со-слотом-по-умолчанию" class="bv-no-focus-ring"><span class="bd-content-title">Пользовательский рендеринг со слотом по умолчанию<a class="anchorjs-link" href="#пользовательский-рендеринг-со-слотом-по-умолчанию" aria-labelledby="пользовательский-рендеринг-со-слотом-по-умолчанию"></a></span></h2> <p>Если вам нравится другой внешний вид элемента управления тегами, вы можете предоставить свой собственный рендеринг через слот с заданной по умолчанию областью. Вы можете создать свои собственные теги или использовать наш вспомогательный компонент <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code>.</p> <h3 id="свойства-области" class="bv-no-focus-ring"><span class="bd-content-title">Свойства области<a class="anchorjs-link" href="#свойства-области" aria-labelledby="свойства-области"></a></span></h3> <p>Слот с заданной областью действия по умолчанию предоставляет множество свойств и методов для использования при рендеринге вашего пользовательского интерфейса. Не все свойства или методы требуются для создания вашего интерфейса.</p> <p>Свойства области действия слота по умолчанию следующие:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Свойство</th> <th>Тип</th> <th>Описание</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">addButtonText</code></td> <td>String</td> <td>Значение свойства <code class="text-nowrap" translate="no">add-button-text</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">addButtonVariant</code></td> <td>String</td> <td>Значение свойства <code class="text-nowrap" translate="no">add-button-variant</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">addTag</code></td> <td>Function</td> <td>Метод добавления нового тега. Предполагает, что тег является значением ввода, но дополнительно принимает один аргумент, который является значением тега, которое нужно добавить</td> </tr> <tr> <td><code class="text-nowrap" translate="no">disableAddButton</code></td> <td>Boolean</td> <td>Будет <code class="text-nowrap" translate="no">true</code>, если тег(и) во входных данных не может быть добавлен (все недействительные и/или дублированные)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">disabled</code></td> <td>Boolean</td> <td><code class="text-nowrap" translate="no">true</code>, если компонент находится в отключенном состоянии. Значение свойства <code class="text-nowrap" translate="no">disabled</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">duplicateTagText</code></td> <td>String</td> <td>Значение свойства <code class="text-nowrap" translate="no">duplicate-tag-text</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">duplicateTags</code></td> <td>Array</td> <td>Массив повторяющихся тегов, введенных пользователем</td> </tr> <tr> <td><code class="text-nowrap" translate="no">form</code></td> <td>String</td> <td><span class="badge badge-secondary">v2.20.0+</span> Значение свойства <code class="text-nowrap" translate="no">form</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">inputAttrs</code></td> <td>Object</td> <td>Объект атрибутов, применяемых к новому элементу ввода тега через <code class="text-nowrap" translate="no">v-bind=&quot;inputAttrs&quot;</code>. Смотрите ниже для деталей</td> </tr> <tr> <td><code class="text-nowrap" translate="no">inputHandlers</code></td> <td>Object</td> <td>Объект обработчиков событий для применения к новому элементу ввода тега через<code class="text-nowrap" translate="no">v-on=&quot;inputHandlers&quot;</code>. Смотрите ниже для деталей</td> </tr> <tr> <td><code class="text-nowrap" translate="no">inputId</code></td> <td>String</td> <td>ID для добавления к новому элементу ввода тега. По умолчанию используется параметр <code class="text-nowrap" translate="no">input-id</code>. Если не указан, автоматически создается уникальный идентификатор. Также доступно через &#39;inputAttrs.id&#39;</td> </tr> <tr> <td><code class="text-nowrap" translate="no">inputType</code></td> <td>String</td> <td><span class="badge badge-secondary">v2.3.0+</span> Тип ввода для рендеринга (нормализованная версия свойства <code class="text-nowrap" translate="no">input-type</code>)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">invalidTagText</code></td> <td>String</td> <td>Значение свойства <code class="text-nowrap" translate="no">invalid-tag-text</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">invalidTags</code></td> <td>Array</td> <td>Массив недействительных тегов, введенных пользователем</td> </tr> <tr> <td><code class="text-nowrap" translate="no">isDuplicate</code></td> <td>Boolean</td> <td><code class="text-nowrap" translate="no">true</code>, если пользовательский ввод содержит повторяющиеся теги</td> </tr> <tr> <td><code class="text-nowrap" translate="no">isInvalid</code></td> <td>Boolean</td> <td><code class="text-nowrap" translate="no">true</code>, если пользовательский ввод содержит недопустимые теги</td> </tr> <tr> <td><code class="text-nowrap" translate="no">isLimitReached</code></td> <td>Boolean</td> <td><span class="badge badge-secondary">v2.17.0+</span> <code class="text-nowrap" translate="no">true</code>, если <code class="text-nowrap" translate="no">limit</code> настроен и количество тегов достигло лимита</td> </tr> <tr> <td><code class="text-nowrap" translate="no">limitTagsText</code></td> <td>String</td> <td><span class="badge badge-secondary">v2.17.0+</span> Значение свойства <code class="text-nowrap" translate="no">limit-tags-text</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">limit</code></td> <td>String</td> <td><span class="badge badge-secondary">v2.17.0+</span> Значение свойства <code class="text-nowrap" translate="no">limit</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">noTagRemove</code></td> <td>Boolean</td> <td><span class="badge badge-secondary">v2.21.0+</span> Значение свойства <code class="text-nowrap" translate="no">no-tag-remove</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">placeholder</code></td> <td>String</td> <td>Значение свойства <code class="text-nowrap" translate="no">placeholder</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">removeTag</code></td> <td>Function</td> <td>Способ удаления тега. Принимает один аргумент, который является значением тега для удаления</td> </tr> <tr> <td><code class="text-nowrap" translate="no">required</code></td> <td>Boolean</td> <td><span class="badge badge-secondary">v2.20.0+</span> Значение свойства <code class="text-nowrap" translate="no">required</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">separator</code></td> <td>String</td> <td>Значение свойства <code class="text-nowrap" translate="no">separator</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">size</code></td> <td>String</td> <td>Значение свойства <code class="text-nowrap" translate="no">size</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">state</code></td> <td>Boolean</td> <td>Контекстное состояние компонента. Значение свойства <code class="text-nowrap" translate="no">state</code>. Возможные значения: <code class="text-nowrap" translate="no">true</code>, <code class="text-nowrap" translate="no">false</code> или <code class="text-nowrap" translate="no">null</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">tagClass</code></td> <td>String, Array, or Object</td> <td>Значение свойства <code class="text-nowrap" translate="no">tag-variant</code>. Класс (или классы) для применения к тегу</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tagPills</code></td> <td>Boolean</td> <td>Значение свойства <code class="text-nowrap" translate="no">tag-pills</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">tagRemoveLabel</code></td> <td>String</td> <td>Значение свойства <code class="text-nowrap" translate="no">tag-remove-label</code>. Используется как атрибут <code class="text-nowrap" translate="no">aria-label</code> на кнопке удаления тегов</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tagVariant</code></td> <td>String</td> <td>Значение свойства <code class="text-nowrap" translate="no">tag-variant</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">tags</code></td> <td>Array</td> <td>Массив текущих строк тегов</td> </tr> </tbody></table> </div><h4 id="свойства-объекта-inputattrs" class="bv-no-focus-ring"><span class="bd-content-title">Свойства объекта <code class="text-nowrap" translate="no">inputAttrs</code><a class="anchorjs-link" href="#свойства-объекта-inputattrs" aria-labelledby="свойства-объекта-inputattrs"></a></span></h4> <p>Объект <code class="text-nowrap" translate="no">inputAttrs</code> содержит атрибуты для привязки (<code class="text-nowrap" translate="no">v-bind</code>) к новому элементу ввода тега.</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Свойство</th> <th>Тип</th> <th>Описание</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">disabled</code></td> <td>Boolean</td> <td>Атрибут <code class="text-nowrap" translate="no">disabled</code> для ввода нового тега. Значение свойства <code class="text-nowrap" translate="no">disabled</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">form</code></td> <td>String</td> <td>Атрибут <code class="text-nowrap" translate="no">form</code> для ввода нового тега. Значение свойства <code class="text-nowrap" translate="no">form</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">id</code></td> <td>String</td> <td>Атрибут <code class="text-nowrap" translate="no">id</code> для ввода нового тега</td> </tr> <tr> <td><code class="text-nowrap" translate="no">value</code></td> <td>String</td> <td>Атрибут <code class="text-nowrap" translate="no">value</code> для ввода нового тега</td> </tr> </tbody></table> </div><p>Объект <code class="text-nowrap" translate="no">inputAttrs</code> также будет включать любые атрибуты, установленные через свойство <code class="text-nowrap" translate="no">input-attrs</code>. Обратите внимание, что указанные выше атрибуты имеют приоритет над любыми из тех же атрибутов, указанных в свойстве <code class="text-nowrap" translate="no">input-attrs</code> prop.</p> <h4 id="свойства-объекта-inputhandlers" class="bv-no-focus-ring"><span class="bd-content-title">Свойства объекта <code class="text-nowrap" translate="no">inputHandlers</code><a class="anchorjs-link" href="#свойства-объекта-inputhandlers" aria-labelledby="свойства-объекта-inputhandlers"></a></span></h4> <p>Объект <code class="text-nowrap" translate="no">inputHandlers</code> содержит обработчики событий для привязки (<code class="text-nowrap" translate="no">v-on</code>) к новому элементу ввода тега.</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Свойство</th> <th>Тип</th> <th>Описание</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">change</code></td> <td>Function</td> <td>Обработчик события элемента ввода <code class="text-nowrap" translate="no">change</code>. Принимает один аргумент объекта события или строки. Изменение вызовет добавление тега.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">input</code></td> <td>Function</td> <td>Обработчик события элемента ввода <code class="text-nowrap" translate="no">input</code>. Принимает один аргумент объекта события или строки. Обновляет внутреннюю v-model для нового элемента ввода тега</td> </tr> <tr> <td><code class="text-nowrap" translate="no">keydown</code></td> <td>Function</td> <td>Обработчик события элемента ввода <code class="text-nowrap" translate="no">keydown</code> <kbd class="notranslate" translate="no">Enter</kbd> и <kbd class="notranslate" translate="no">Del</kbd>. Принимает единственный аргумент, который является собственным объектом события keydown</td> </tr> </tbody></table> </div><p>При необходимости обработчик <code class="text-nowrap" translate="no">change</code> должен быть включен через свойство <code class="text-nowrap" translate="no">add-on-change</code>, в противном случае это метод noop.</p> <h3 id="использование-собственных-входов-браузера" class="bv-no-focus-ring"><span class="bd-content-title">Использование собственных входов браузера<a class="anchorjs-link" href="#использование-собственных-входов-браузера" aria-labelledby="использование-собственных-входов-браузера"></a></span></h3> <p>Область содержит атрибуты и обработчики событий, которые могут быть напрямую привязаны к собственным элементам <code class="text-nowrap" translate="no">&lt;input&gt;</code> или <code class="text-nowrap" translate="no">&lt;select&gt;</code>.</p> <p>В следующем примере представлены предлагаемые атрибуты и роли ARIA, необходимые для поддержки программы чтения с экрана.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">no-outer-focus</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ tags, inputAttrs, inputHandlers, addTag, removeTag }&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">aria-controls</span>=<span class="hljs-string">&quot;my-custom-tags-list&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n            <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;inputAttrs&quot;</span>\n            <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;inputHandlers&quot;</span>\n            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Новый тег - нажмите клавишу ВВОД, чтобы добавить&quot;</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addTag()&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Добавить<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>\n          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-custom-tags-list&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-unstyled d-inline-flex flex-wrap mb-0&quot;</span>\n          <span class="hljs-attr">aria-live</span>=<span class="hljs-string">&quot;polite&quot;</span>\n          <span class="hljs-attr">aria-atomic</span>=<span class="hljs-string">&quot;false&quot;</span>\n          <span class="hljs-attr">aria-relevant</span>=<span class="hljs-string">&quot;additions removals&quot;</span>\n        &gt;</span>\n          <span class="hljs-comment">&lt;!-- Всегда используйте значение тега в качестве ключа:, а не индекса! --&gt;</span>\n          <span class="hljs-comment">&lt;!-- В противном случае программы чтения с экрана не будут правильно читать добавления и удаления тегов --&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>\n            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span>\n            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag&quot;</span>\n            <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;`my-custom-tags-tag_${tag.replace(/\\s/g, &#x27;_&#x27;)}_`&quot;</span>\n            <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;li&quot;</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-1 mr-1&quot;</span>\n            <span class="hljs-attr">body-class</span>=<span class="hljs-string">&quot;py-1 pr-2 text-nowrap&quot;</span>\n          &gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n              @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeTag(tag)&quot;</span>\n              <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;link&quot;</span>\n              <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n              <span class="hljs-attr">:aria-controls</span>=<span class="hljs-string">&quot;`my-custom-tags-tag_${tag.replace(/\\s/g, &#x27;_&#x27;)}_`&quot;</span>\n            &gt;</span>remove<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;peach&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-custom-native.vue --&gt;</span></pre></div><h3 id="использование-компонентов-пользовательской-формы" class="bv-no-focus-ring"><span class="bd-content-title">Использование компонентов пользовательской формы<a class="anchorjs-link" href="#использование-компонентов-пользовательской-формы" aria-labelledby="использование-компонентов-пользовательской-формы"></a></span></h3> <p>Область содержит атрибуты и обработчики событий, которые могут быть напрямую привязаны к _ большинству_ настраиваемых входных данных или выбранным компонентам (обработчики событий принимают либо значение строкового тега <em>, либо</em> собственный объект события). Любой компонент, который испускает <code class="text-nowrap" translate="no">input</code> при вводе символов и (необязательно) испускает <code class="text-nowrap" translate="no">change</code> при изменении входного значения (например, при размытии или выборе) и использует свойство <code class="text-nowrap" translate="no">value</code> в качестве v-model, должен работать без изменений.</p> <p>В этом примере мы используем вспомогательный компонент <a href="#b-form-tag-helper-component" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> helper component</a>, но не стесняйтесь отображать теги, используя стандартный HTML или компоненты.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">no-outer-focus</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ tags, inputAttrs, inputHandlers, tagVariant, addTag, removeTag }&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;inputAttrs&quot;</span>\n            <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;inputHandlers&quot;</span>\n            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Новый тег - нажмите клавишу ВВОД, чтобы добавить&quot;</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addTag()&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Добавить<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline-block&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 1.5rem;&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tag</span>\n            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span>\n            @<span class="hljs-attr">remove</span>=<span class="hljs-string">&quot;removeTag(tag)&quot;</span>\n            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag&quot;</span>\n            <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;tag&quot;</span>\n            <span class="hljs-attr">:variant</span>=<span class="hljs-string">&quot;tagVariant&quot;</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-1&quot;</span>\n          &gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tag</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-custom-components-input.vue --&gt;</span></pre></div><p>Ниже приведен пример использования настраиваемого компонента выбора для выбора из предопределенного набора тегов:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Tagged input using select&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;tags-component-select&quot;</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Prop `add-on-change` is needed to enable adding tags vie the `change` event --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tags-component-select&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n        <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span>\n        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>\n        <span class="hljs-attr">add-on-change</span>\n        <span class="hljs-attr">no-outer-focus</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ tags, inputAttrs, inputHandlers, disabled, removeTag }&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;tags.length &gt; 0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline d-inline-block mb-2&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tag</span>\n                @<span class="hljs-attr">remove</span>=<span class="hljs-string">&quot;removeTag(tag)&quot;</span>\n                <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;tag&quot;</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n                <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;info&quot;</span>\n              &gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tag</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n            <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;inputAttrs&quot;</span>\n            <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;inputHandlers&quot;</span>\n            <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled || availableOptions.length === 0&quot;</span>\n            <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;availableOptions&quot;</span>\n          &gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">first</span>&gt;</span>\n              <span class="hljs-comment">&lt;!-- This is required to prevent bugs with Safari --&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Выберите тег...<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>, <span class="hljs-string">&#x27;Banana&#x27;</span>, <span class="hljs-string">&#x27;Lime&#x27;</span>, <span class="hljs-string">&#x27;Peach&#x27;</span>, <span class="hljs-string">&#x27;Chocolate&#x27;</span>, <span class="hljs-string">&#x27;Strawberry&#x27;</span>],\n        <span class="hljs-attr">value</span>: []\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">availableOptions</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.options.filter(<span class="hljs-function"><span class="hljs-params">opt</span> =&gt;</span> <span class="hljs-built_in">this</span>.value.indexOf(opt) === -<span class="hljs-number">1</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-components-select.vue --&gt;</span></pre></div><p>Если пользовательский ввод использует пользовательские имена событий, имитирующие <code class="text-nowrap" translate="no">input</code> и <code class="text-nowrap" translate="no">change</code>, и/или требует модификатора <code class="text-nowrap" translate="no">.native</code> для нажатия клавиши, вы можете сделать что-то похожее на приведенное ниже, чтобы связать обработчики событий:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;{ inputAttrs, inputHandlers, removeTag, tags }&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span>\n    <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;inputAttrs.id&quot;</span>\n    <span class="hljs-attr">:vistom-value-prop</span>=<span class="hljs-string">&quot;inputAttrs.value&quot;</span>\n    @<span class="hljs-attr">custom-input-event</span>=<span class="hljs-string">&quot;inputHandlers.input($event)&quot;</span>\n    @<span class="hljs-attr">custom-change-event</span>=<span class="hljs-string">&quot;inputHandlers.change($event)&quot;</span>\n    @<span class="hljs-attr">keydown.native</span>=<span class="hljs-string">&quot;inputHandlers.keydown($event)&quot;</span>\n  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Ваш список пользовательских тегов здесь --&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></pre></div><p>Обработчик <code class="text-nowrap" translate="no">inputHandlers.input</code> <strong>должен</strong> быть привязан к событию, которое обновляется с каждым введенным пользователем символом, чтобы проверка тега <em>пока-вы-набираете</em> работала.</p> <h3 id="расширенное-использование-пользовательского-рендеринга" class="bv-no-focus-ring"><span class="bd-content-title">Расширенное использование пользовательского рендеринга<a class="anchorjs-link" href="#расширенное-использование-пользовательского-рендеринга" aria-labelledby="расширенное-использование-пользовательского-рендеринга"></a></span></h3> <p>В ситуациях, когда <code class="text-nowrap" translate="no">inputHandlers</code> не будет работать с вашим пользовательским вводом, или если вам нужно больше контроля над созданием тегов, вы можете воспользоваться дополнительными свойствами, предоставляемыми через область действия слота по умолчанию.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">switch</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span>Отключено<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n      @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;resetInputValue()&quot;</span>\n      <span class="hljs-attr">tag-variant</span>=<span class="hljs-string">&quot;success&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2 mt-2&quot;</span>\n      <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n      <span class="hljs-attr">no-outer-focus</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter a new tag value and click Add&quot;</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{tags, inputId, placeholder, disabled, addTag, removeTag }&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span>&gt;</span>\n          <span class="hljs-comment">&lt;!-- Всегда привязывайте идентификатор к вводу, чтобы его можно было сфокусировать при необходимости --&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;newTag&quot;</span>\n            <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;inputId&quot;</span>\n            <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;placeholder&quot;</span>\n            <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n            <span class="hljs-attr">:formatter</span>=<span class="hljs-string">&quot;formatter&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addTag(newTag)&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Добавить<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-invalid-feedback</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;</span>\n          Duplicate tag value cannot be added again!\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-invalid-feedback</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;tags.length &gt; 0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;`Tag: ${tag}`&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex align-items-center&quot;</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-2&quot;</span>&gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n                <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n                <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-danger&quot;</span>\n                @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeTag(tag)&quot;</span>\n              &gt;</span>\n                Удалить тег\n              <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-text</span> <span class="hljs-attr">v-else</span>&gt;</span>\n          Теги не указаны. Добавьте новый тег выше.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-text</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">newTag</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">value</span>: []\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Return false (invalid) if new tag is a duplicate</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value.indexOf(<span class="hljs-built_in">this</span>.newTag.trim()) &gt; -<span class="hljs-number">1</span> ? <span class="hljs-literal">false</span> : <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">resetInputValue</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.newTag = <span class="hljs-string">&#x27;&#x27;</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">formatter</span>(<span class="hljs-params">value</span>)</span> {\n        <span class="hljs-keyword">return</span> value.toUpperCase()\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-custom-components-advanced.vue --&gt;</span></pre></div><p>Ниже приведен пример использования компонента <code class="text-nowrap" translate="no">&lt;b-dropdown&gt;</code> для выбора или поиска из заранее определенного набора тегов:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Ввод тегов с использованием раскрывающегося списка&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;tags-with-dropdown&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tags-with-dropdown&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">no-outer-focus</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ tags, disabled, addTag, removeTag }&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;tags.length &gt; 0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline d-inline-block mb-2&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tag</span>\n                @<span class="hljs-attr">remove</span>=<span class="hljs-string">&quot;removeTag(tag)&quot;</span>\n                <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;tag&quot;</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n                <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;info&quot;</span>\n              &gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tag</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-secondary&quot;</span> <span class="hljs-attr">block</span> <span class="hljs-attr">menu-class</span>=<span class="hljs-string">&quot;w-100&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">button-content</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;tag-fill&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-icon</span>&gt;</span> Выбрать теги\n            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-form</span> @<span class="hljs-attr">submit.stop.prevent</span>=<span class="hljs-string">&quot;() =&gt; {}&quot;</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Search tags&quot;</span>\n                <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;tag-search-input&quot;</span>\n                <span class="hljs-attr">label-cols-md</span>=<span class="hljs-string">&quot;auto&quot;</span>\n                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n                <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n                <span class="hljs-attr">:description</span>=<span class="hljs-string">&quot;searchDesc&quot;</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n              &gt;</span>\n                <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n                  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;search&quot;</span>\n                  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tag-search-input&quot;</span>\n                  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span>\n                  <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n                  <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span>\n                 &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n              <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-form</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-divider</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-divider</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-item-button</span>\n              <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;option in availableOptions&quot;</span>\n              <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;option&quot;</span>\n              @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onOptionClick({ option, addTag })&quot;</span>\n            &gt;</span>\n              {{ option }}\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-item-button</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-text</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;availableOptions.length === 0&quot;</span>&gt;</span>\n              Нет тегов, доступных для выбора\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-text</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>, <span class="hljs-string">&#x27;Banana&#x27;</span>, <span class="hljs-string">&#x27;Lime&#x27;</span>, <span class="hljs-string">&#x27;Peach&#x27;</span>, <span class="hljs-string">&#x27;Chocolate&#x27;</span>, <span class="hljs-string">&#x27;Strawberry&#x27;</span>],\n        <span class="hljs-attr">search</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">value</span>: []\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">criteria</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Compute the search criteria</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.search.trim().toLowerCase()\n      },\n      <span class="hljs-function"><span class="hljs-title">availableOptions</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">const</span> criteria = <span class="hljs-built_in">this</span>.criteria\n        <span class="hljs-comment">// Filter out already selected options</span>\n        <span class="hljs-keyword">const</span> options = <span class="hljs-built_in">this</span>.options.filter(<span class="hljs-function"><span class="hljs-params">opt</span> =&gt;</span> <span class="hljs-built_in">this</span>.value.indexOf(opt) === -<span class="hljs-number">1</span>)\n        <span class="hljs-keyword">if</span> (criteria) {\n          <span class="hljs-comment">// Show only options that match criteria</span>\n          <span class="hljs-keyword">return</span> options.filter(<span class="hljs-function"><span class="hljs-params">opt</span> =&gt;</span> opt.toLowerCase().indexOf(criteria) &gt; -<span class="hljs-number">1</span>);\n        }\n        <span class="hljs-comment">// Show all options available</span>\n        <span class="hljs-keyword">return</span> options\n      },\n      <span class="hljs-function"><span class="hljs-title">searchDesc</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.criteria &amp;&amp; <span class="hljs-built_in">this</span>.availableOptions.length === <span class="hljs-number">0</span>) {\n          <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Нет тегов, соответствующих вашим критериям поиска&#x27;</span>\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onOptionClick</span>(<span class="hljs-params">{ option, addTag }</span>)</span> {\n        addTag(option)\n        <span class="hljs-built_in">this</span>.search = <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-dropdown-example.vue --&gt;</span></pre></div><h3 id="создание-компонентов-оболочки" class="bv-no-focus-ring"><span class="bd-content-title">Создание компонентов оболочки<a class="anchorjs-link" href="#создание-компонентов-оболочки" aria-labelledby="создание-компонентов-оболочки"></a></span></h3> <p>Вы можете легко создать настраиваемый компонент-оболочку с вашим предпочтительным стилем рендеринга следующим образом:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;value&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;$emit(&#x27;input&#x27;, $event)&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ tags, addTag, removeTag, inputAttrs, inputHandlers }&quot;</span>&gt;</span>\n     <span class="hljs-comment">&lt;!-- Place your custom rendering here --&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">import</span> { BFormTags } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;bootstrap-vue&#x27;</span>\n\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;MyCustomTags&#x27;</span>,\n    <span class="hljs-attr">components</span>: { BFormTags },\n    <span class="hljs-attr">model</span>: {\n      <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;value&#x27;</span>,\n      <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;input&#x27;</span>\n    },\n    <span class="hljs-attr">props</span>: {\n      <span class="hljs-attr">value</span>: {\n        <span class="hljs-attr">type</span>: <span class="hljs-built_in">Array</span>,\n        <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> []\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><h2 id="вспомогательный-компонент-b-form-tag" class="bv-no-focus-ring"><span class="bd-content-title">Вспомогательный компонент <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code><a class="anchorjs-link" href="#вспомогательный-компонент-b-form-tag" aria-labelledby="вспомогательный-компонент-b-form-tag"></a></span></h2> <p>BootstrapVue предоставляет вспомогательный компонент <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code>, для использования со слотом с заданной областью действия по умолчанию <code class="text-nowrap" translate="no">&lt;b-form-tags&gt;</code>. Компонент основан на <a href="/docs/components/badge" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-badge&gt;</code></a> и <a href="/docs/components/button/#comp-ref-b-button-close" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-button-close&gt;</code></a>.</p> <p><code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> поддерживает те же варианты, что и <code class="text-nowrap" translate="no">&lt;b-badge&gt;</code>, а также поддерживает стили <code class="text-nowrap" translate="no">pill</code>. Размер зависит от размера шрифта содержащего элемента.</p> <p>Событие <code class="text-nowrap" translate="no">remove</code> генерируется при нажатии кнопки удаления <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code>.</p> <p>Теги, которые слишком велики для родительского контейнера, автоматически усекают текстовое содержимое с многоточием. По этой причине всегда рекомендуется указывать заголовок через свойство <code class="text-nowrap" translate="no">title</code> при использовании слота по умолчанию <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> для содержимого тега.</p> <p>Обратите внимание, что для <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> требуется собственный CSS/SCSS BootstrapVue для правильного оформления.</p>'}}}]);