(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{565:function(t,n){t.exports={baseTOC:{top:"#tooltip",title:"Tooltip",toc:[{href:"#overview",label:"Overview"},{href:"#target",label:"Target"},{href:"#positioning",label:"Positioning"},{href:"#triggers",label:"Triggers",toc:[{href:"#caveats-with-focus-trigger-on-button-elements",label:"Caveats with focus trigger on &lt;button&gt; elements"},{href:"#making-tooltips-work-for-keyboard-and-assistive-technology-users",label:"Making tooltips work for keyboard and assistive technology users"},{href:"#disabled-elements",label:"Disabled elements"}]},{href:"#b-tooltip-component-usage",label:"&lt;b-tooltip&gt; component usage",toc:[{href:"#component-options",label:"Component options"},{href:"#noninteractive-tooltips",label:"Noninteractive tooltips"},{href:"#variants-and-custom-class",label:"Variants and custom class"},{href:"#programmatically-show-and-hide-tooltip",label:"Programmatically show and hide tooltip"},{href:"#programmatically-disabling-tooltip",label:"Programmatically disabling tooltip"}]},{href:"#v-b-tooltip-directive-usage",label:"v-b-tooltip directive usage"},{href:"#global-root-instance-events",label:"&#39;Global&#39; $root instance events",toc:[{href:"#hiding-and-showing-tooltips-via-root-events",label:"Hiding and showing tooltips via $root events"},{href:"#disabling-and-enabling-tooltips-via-root-events",label:"Disabling and enabling tooltips via $root events"},{href:"#listening-to-tooltip-changes-via-root-events",label:"Listening to tooltip changes via $root events"}]},{href:"#accessibility",label:"Accessibility"}]},titleLead:'<h1 id="tooltip" class="bv-no-focus-ring"><span class="bd-content-title">Tooltip</span></h1> <p class="bd-lead">Easily add tooltips to elements or components via the <code class="text-nowrap" translate="no">&lt;b-tooltip&gt;</code> component or <a href="/docs/directives/tooltip" class="font-weight-bold"><code class="text-nowrap" translate="no">v-b-tooltip</code></a> directive (preferred method).</p>',body:'<div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center my-3&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-tooltip.hover</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Tooltip directive content&quot;</span>&gt;</span>\n    Hover Me\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltip-target-1&quot;</span>&gt;</span>\n    Hover Me\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltip-target-1&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;hover&quot;</span>&gt;</span>\n    I am tooltip <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>component<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> content!\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-tooltip.vue --&gt;</span></pre></div><h2 id="overview" class="bv-no-focus-ring"><span class="bd-content-title">Overview<a class="anchorjs-link" href="#overview" aria-labelledby="overview"></a></span></h2> <p>Things to know when using tooltip component:</p> <ul> <li>Tooltips rely on the 3rd party library <a href="https://popper.js.org/" target="_blank" rel="noopener">Popper.js</a> for positioning.</li> <li>Tooltips require BootstrapVue&#39;s custom SCSS/CSS in order to function correctly, and for variants.</li> <li>Triggering tooltips on hidden elements will not work.</li> <li>Specify <code class="text-nowrap" translate="no">container</code> as <code class="text-nowrap" translate="no">null</code> (default, appends to <code class="text-nowrap" translate="no">&lt;body&gt;</code>) to avoid rendering problems in more complex components (like input groups, button groups, etc.). You can use container to optionally specify a different element to append the rendered tooltip to.</li> <li>Tooltips for <code class="text-nowrap" translate="no">disabled</code> elements must be triggered on a wrapper element.</li> <li>When triggered from hyperlinks that span multiple lines, tooltips will be centered. Use white-space: nowrap; on your <code class="text-nowrap" translate="no">&lt;a&gt;</code>s, <code class="text-nowrap" translate="no">&lt;b-link&gt;</code>s and <code class="text-nowrap" translate="no">&lt;router-link&gt;</code>s to avoid this behavior.</li> </ul> <h2 id="target" class="bv-no-focus-ring"><span class="bd-content-title">Target<a class="anchorjs-link" href="#target" aria-labelledby="target"></a></span></h2> <p>The target is the <em>trigger</em> element (or component) that will trigger the tooltip. The target is specified via the <code class="text-nowrap" translate="no">target</code> prop, and can be any of the following:</p> <ul> <li>A string identifying the ID of the trigger element (or ID of the root element of a component)</li> <li>A reference (ref) to an <code class="text-nowrap" translate="no">HTMLElement</code> or an <code class="text-nowrap" translate="no">SVGElement</code> (e.g. <code class="text-nowrap" translate="no">this.$refs.refName</code>)</li> <li>A reference (ref) to a component that has either an <code class="text-nowrap" translate="no">HTMLElement</code> or <code class="text-nowrap" translate="no">SVGElement</code> as its root element (e.g. <code class="text-nowrap" translate="no">this.$refs.refName</code>)</li> <li>A function (callback) that returns a reference to an <code class="text-nowrap" translate="no">HTMLElement</code> or <code class="text-nowrap" translate="no">SVGElement</code></li> </ul> <p>For more information on references, see the official <a href="https://vuejs.org/v2/api/#vm-refs" target="_blank" rel="noopener">Vue documentation</a>.</p> <p><strong>Note:</strong></p> <p>The target element <strong>must</strong> exist in the document before <code class="text-nowrap" translate="no">&lt;b-tooltip&gt;</code> is mounted. If the target element is not found during mount, the tooltip will never open. Always place your <code class="text-nowrap" translate="no">&lt;b-tooltip&gt;</code> component lower in the DOM than your target element. This rule also applies if a callback function is used as target element, since that callback is called only once on mount.</p> <p><code class="text-nowrap" translate="no">HTMLElement</code> refers to standard HTML elements such as <code class="text-nowrap" translate="no">&lt;div&gt;</code>, <code class="text-nowrap" translate="no">&lt;button&gt;</code>, etc, while <code class="text-nowrap" translate="no">SVGElement</code> refers to <code class="text-nowrap" translate="no">&lt;svg&gt;</code> or supported child elements of SVGs.</p> <h2 id="positioning" class="bv-no-focus-ring"><span class="bd-content-title">Positioning<a class="anchorjs-link" href="#positioning" aria-labelledby="positioning"></a></span></h2> <p>Twelve options are available for positioning: <code class="text-nowrap" translate="no">top</code>, <code class="text-nowrap" translate="no">topleft</code>, <code class="text-nowrap" translate="no">topright</code>, <code class="text-nowrap" translate="no">right</code>, <code class="text-nowrap" translate="no">righttop</code>, <code class="text-nowrap" translate="no">rightbottom</code>, <code class="text-nowrap" translate="no">bottom</code>, <code class="text-nowrap" translate="no">bottomleft</code>, <code class="text-nowrap" translate="no">bottomright</code>, <code class="text-nowrap" translate="no">left</code>, <code class="text-nowrap" translate="no">lefttop</code>, and <code class="text-nowrap" translate="no">leftbottom</code> aligned. The default position is <code class="text-nowrap" translate="no">top</code>. Positioning is relative to the trigger element.</p> <div class="bd-example bd-example-tooltip-static"> <div class="tooltip b-tooltip bs-tooltip-top bs-tooltip-top-docs" role="tooltip"> <div class="arrow" style="left:calc(50% - 6px)"></div> <div class="tooltip-inner">Tooltip on the top</div> </div> <div class="tooltip b-tooltip bs-tooltip-top bs-tooltip-top-docs" role="tooltip"> <div class="arrow" style="right:0"></div> <div class="tooltip-inner">Tooltip on the topleft</div> </div> <div class="tooltip b-tooltip bs-tooltip-top bs-tooltip-top-docs" role="tooltip"> <div class="arrow" style="left:0"></div> <div class="tooltip-inner">Tooltip on the topright</div> </div> <div class="tooltip b-tooltip bs-tooltip-right bs-tooltip-right-docs" role="tooltip"> <div class="arrow" style="top:5px"></div> <div class="tooltip-inner">Tooltip on the right</div> </div> <div class="tooltip b-tooltip bs-tooltip-right bs-tooltip-right-docs" role="tooltip"> <div class="arrow" style="bottom:0"></div> <div class="tooltip-inner">Tooltip on the righttop</div> </div> <div class="tooltip b-tooltip bs-tooltip-right bs-tooltip-right-docs" role="tooltip"> <div class="arrow" style="top:0"></div> <div class="tooltip-inner">Tooltip on the rightbottom</div> </div> <div class="tooltip b-tooltip bs-tooltip-bottom bs-tooltip-bottom-docs" role="tooltip"> <div class="arrow" style="left:calc(50% - 6px)"></div> <div class="tooltip-inner">Tooltip on the bottom</div> </div> <div class="tooltip b-tooltip bs-tooltip-bottom bs-tooltip-bottom-docs" role="tooltip"> <div class="arrow" style="right:0"></div> <div class="tooltip-inner">Tooltip on the bottomleft</div> </div> <div class="tooltip b-tooltip bs-tooltip-bottom bs-tooltip-bottom-docs" role="tooltip"> <div class="arrow" style="left:0"></div> <div class="tooltip-inner">Tooltip on the bottomright</div> </div> <div class="tooltip b-tooltip bs-tooltip-left bs-tooltip-left-docs" role="tooltip"> <div class="arrow" style="top:5px"></div> <div class="tooltip-inner">Tooltip on the left</div> </div> <div class="tooltip b-tooltip bs-tooltip-left bs-tooltip-left-docs" role="tooltip"> <div class="arrow" style="bottom:0"></div> <div class="tooltip-inner">Tooltip on the lefttop</div> </div> <div class="tooltip b-tooltip bs-tooltip-left bs-tooltip-left-docs" role="tooltip"> <div class="arrow" style="top:0"></div> <div class="tooltip-inner">Tooltip on the leftbottom</div> </div> </div> <p>Refer to the <a href="/docs/directives/tooltip/#positioning" class="font-weight-bold">Tooltip directive</a> documentation for live examples of positioning.</p> <h2 id="triggers" class="bv-no-focus-ring"><span class="bd-content-title">Triggers<a class="anchorjs-link" href="#triggers" aria-labelledby="triggers"></a></span></h2> <p>Tooltips can be triggered (opened/closed) via any combination of <code class="text-nowrap" translate="no">click</code>, <code class="text-nowrap" translate="no">hover</code> and <code class="text-nowrap" translate="no">focus</code>. The default trigger is <code class="text-nowrap" translate="no">hover focus</code>. Or a trigger of <code class="text-nowrap" translate="no">manual</code> can be specified, where the popover can only be opened or closed <a href="#programmatically-disabling-tooltip" class="font-weight-bold">programmatically</a>.</p> <p>If a tooltip has more than one trigger, then all triggers must be cleared before the tooltip will close. I.e. if a tooltip has the trigger <code class="text-nowrap" translate="no">focus click</code>, and it was opened by <code class="text-nowrap" translate="no">focus</code>, and the user then clicks the trigger element, they must click it again <strong>and</strong> move focus to close the tooltip.</p> <h3 id="caveats-with-focus-trigger-on-button-elements" class="bv-no-focus-ring"><span class="bd-content-title">Caveats with <code class="text-nowrap" translate="no">focus</code> trigger on <code class="text-nowrap" translate="no">&lt;button&gt;</code> elements<a class="anchorjs-link" href="#caveats-with-focus-trigger-on-button-elements" aria-labelledby="caveats-with-focus-trigger-on-button-elements"></a></span></h3> <p>For proper cross-browser and cross-platform behavior when using only the <code class="text-nowrap" translate="no">focus</code> trigger, you must use an element that renders the <code class="text-nowrap" translate="no">&lt;a&gt;</code> tag, not the <code class="text-nowrap" translate="no">&lt;button&gt;</code> tag, and you also must include a <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code> attribute.</p> <p>The following will generate an <code class="text-nowrap" translate="no">&lt;a&gt;</code> that looks like a button:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>\n  <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>\n  <span class="hljs-attr">v-b-tooltip.focus</span>\n  <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Tooltip title&quot;</span>\n&gt;</span>\n  Link button with tooltip directive\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link-button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>\n  Link button with tooltip component\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;link-button&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Tooltip title&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;focus&quot;</span>&gt;</span>\n  Tooltip title\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span></pre></div><h3 id="making-tooltips-work-for-keyboard-and-assistive-technology-users" class="bv-no-focus-ring"><span class="bd-content-title">Making tooltips work for keyboard and assistive technology users<a class="anchorjs-link" href="#making-tooltips-work-for-keyboard-and-assistive-technology-users" aria-labelledby="making-tooltips-work-for-keyboard-and-assistive-technology-users"></a></span></h3> <p>You should only add tooltips to HTML elements that are traditionally keyboard-focusable and interactive (such as links, buttons, or form controls). Although arbitrary HTML elements (such as <code class="text-nowrap" translate="no">&lt;span&gt;</code>s) can be made focusable by adding the <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code> attribute, this will add potentially annoying and confusing tab stops on non-interactive elements for keyboard users. In addition, most assistive technologies currently do not announce the tooltip in this situation.</p> <p>Additionally, do not rely solely on <code class="text-nowrap" translate="no">hover</code> as the trigger for your tooltip, as this will make your tooltips <em>impossible to trigger for keyboard-only users</em>.</p> <h3 id="disabled-elements" class="bv-no-focus-ring"><span class="bd-content-title">Disabled elements<a class="anchorjs-link" href="#disabled-elements" aria-labelledby="disabled-elements"></a></span></h3> <p>Elements with the <code class="text-nowrap" translate="no">disabled</code> attribute aren’t interactive, meaning users cannot focus, hover, or click them to trigger a tooltip (or popover). As a workaround, you’ll want to trigger the tooltip from a wrapper <code class="text-nowrap" translate="no">&lt;div&gt;</code> or <code class="text-nowrap" translate="no">&lt;span&gt;</code>, ideally made keyboard-focusable using <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code>, and override the <code class="text-nowrap" translate="no">pointer-events</code> on the disabled element.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;disabled-wrapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline-block&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;pointer-events: none;&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>Disabled button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;disabled-wrapper&quot;</span>&gt;</span>Disabled tooltip<span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- disabled-trigger-element.vue --&gt;</span></pre></div><h2 id="b-tooltip-component-usage" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">&lt;b-tooltip&gt;</code> component usage<a class="anchorjs-link" href="#b-tooltip-component-usage" aria-labelledby="b-tooltip-component-usage"></a></span></h2> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;button-1&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span>&gt;</span>Live chat<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;button-2&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span>&gt;</span>Html chat<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;button-3&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span>&gt;</span>Alternative chat<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Tooltip title specified via prop title --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;button-1&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Online!&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- HTML title specified via default slot --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;button-2&quot;</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>\n    Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Tooltip for an element identified by ref --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">:target</span>=<span class="hljs-string">&quot;() =&gt; $refs[&#x27;button-3&#x27;]&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Alternative!&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-tooltip-component.vue --&gt;</span></pre></div><h3 id="component-options" class="bv-no-focus-ring"><span class="bd-content-title">Component options<a class="anchorjs-link" href="#component-options" aria-labelledby="component-options"></a></span></h3> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Prop</th> <th>Default</th> <th>Description</th> <th>Supported values</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">target</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Element String ID, or a reference to an element or component, or a function returning either of them, that you want to trigger the tooltip <strong>Required</strong></td> <td>Any valid, in-document unique element ID, element reference or component reference or a function returning any such ID / reference</td> </tr> <tr> <td><code class="text-nowrap" translate="no">title</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Tooltip content (text only, no HTML). if HTML is required, place it in the default slot</td> <td>Plain text</td> </tr> <tr> <td><code class="text-nowrap" translate="no">placement</code></td> <td><code class="text-nowrap" translate="no">&#39;top&#39;</code></td> <td>Tooltip position, relative to the trigger element</td> <td><code class="text-nowrap" translate="no">top</code>, <code class="text-nowrap" translate="no">bottom</code>, <code class="text-nowrap" translate="no">left</code>, <code class="text-nowrap" translate="no">right</code>, <code class="text-nowrap" translate="no">auto</code>, <code class="text-nowrap" translate="no">topleft</code>, <code class="text-nowrap" translate="no">topright</code>, <code class="text-nowrap" translate="no">bottomleft</code>, <code class="text-nowrap" translate="no">bottomright</code>, <code class="text-nowrap" translate="no">lefttop</code>, <code class="text-nowrap" translate="no">leftbottom</code>, <code class="text-nowrap" translate="no">righttop</code>, <code class="text-nowrap" translate="no">rightbottom</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">fallback-placement</code></td> <td><code class="text-nowrap" translate="no">&#39;flip&#39;</code></td> <td>Auto-flip placement behaviour of the tooltip, relative to the trigger element</td> <td><code class="text-nowrap" translate="no">flip</code>, <code class="text-nowrap" translate="no">clockwise</code>, <code class="text-nowrap" translate="no">counterclockwise</code>, or an array of valid placements evaluated from left to right</td> </tr> <tr> <td><code class="text-nowrap" translate="no">triggers</code></td> <td><code class="text-nowrap" translate="no">&#39;hover focus&#39;</code></td> <td>Space separated list of event(s), which will trigger open/close of tooltip</td> <td><code class="text-nowrap" translate="no">hover</code>, <code class="text-nowrap" translate="no">focus</code>, <code class="text-nowrap" translate="no">click</code>. Note <code class="text-nowrap" translate="no">blur</code> is a special use case to close tooltip on next click, usually used in conjunction with <code class="text-nowrap" translate="no">click</code>.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">no-fade</code></td> <td><code class="text-nowrap" translate="no">false</code></td> <td>Disable fade animation when set to <code class="text-nowrap" translate="no">true</code></td> <td><code class="text-nowrap" translate="no">true</code> or <code class="text-nowrap" translate="no">false</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">delay</code></td> <td><code class="text-nowrap" translate="no">50</code></td> <td>Delay showing and hiding of tooltip by specified number of milliseconds. Can also be specified as an object in the form of <code class="text-nowrap" translate="no">{ show: 100, hide: 400 }</code> allowing different show and hide delays</td> <td><code class="text-nowrap" translate="no">0</code> and up, integers only.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">offset</code></td> <td><code class="text-nowrap" translate="no">0</code></td> <td>Shift the center of the tooltip by specified number of pixels</td> <td>Any negative or positive integer</td> </tr> <tr> <td><code class="text-nowrap" translate="no">container</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Element string ID to append rendered tooltip into. If <code class="text-nowrap" translate="no">null</code> or element not found, tooltip is appended to <code class="text-nowrap" translate="no">&lt;body&gt;</code> (default)</td> <td>Any valid in-document unique element ID.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">boundary</code></td> <td><code class="text-nowrap" translate="no">&#39;scrollParent&#39;</code></td> <td>The container that the tooltip will be constrained visually. The default should suffice in most cases, but you may need to change this if your target element is in a small container with overflow scroll</td> <td><code class="text-nowrap" translate="no">&#39;scrollParent&#39;</code> (default), <code class="text-nowrap" translate="no">&#39;viewport&#39;</code>, <code class="text-nowrap" translate="no">&#39;window&#39;</code>, or a reference to an HTML element.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">boundary-padding</code></td> <td><code class="text-nowrap" translate="no">5</code></td> <td>Amount of pixel used to define a minimum distance between the boundaries and the tooltip. This makes sure the tooltip always has a little padding between the edges of its container</td> <td>Any positive number</td> </tr> <tr> <td><code class="text-nowrap" translate="no">noninteractive</code></td> <td><code class="text-nowrap" translate="no">false</code></td> <td>Whether the tooltip should not be user-interactive</td> <td><code class="text-nowrap" translate="no">true</code> or <code class="text-nowrap" translate="no">false</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">variant</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Contextual color variant for the tooltip</td> <td>Any contextual theme color variant name</td> </tr> <tr> <td><code class="text-nowrap" translate="no">custom-class</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>A custom classname to apply to the tooltip outer wrapper element</td> <td>A string</td> </tr> <tr> <td><code class="text-nowrap" translate="no">id</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>An ID to use on the tooltip root element. If none is provided, one will automatically be generated. If you do provide an ID, it <em>must</em> be guaranteed to be unique on the rendered page</td> <td>A valid unique element ID string</td> </tr> </tbody></table> </div><h3 id="noninteractive-tooltips" class="bv-no-focus-ring"><span class="bd-content-title">Noninteractive tooltips<a class="anchorjs-link" href="#noninteractive-tooltips" aria-labelledby="noninteractive-tooltips"></a></span></h3> <p>BootstrapVue&#39;s tooltips are user-interactive by default for accessibility reasons. To restore Bootstraps default behavior apply the <code class="text-nowrap" translate="no">noninteractive</code> prop:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltip-button-interactive&quot;</span>&gt;</span>My tooltip is interactive<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltip-button-interactive&quot;</span>&gt;</span>I will stay open when hovered<span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltip-button-not-interactive&quot;</span>&gt;</span>Mine is not...<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltip-button-not-interactive&quot;</span> <span class="hljs-attr">noninteractive</span>&gt;</span>Catch me if you can!<span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-tooltip-interactive.vue --&gt;</span></pre></div><h3 id="variants-and-custom-class" class="bv-no-focus-ring"><span class="bd-content-title">Variants and custom class<a class="anchorjs-link" href="#variants-and-custom-class" aria-labelledby="variants-and-custom-class"></a></span></h3> <p>BootstrapVue&#39;s tooltips support contextual color variants via our custom CSS, via the <code class="text-nowrap" translate="no">variant</code> prop:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltip-button-variant&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltip-button-variant&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>Danger variant tooltip<span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-tooltip-variant.vue --&gt;</span></pre></div><p>Bootstrap default theme variants are: <code class="text-nowrap" translate="no">danger</code>, <code class="text-nowrap" translate="no">warning</code>, <code class="text-nowrap" translate="no">success</code>, <code class="text-nowrap" translate="no">primary</code>, <code class="text-nowrap" translate="no">secondary</code>, <code class="text-nowrap" translate="no">info</code>, <code class="text-nowrap" translate="no">light</code>, and <code class="text-nowrap" translate="no">dark</code>. You can change or add additional variants via Bootstrap <a href="/docs/reference/theming" class="font-weight-bold">SCSS variables</a></p> <p>A custom class can be applied to the tooltip outer wrapper <code class="text-nowrap" translate="no">&lt;div&gt;</code> by using the <code class="text-nowrap" translate="no">custom-class</code> prop:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-button&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;my-button&quot;</span> <span class="hljs-attr">custom-class</span>=<span class="hljs-string">&quot;my-tooltip-class&quot;</span>&gt;</span>Tooltip Title<span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><p><code class="text-nowrap" translate="no">variant</code> and <code class="text-nowrap" translate="no">custom-class</code> are reactive and can be changed while the tooltip is open.</p> <p>Refer to the <a href="/docs/directives/tooltip" class="font-weight-bold">tooltip directive</a> docs on applying variants and custom class to the directive version.</p> <h3 id="programmatically-show-and-hide-tooltip" class="bv-no-focus-ring"><span class="bd-content-title">Programmatically show and hide tooltip<a class="anchorjs-link" href="#programmatically-show-and-hide-tooltip" aria-labelledby="programmatically-show-and-hide-tooltip"></a></span></h3> <p>You can manually control the visibility of a tooltip via the syncable Boolean <code class="text-nowrap" translate="no">show</code> prop. Setting it to <code class="text-nowrap" translate="no">true</code> will show the tooltip, while setting it to <code class="text-nowrap" translate="no">false</code> will hide the tooltip.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltip-button-1&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>I have a tooltip<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span>Toggle Tooltip<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltip-button-1&quot;</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>\n      Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">data</span>: {\n      <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-tooltip-show-sync.vue --&gt;</span></pre></div><p>To make the tooltip shown on initial render, simply add the <code class="text-nowrap" translate="no">show</code> prop on <code class="text-nowrap" translate="no">&lt;b-tooltip&gt;</code>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltip-button-2&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">show</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltip-button-2&quot;</span>&gt;</span>I start open<span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-tooltip-show-open.vue --&gt;</span></pre></div><p>Programmatic control can also be affected by submitting <code class="text-nowrap" translate="no">&#39;open&#39;</code> and <code class="text-nowrap" translate="no">&#39;close&#39;</code> events to the tooltip by reference.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltip-button-show-event&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>I have a tooltip<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onOpen&quot;</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClose&quot;</span>&gt;</span>Close<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;tooltip&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltip-button-show-event&quot;</span>&gt;</span>\n      Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onOpen</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.tooltip.$emit(<span class="hljs-string">&#x27;open&#x27;</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">onClose</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.tooltip.$emit(<span class="hljs-string">&#x27;close&#x27;</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-tooltip-show-ref-event.vue --&gt;</span></pre></div><p>You can also use <code class="text-nowrap" translate="no">$root</code> events to trigger the showing and hiding of tooltip(s). See the <strong>Hiding and showing tooltips via $root events</strong> section below for details.</p> <h3 id="programmatically-disabling-tooltip" class="bv-no-focus-ring"><span class="bd-content-title">Programmatically disabling tooltip<a class="anchorjs-link" href="#programmatically-disabling-tooltip" aria-labelledby="programmatically-disabling-tooltip"></a></span></h3> <p>You can disable tooltip via the syncable Boolean prop <code class="text-nowrap" translate="no">disabled</code> (default is <code class="text-nowrap" translate="no">false</code>) Setting it to <code class="text-nowrap" translate="no">true</code> will disable the tooltip. If the tooltip is currently visible when disabled is set to <code class="text-nowrap" translate="no">false</code>, the tooltip will remain visible until it is enabled or programmatically closed. If the tooltip is disabled/enabled via $root events (see below), your <code class="text-nowrap" translate="no">disabled</code> value will be updated as long as you have provided the <code class="text-nowrap" translate="no">.sync</code> prop modifier.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltip-button-disable&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>I have a tooltip<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;disabled = !disabled&quot;</span>&gt;</span>\n        {{ disabled ? &#x27;Enable&#x27; : &#x27;Disable&#x27; }} Tooltip by prop\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;disableByRef&quot;</span>&gt;</span>\n        {{ disabled ? &#x27;Enable&#x27; : &#x27;Disable&#x27; }} Tooltip by $ref event\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">:disabled.sync</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;tooltip&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltip-button-disable&quot;</span>&gt;</span>\n        Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">disableByRef</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.disabled) {\n          <span class="hljs-built_in">this</span>.$refs.tooltip.$emit(<span class="hljs-string">&#x27;enable&#x27;</span>)\n        } <span class="hljs-keyword">else</span> {\n          <span class="hljs-built_in">this</span>.$refs.tooltip.$emit(<span class="hljs-string">&#x27;disable&#x27;</span>)\n        }\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-tooltip-disable.vue --&gt;</span></pre></div><p><strong>Note:</strong> <em>In the above example, since we are using the default tooltip triggers of <code class="text-nowrap" translate="no">focus hover</code>, the tooltip will close before it is disabled due to losing focus (and hover) to the toggle button.</em></p> <p>You can also emit <code class="text-nowrap" translate="no">$root</code> events to trigger disabling and enabling of tooltip(s). See the <strong>Disabling and enabling tooltips via $root events</strong> section below for details.</p> <p>You can also emit <code class="text-nowrap" translate="no">$root</code> events to trigger disabling and enabling of popover(s). See the <strong>Disabling and enabling tooltips via $root events</strong> section below for details.</p> <h2 id="v-b-tooltip-directive-usage" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">v-b-tooltip</code> directive usage<a class="anchorjs-link" href="#v-b-tooltip-directive-usage" aria-labelledby="v-b-tooltip-directive-usage"></a></span></h2> <p>The <code class="text-nowrap" translate="no">v-b-tooltip</code> directive makes adding tooltips even easier, without additional placeholder markup:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-tooltip</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Online!&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span>&gt;</span>Live chat<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n        <span class="hljs-attr">v-b-tooltip.html</span>\n        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Hello &lt;strong&gt;World!&lt;/strong&gt;&quot;</span>\n        <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span>\n      &gt;</span>\n        Html chat\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-tooltip-directive.vue --&gt;</span></pre></div><p>Refer to the <a href="/docs/directives/tooltip" class="font-weight-bold"><code class="text-nowrap" translate="no">v-b-tooltip</code> documentation</a> for more information and features of the directive format.</p> <h2 id="global-root-instance-events" class="bv-no-focus-ring"><span class="bd-content-title">&#39;Global&#39; $root instance events<a class="anchorjs-link" href="#global-root-instance-events" aria-labelledby="global-root-instance-events"></a></span></h2> <p>Using <code class="text-nowrap" translate="no">$root</code> instance it is possible to emit and listen events somewhere out of a component, where <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> is used. In short, <code class="text-nowrap" translate="no">$root</code> behaves like a global event emitters and listener. Details about <code class="text-nowrap" translate="no">$root</code> instance can be found in <a href="https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Root-Instance" target="_blank" rel="noopener">the official Vue docs</a>.</p> <h3 id="hiding-and-showing-tooltips-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Hiding and showing tooltips via $root events<a class="anchorjs-link" href="#hiding-and-showing-tooltips-via-root-events" aria-labelledby="hiding-and-showing-tooltips-via-root-events"></a></span></h3> <p>You can close (hide) <strong>all open tooltips</strong> by emitting the <code class="text-nowrap" translate="no">bv::hide::tooltip</code> event on $root:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::hide::tooltip&#x27;</span>)</pre></div><p>To close a <strong>specific tooltip</strong>, pass the trigger element&#39;s <code class="text-nowrap" translate="no">id</code>, or the <code class="text-nowrap" translate="no">id</code> of the tooltip (if one was provided via the <code class="text-nowrap" translate="no">id</code> prop), as the argument:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::hide::tooltip&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>To open a <strong>specific tooltip</strong>, pass the trigger element&#39;s <code class="text-nowrap" translate="no">id</code>, or the <code class="text-nowrap" translate="no">id</code> of the tooltip (if one was provided via the <code class="text-nowrap" translate="no">id</code> prop), as the argument when emitting the <code class="text-nowrap" translate="no">bv::show::tooltip</code> $root event:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::show::tooltip&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>To open all tooltips simultaneously, omit the <code class="text-nowrap" translate="no">id</code> argument when emitting the <code class="text-nowrap" translate="no">bv::show::tooltip</code> event.</p> <p>These events work for both the component <strong>and</strong> directive versions of tooltip.</p> <p><strong>Note:</strong> <em>the <strong>trigger element</strong> must exist in the DOM and be in a visible state in order for the tooltip to show.</em></p> <h3 id="disabling-and-enabling-tooltips-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Disabling and enabling tooltips via $root events<a class="anchorjs-link" href="#disabling-and-enabling-tooltips-via-root-events" aria-labelledby="disabling-and-enabling-tooltips-via-root-events"></a></span></h3> <p>You can disable <strong>all open tooltips</strong> by emitting the <code class="text-nowrap" translate="no">bv::disable::tooltip</code> event on $root:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::disable::tooltip&#x27;</span>)</pre></div><p>To disable a <strong>specific tooltip</strong>, pass the trigger element&#39;s <code class="text-nowrap" translate="no">id</code>, or the <code class="text-nowrap" translate="no">id</code> of the tooltip (if one was provided via the <code class="text-nowrap" translate="no">id</code> prop), as the argument:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::disable::tooltip&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>To enable a <strong>specific tooltip</strong>, pass the trigger element&#39;s <code class="text-nowrap" translate="no">id</code>, or the <code class="text-nowrap" translate="no">id</code> of the tooltip (if one was provided via the <code class="text-nowrap" translate="no">id</code> prop), as the argument when emitting the <code class="text-nowrap" translate="no">bv::enable::tooltip</code> $root event:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::enable::tooltip&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>To enable all tooltips simultaneously, omit the <code class="text-nowrap" translate="no">id</code> argument when emitting the <code class="text-nowrap" translate="no">bv::enable::tooltip</code> event.</p> <p>These events work for both the component <strong>and</strong> directive versions of tooltip.</p> <p><strong>Note:</strong> <em>The <strong>trigger element</strong> must exist in the DOM in order for the tooltip to be enabled or disabled.</em></p> <h3 id="listening-to-tooltip-changes-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Listening to tooltip changes via $root events<a class="anchorjs-link" href="#listening-to-tooltip-changes-via-root-events" aria-labelledby="listening-to-tooltip-changes-via-root-events"></a></span></h3> <p>To listen to any tooltip opening, use:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-built_in">this</span>.$root.$on(<span class="hljs-string">&#x27;bv::tooltip::show&#x27;</span>, <span class="hljs-function"><span class="hljs-params">bvEvent</span> =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;bvEvent:&#x27;</span>, bvEvent)\n    })\n  }\n}</pre></div><p>Refer to the <a href="/docs/components/tooltip#component-reference" class="font-weight-bold">Events</a> section of documentation for the full list of events.</p> <h2 id="accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-labelledby="accessibility"></a></span></h2> <p>The trigger element, when the tooltip is showing, will have the attribute <code class="text-nowrap" translate="no">aria-describedby</code> set with the auto generated ID of the tooltip.</p> <p><strong>Note:</strong> The animation effect of this component is dependent on the <code class="text-nowrap" translate="no">prefers-reduced-motion</code> media query. See the <a href="/docs/reference/accessibility" class="font-weight-bold">reduced motion section of our accessibility documentation</a> for additional details.</p>'}}}]);