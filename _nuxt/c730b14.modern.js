(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{473:function(n,l){n.exports={baseTOC:{top:"#overlay",title:"Overlay",toc:[{href:"#overview",label:"Overview"},{href:"#options",label:"Options",toc:[{href:"#overlay-backdrop-color",label:"Overlay backdrop color"},{href:"#fade-transition",label:"Fade transition"},{href:"#default-spinner-styling",label:"Default spinner styling"},{href:"#overlay-corner-rounding",label:"Overlay corner rounding"},{href:"#custom-overlay-content",label:"Custom overlay content"},{href:"#overlay-content-centering",label:"Overlay content centering"},{href:"#width",label:"Width"},{href:"#non-wrapping-mode",label:"Non-wrapping mode"},{href:"#overlay-z-index",label:"Overlay z-index"}]},{href:"#accessibility",label:"Accessibility"},{href:"#use-case-examples",label:"Use case examples",toc:[{href:"#loading-button",label:"Loading button"},{href:"#busy-state-input-group",label:"Busy state input group"},{href:"#form-confirmation-prompt-and-upload-status",label:"Form confirmation prompt and upload status"},{href:"#using-in-b-modal",label:"Using in &lt;b-modal&gt;"}]}]},titleLead:'<h1 id="overlay" class="bv-no-focus-ring"><span class="bd-content-title">Overlay</span></h1> <p class="bd-lead">BootstrapVue&#39;s custom <code class="text-nowrap" translate="no">b-overlay</code> component is used to <em>visually obscure</em> a particular element or component and its content. It signals to the user of a state change within the element or component and can be used for creating loaders, warnings/alerts, prompts, and more.</p>',body:'<h2 id="overview" class="bv-no-focus-ring"><span class="bd-content-title">Overview<a class="anchorjs-link" href="#overview" aria-labelledby="overview"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code> can be used to obscure almost anything. <a href="#use-case-examples" class="font-weight-bold">Example use cases</a> would be forms, tables, delete confirmation dialogs, or anywhere you need to signal that the application is busy performing a background task, to signal that a certain component is unavailable, or to provide additional context to the end user.</p> <p><code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code> can be used to overlay (wrap) an element or component (the default behaviour), or can be placed as a descendant of a <code class="text-nowrap" translate="no">position: relative</code> element (<a href="#non-wrapping-mode" class="font-weight-bold">non-wrapping mode</a>).</p> <p>The overlay visibility is controlled via the <code class="text-nowrap" translate="no">show</code> prop. By default the overlay is <em>not</em> shown.</p> <div class="alert alert-info"> <p class="mb-0"> Note that this component only <em>visually obscures</em> its content (or the page). Refer to the <a href="#accessibility" class="alert-link">Accessibility section</a> below for additional accessibility details and concerns. </p> </div> <p><strong>Default wrapping mode example:</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">rounded</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Card with overlay&quot;</span> <span class="hljs-attr">:aria-hidden</span>=<span class="hljs-string">&quot;show ? &#x27;true&#x27; : null&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>Laborum consequat non elit enim exercitation cillum.<span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>Click the button to toggle the overlay:<span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = true&quot;</span>&gt;</span>\n          Show overlay\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span>Toggle overlay<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay.vue --&gt;</span></pre></div><h2 id="options" class="bv-no-focus-ring"><span class="bd-content-title">Options<a class="anchorjs-link" href="#options" aria-labelledby="options"></a></span></h2> <p>There are many options available for styling the overlay, and for providing custom content within the overlay.</p> <h3 id="overlay-backdrop-color" class="bv-no-focus-ring"><span class="bd-content-title">Overlay backdrop color<a class="anchorjs-link" href="#overlay-backdrop-color" aria-labelledby="overlay-backdrop-color"></a></span></h3> <p>You can control the backdrop background color via the <code class="text-nowrap" translate="no">variant</code> prop. The variant is translated into one of Bootstrap&#39;s <a href="/docs/reference/color-variants#background-and-border-variants" class="font-weight-bold">background variant utility classes</a>. Control the opacity of the backdrop via the <code class="text-nowrap" translate="no">opacity</code> prop (opacity values can range from <code class="text-nowrap" translate="no">0</code> to <code class="text-nowrap" translate="no">1</code>). And background blurring can be controlled via the <code class="text-nowrap" translate="no">blur</code> prop.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">aria-controls</span>=<span class="hljs-string">&quot;overlay-background&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Variant&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;bg-variant&quot;</span> <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bg-variant&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;variant&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;variants&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Opacity&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;bg-opacity&quot;</span> <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n              <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bg-opacity&quot;</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;opacity&quot;</span>\n              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span>\n              <span class="hljs-attr">number</span>\n              <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span>\n              <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;1&quot;</span>\n              <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;0.01&quot;</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span> <span class="hljs-attr">is-text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-monospace&quot;</span>&gt;</span>\n              {{ opacity.toFixed(2) }}\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Blur&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;bg-blur&quot;</span> <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bg-blur&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;blur&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;blurs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span>\n          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;overlay-background&quot;</span>\n          <span class="hljs-attr">show</span>\n          <span class="hljs-attr">:variant</span>=<span class="hljs-string">&quot;variant&quot;</span>\n          <span class="hljs-attr">:opacity</span>=<span class="hljs-string">&quot;opacity&quot;</span>\n          <span class="hljs-attr">:blur</span>=<span class="hljs-string">&quot;blur&quot;</span>\n          <span class="hljs-attr">rounded</span>=<span class="hljs-string">&quot;sm&quot;</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Card with overlay&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n              incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n              exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;light&#x27;</span>,\n        <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.85</span>,\n        <span class="hljs-attr">blur</span>: <span class="hljs-string">&#x27;2px&#x27;</span>,\n        <span class="hljs-attr">variants</span>: [\n          <span class="hljs-string">&#x27;transparent&#x27;</span>,\n          <span class="hljs-string">&#x27;white&#x27;</span>,\n          <span class="hljs-string">&#x27;light&#x27;</span>,\n          <span class="hljs-string">&#x27;dark&#x27;</span>,\n          <span class="hljs-string">&#x27;primary&#x27;</span>,\n          <span class="hljs-string">&#x27;secondary&#x27;</span>,\n          <span class="hljs-string">&#x27;success&#x27;</span>,\n          <span class="hljs-string">&#x27;danger&#x27;</span>,\n          <span class="hljs-string">&#x27;warning&#x27;</span>,\n          <span class="hljs-string">&#x27;info&#x27;</span>,\n        ],\n        <span class="hljs-attr">blurs</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span> },\n          <span class="hljs-string">&#x27;1px&#x27;</span>,\n          <span class="hljs-string">&#x27;2px&#x27;</span>,\n          <span class="hljs-string">&#x27;5px&#x27;</span>,\n          <span class="hljs-string">&#x27;0.5em&#x27;</span>,\n          <span class="hljs-string">&#x27;1rem&#x27;</span>\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay-background.vue --&gt;</span></pre></div><p>As an alternative to the <code class="text-nowrap" translate="no">variant</code> prop, you can specify a CSS color string value via the <code class="text-nowrap" translate="no">bg-color</code> prop. When a value is provided for <code class="text-nowrap" translate="no">bg-color</code>, the <code class="text-nowrap" translate="no">variant</code> prop value is ignored.</p> <p><strong>Notes:</strong></p> <ul> <li>Background blurring is not available on some browsers (e.g. IE 11).</li> <li>Blurring requires that the opacity level be relatively high for the effect to be visible.</li> </ul> <h3 id="fade-transition" class="bv-no-focus-ring"><span class="bd-content-title">Fade transition<a class="anchorjs-link" href="#fade-transition" aria-labelledby="fade-transition"></a></span></h3> <p>By default, the overlay uses Bootstrap&#39;s fade transition when showing or hiding. You can disable the fade transition via adding the <code class="text-nowrap" translate="no">no-fade</code> prop to <code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code>.</p> <h3 id="default-spinner-styling" class="bv-no-focus-ring"><span class="bd-content-title">Default spinner styling<a class="anchorjs-link" href="#default-spinner-styling" aria-labelledby="default-spinner-styling"></a></span></h3> <p>The default overlay content is a <a href="/docs/components/spinner" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-spinner&gt;</code></a> of type <code class="text-nowrap" translate="no">&#39;border&#39;</code>. You can control the appearance of the spinner via the following props:</p> <ul> <li><code class="text-nowrap" translate="no">spinner-type</code>: Currently supported values are <code class="text-nowrap" translate="no">&#39;border&#39;</code> (the default) or <code class="text-nowrap" translate="no">&#39;grow&#39;</code>.</li> <li><code class="text-nowrap" translate="no">spinner-variant</code>: Variant theme color for the spinner. Default is <code class="text-nowrap" translate="no">null</code> which inherits the current font color.</li> <li><code class="text-nowrap" translate="no">spinner-small</code>: Set to <code class="text-nowrap" translate="no">true</code> to render a small size spinner.</li> </ul> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span>\n      <span class="hljs-attr">show</span>\n      <span class="hljs-attr">spinner-variant</span>=<span class="hljs-string">&quot;primary&quot;</span>\n      <span class="hljs-attr">spinner-type</span>=<span class="hljs-string">&quot;grow&quot;</span>\n      <span class="hljs-attr">spinner-small</span>\n      <span class="hljs-attr">rounded</span>=<span class="hljs-string">&quot;sm&quot;</span>\n      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;max-width: 320px;&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Card with spinner style&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n          incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n          exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay-spinner-style.vue --&gt;</span></pre></div><h3 id="overlay-corner-rounding" class="bv-no-focus-ring"><span class="bd-content-title">Overlay corner rounding<a class="anchorjs-link" href="#overlay-corner-rounding" aria-labelledby="overlay-corner-rounding"></a></span></h3> <p>By default, the overlay backdrop has square corners. If the content you are wrapping has rounded corners, you can use the <code class="text-nowrap" translate="no">rounded</code> prop to apply rounding to the overlay&#39;s corners to match the obscured content&#39;s rounded corners.</p> <p>Possible values are:</p> <ul> <li><code class="text-nowrap" translate="no">true</code> (or the empty string <code class="text-nowrap" translate="no">&#39;&#39;</code>) to apply default (medium) rounding</li> <li><code class="text-nowrap" translate="no">false</code> (the default) applies no rounding to the backdrop overlay</li> <li><code class="text-nowrap" translate="no">&#39;sm&#39;</code> for small rounded corners</li> <li><code class="text-nowrap" translate="no">&#39;lg&#39;</code> for large rounded corners</li> <li><code class="text-nowrap" translate="no">&#39;pill&#39;</code> for pill style rounded corners</li> <li><code class="text-nowrap" translate="no">&#39;circle&#39;</code> for circular (or oval) rounding</li> <li><code class="text-nowrap" translate="no">&#39;top&#39;</code> for rounding only the top two corners</li> <li><code class="text-nowrap" translate="no">&#39;bottom&#39;</code> for rounding only the bottom two corners</li> <li><code class="text-nowrap" translate="no">&#39;left&#39;</code> for rounding only the two left corners</li> <li><code class="text-nowrap" translate="no">&#39;right&#39;</code> for rounding only the two right corners</li> </ul> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span>Toggle overlay<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center mt-3&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>With rounding<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline-block&quot;</span> <span class="hljs-attr">rounded</span>=<span class="hljs-string">&quot;circle&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-img</span> <span class="hljs-attr">thumbnail</span> <span class="hljs-attr">rounded</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">fluid</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://picsum.photos/200/200/?image=54&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Image 1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-img</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Without rounding<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline-block&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-img</span> <span class="hljs-attr">thumbnail</span> <span class="hljs-attr">rounded</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">fluid</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://picsum.photos/200/200/?image=54&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Image 1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-img</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay-rounded.vue --&gt;</span></pre></div><h3 id="custom-overlay-content" class="bv-no-focus-ring"><span class="bd-content-title">Custom overlay content<a class="anchorjs-link" href="#custom-overlay-content" aria-labelledby="custom-overlay-content"></a></span></h3> <p>Place custom content in the overlay (replacing the default spinner) via the optionally scoped slot <code class="text-nowrap" translate="no">overlay</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">rounded</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">shown</span>=<span class="hljs-string">&quot;onShown&quot;</span> @<span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;onHidden&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Card with custom overlay content&quot;</span> <span class="hljs-attr">:aria-hidden</span>=<span class="hljs-string">&quot;show ? &#x27;true&#x27; : null&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.<span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>Click the button to toggle the overlay:<span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = true&quot;</span>&gt;</span>\n          Show overlay\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">overlay</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;stopwatch&quot;</span> <span class="hljs-attr">font-scale</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">animation</span>=<span class="hljs-string">&quot;cylon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-icon</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cancel-label&quot;</span>&gt;</span>Please wait...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;cancel&quot;</span>\n            <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-danger&quot;</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n            <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;cancel-label&quot;</span>\n            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = false&quot;</span>\n          &gt;</span>\n            Cancel\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onShown</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Focus the cancel button when the overlay is showing</span>\n        <span class="hljs-built_in">this</span>.$refs.cancel.focus()\n      },\n      <span class="hljs-function"><span class="hljs-title">onHidden</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Focus the show button when the overlay is removed</span>\n        <span class="hljs-built_in">this</span>.$refs.show.focus()\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay-overlay-slot.vue --&gt;</span></pre></div><p>The following scope properties are available to the <code class="text-nowrap" translate="no">overlay</code> slot:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">spinnerVariant</code></td> <td>Value of the <code class="text-nowrap" translate="no">spinner-variant</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">spinnerType</code></td> <td>Value of the <code class="text-nowrap" translate="no">spinner-type</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">spinnerSmall</code></td> <td>Value of the <code class="text-nowrap" translate="no">spinner-small</code> prop</td> </tr> </tbody></table> </div><p>When placing interactive content in the overlay, you should focus the container of the custom content or one of the focusable controls in the overlay content for accessibility reasons. You can listen for the <code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code> <code class="text-nowrap" translate="no">&#39;shown&#39;</code> event to know when the overlay content is available in the document.</p> <h3 id="overlay-content-centering" class="bv-no-focus-ring"><span class="bd-content-title">Overlay content centering<a class="anchorjs-link" href="#overlay-content-centering" aria-labelledby="overlay-content-centering"></a></span></h3> <p>By default the overlay content will be horizontally and vertically centered within the overlay region. To disable centering, set the <code class="text-nowrap" translate="no">no-center</code> prop to <code class="text-nowrap" translate="no">true</code>.</p> <p>In the following example, we have set the <code class="text-nowrap" translate="no">no-center</code> prop, and absolutely positioned the custom overlay slot content at the top right.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span> <span class="hljs-attr">no-center</span> <span class="hljs-attr">show</span> <span class="hljs-attr">rounded</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">overlay</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-icon</span>\n          <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;stopwatch&quot;</span>\n          <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;info&quot;</span>\n          <span class="hljs-attr">scale</span>=<span class="hljs-string">&quot;2&quot;</span>\n          <span class="hljs-attr">shift-v</span>=<span class="hljs-string">&quot;8&quot;</span>\n          <span class="hljs-attr">shift-h</span>=<span class="hljs-string">&quot;8&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;position-absolute&quot;</span>\n          <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;top: 0; right: 0&quot;</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-icon</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Card with no-center overlay&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n          incididunt ut labore et dolore magna aliqua.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay-no-center.vue --&gt;</span></pre></div><h3 id="width" class="bv-no-focus-ring"><span class="bd-content-title">Width<a class="anchorjs-link" href="#width" aria-labelledby="width"></a></span></h3> <p><code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code> defaults to a width of <code class="text-nowrap" translate="no">100%</code>. When wrapping an inline or inline-block element, you will need to add the class <code class="text-nowrap" translate="no">d-inline-block</code> (e.g. <code class="text-nowrap" translate="no">&lt;b-overlay class=&quot;d-inline-block&quot;&gt;</code>).</p> <p>You can also use the width <a href="/docs/reference/utility-classes" class="font-weight-bold">utility classes</a> or CSS styles to control the width of the overlay&#39;s wrapping container element.</p> <h3 id="non-wrapping-mode" class="bv-no-focus-ring"><span class="bd-content-title">Non-wrapping mode<a class="anchorjs-link" href="#non-wrapping-mode" aria-labelledby="non-wrapping-mode"></a></span></h3> <p>By default, <code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code> wraps the content of the default slot. In some cases you may want to obscure a parent container. Use the <code class="text-nowrap" translate="no">no-wrap</code> prop to disable rendering of the wrapping (and ignore the default slot). Note that this requires that the ancestor element that is to be obscured to have relative positioning (either via the utility class <code class="text-nowrap" translate="no">&#39;position-relative&#39;</code>, or CSS style <code class="text-nowrap" translate="no">&#39;position: relative;&#39;</code>).</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;position-relative p-4 bg-info&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-light font-weight-bold&quot;</span>&gt;</span>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Card with parent overlay&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>Laborum consequat non elit enim exercitation cillum.<span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>Click the button to toggle the overlay:<span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = true&quot;</span>&gt;</span>\n          Show overlay\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-light font-weight-bold mb-0&quot;</span>&gt;</span>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">no-wrap</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span>Toggle overlay<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay-nowrap.vue --&gt;</span></pre></div><p>Note that some of Bootstrap v4&#39;s component styles have relative positioning defined (e.g. cards, cols, etc.). You may need to adjust the placement of <code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code> in your markup.</p> <p>For example, <code class="text-nowrap" translate="no">&lt;b-card&gt;</code> has relative positioning, so you can place the <code class="text-nowrap" translate="no">&lt;b-overlay no-wrap&gt;</code> as a descendant of <code class="text-nowrap" translate="no">&lt;b-card&gt;</code>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">header</span>=<span class="hljs-string">&quot;Card header&quot;</span> <span class="hljs-attr">footer</span>=<span class="hljs-string">&quot;Card footer&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-media</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">aside</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-img</span>\n            <span class="hljs-attr">thumbnail</span>\n            <span class="hljs-attr">rounded</span>=<span class="hljs-string">&quot;circle&quot;</span>\n            <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://picsum.photos/72/72/?image=58&quot;</span>\n            <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Image&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-img</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>&gt;</span>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n          incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n          exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-media</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">no-wrap</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Toggle overlay<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay-card-relative.vue --&gt;</span></pre></div><p>When in <code class="text-nowrap" translate="no">no-wrap</code> mode, <code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code> will not set the <code class="text-nowrap" translate="no">aria-busy</code> attribute on the obscured element. You may also want to use an <code class="text-nowrap" translate="no">aria-live</code> region in your app that announces to screen reader users that the page is busy.</p> <p>Refer to the <a href="#accessibility" class="font-weight-bold">Accessibility section</a> below for additional details and concerns.</p> <h4 id="absolute-vs-fixed-positioning-for-no-wrap" class="bv-no-focus-ring"><span class="bd-content-title">Absolute vs fixed positioning for <code class="text-nowrap" translate="no">no-wrap</code><a class="anchorjs-link" href="#absolute-vs-fixed-positioning-for-no-wrap" aria-labelledby="absolute-vs-fixed-positioning-for-no-wrap"></a></span></h4> <p>In cases where you want to obscure the entire app or page, when using the <code class="text-nowrap" translate="no">no-wrap</code> prop, you can switch to viewport fixed positioning via setting the prop <code class="text-nowrap" translate="no">fixed</code> on <code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code>. Note that this does not disable scrolling of the page, and note that any interactive elements on the page will still be in the document tab sequence.</p> <p>You may also need to adjust the <a href="#overlay-z-index" class="font-weight-bold">z-index of the overlay</a> to ensure that the backdrop appears above all other page elements. Use the <code class="text-nowrap" translate="no">z-index</code> property to override the default <code class="text-nowrap" translate="no">z-index</code> value.</p> <p>Refer to the <a href="#accessibility" class="font-weight-bold">Accessibility section</a> below for additional details and concerns.</p> <h3 id="overlay-z-index" class="bv-no-focus-ring"><span class="bd-content-title">Overlay z-index<a class="anchorjs-link" href="#overlay-z-index" aria-labelledby="overlay-z-index"></a></span></h3> <p>In some circumstances, you may need to adjust the <code class="text-nowrap" translate="no">z-index</code> used by the overlay (depending on positioning in the DOM or the content being obscured). Simply set the <code class="text-nowrap" translate="no">z-index</code> prop with a value suitable for your application or use case. The default <code class="text-nowrap" translate="no">z-index</code> is <code class="text-nowrap" translate="no">10</code>.</p> <h2 id="accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-labelledby="accessibility"></a></span></h2> <p>Note that the overlay is visual only. You <strong>must</strong> disable any interactive elements (buttons, links, etc.) when the overlay is showing, otherwise the obscured elements will still be reachable via keyboard navigation (i.e. still in the document tab sequence).</p> <p>If you have any links in the obscured content, we recommend using the <a href="/docs/components/link" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-link&gt;</code> component</a>, as it supports the <code class="text-nowrap" translate="no">disabled</code> state, as native links (<code class="text-nowrap" translate="no">&lt;a href=&quot;...&quot;&gt;</code>) and <code class="text-nowrap" translate="no">&lt;router-link&gt;</code> components do not support the disabled state.</p> <p>It is also recommended to add either the <code class="text-nowrap" translate="no">aria-hidden=&quot;true&quot;</code> or <code class="text-nowrap" translate="no">aria-busy=&quot;true&quot;</code> attribute to your obscured content when the overlay is visible. Just be careful not to add <code class="text-nowrap" translate="no">aria-hidden=&quot;true&quot;</code> to the wrapper that contains the <code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code> component (when using <code class="text-nowrap" translate="no">no-wrap</code>), as that would hide any interactive content in the <code class="text-nowrap" translate="no">overlay</code> slot for screen reader users.</p> <p>If you are placing interactive content in the <code class="text-nowrap" translate="no">overlay</code> slot, you should focus the content once the <code class="text-nowrap" translate="no">&#39;shown&#39;</code> event has been emitted. You can use the <code class="text-nowrap" translate="no">hidden</code> event to trigger returning focus to an element as needed when the overlay is no longer visible.</p> <p>When using the wrapping mode (prop <code class="text-nowrap" translate="no">no-wrap</code> is not set), the wrapper will have the attribute <code class="text-nowrap" translate="no">aria-busy=&quot;true&quot;</code> set, to allow screen reader users to know that the wrapped content is in a busy or loading state. When prop <code class="text-nowrap" translate="no">no-wrap</code> is set, the attribute will <em>not</em> be applied.</p> <p>When using the <code class="text-nowrap" translate="no">no-wrap</code> prop, and potentially the <code class="text-nowrap" translate="no">fixed</code> prop, to obscure the entire application or page, you must ensure that all internative page elements (other than the content of the overlay) have been disabled and are <em>not</em> in the document tab sequence.</p> <h2 id="use-case-examples" class="bv-no-focus-ring"><span class="bd-content-title">Use case examples<a class="anchorjs-link" href="#use-case-examples" aria-labelledby="use-case-examples"></a></span></h2> <p>Here are just a few examples of common use cases of <code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code>. In all cases, we disable any interactive elements in the obscured area to prevent reachability via keyboard navigation (i.e. <kbd class="notranslate" translate="no">Tab</kbd> key) or screen reader access.</p> <p>Please refer to the <a href="#accessibility" class="font-weight-bold">Accessibility section</a> for additional details and concerns.</p> <h3 id="loading-button" class="bv-no-focus-ring"><span class="bd-content-title">Loading button<a class="anchorjs-link" href="#loading-button" aria-labelledby="loading-button"></a></span></h3> <p>Easily create a loading button:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span>\n      <span class="hljs-attr">:show</span>=<span class="hljs-string">&quot;busy&quot;</span>\n      <span class="hljs-attr">rounded</span>\n      <span class="hljs-attr">opacity</span>=<span class="hljs-string">&quot;0.6&quot;</span>\n      <span class="hljs-attr">spinner-small</span>\n      <span class="hljs-attr">spinner-variant</span>=<span class="hljs-string">&quot;primary&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline-block&quot;</span>\n      @<span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;onHidden&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n        <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;button&quot;</span>\n        <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;busy&quot;</span>\n        <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>\n        @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClick&quot;</span>\n      &gt;</span>\n        Do something\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">busy</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">timeout</span>: <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-function"><span class="hljs-title">beforeDestroy</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-built_in">this</span>.clearTimeout()\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">clearTimeout</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.timeout) {\n          <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-built_in">this</span>.timeout)\n          <span class="hljs-built_in">this</span>.timeout = <span class="hljs-literal">null</span>\n        }\n      },\n      <span class="hljs-function"><span class="hljs-title">setTimeout</span>(<span class="hljs-params">callback</span>)</span> {\n        <span class="hljs-built_in">this</span>.clearTimeout()\n        <span class="hljs-built_in">this</span>.timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-built_in">this</span>.clearTimeout()\n          callback()\n        }, <span class="hljs-number">5000</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">onHidden</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Return focus to the button once hidden</span>\n        <span class="hljs-built_in">this</span>.$refs.button.focus()\n      },\n      <span class="hljs-function"><span class="hljs-title">onClick</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.busy = <span class="hljs-literal">true</span>\n        <span class="hljs-comment">// Simulate an async request</span>\n        <span class="hljs-built_in">this</span>.setTimeout(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-built_in">this</span>.busy = <span class="hljs-literal">false</span>\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay-example-loading-button.vue --&gt;</span></pre></div><h3 id="busy-state-input-group" class="bv-no-focus-ring"><span class="bd-content-title">Busy state input group<a class="anchorjs-link" href="#busy-state-input-group" aria-labelledby="busy-state-input-group"></a></span></h3> <p>In this example, we obscure the input and button:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&quot;busy&quot;</span> <span class="hljs-attr">rounded</span>=<span class="hljs-string">&quot;lg&quot;</span> <span class="hljs-attr">opacity</span>=<span class="hljs-string">&quot;0.6&quot;</span> @<span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;onHidden&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">overlay</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex align-items-center&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-spinner</span> <span class="hljs-attr">small</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;grow&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;secondary&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-spinner</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-spinner</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;grow&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;dark&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-spinner</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-spinner</span> <span class="hljs-attr">small</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;grow&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;secondary&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-spinner</span>&gt;</span>\n          <span class="hljs-comment">&lt;!-- We add an SR only text for screen readers --&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Please wait...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span> <span class="hljs-attr">:aria-hidden</span>=<span class="hljs-string">&quot;busy ? &#x27;true&#x27; : null&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;busy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;busy&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>  @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>\n            Do something\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Some value&#x27;</span>,\n        <span class="hljs-attr">busy</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">timeout</span>: <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-function"><span class="hljs-title">beforeDestroy</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-built_in">this</span>.clearTimeout()\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">clearTimeout</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.timeout) {\n          <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-built_in">this</span>.timeout)\n          <span class="hljs-built_in">this</span>.timeout = <span class="hljs-literal">null</span>\n        }\n      },\n      <span class="hljs-function"><span class="hljs-title">setTimeout</span>(<span class="hljs-params">callback</span>)</span> {\n        <span class="hljs-built_in">this</span>.clearTimeout()\n        <span class="hljs-built_in">this</span>.timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-built_in">this</span>.clearTimeout()\n          callback()\n        }, <span class="hljs-number">5000</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">onHidden</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Return focus to the button</span>\n        <span class="hljs-built_in">this</span>.$refs.button.focus()\n      },\n      <span class="hljs-function"><span class="hljs-title">onClick</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.busy = <span class="hljs-literal">true</span>\n        <span class="hljs-comment">// Simulate an async request</span>\n        <span class="hljs-built_in">this</span>.setTimeout(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-built_in">this</span>.busy = <span class="hljs-literal">false</span>\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay-example-input-group.vue --&gt;</span></pre></div><h3 id="form-confirmation-prompt-and-upload-status" class="bv-no-focus-ring"><span class="bd-content-title">Form confirmation prompt and upload status<a class="anchorjs-link" href="#form-confirmation-prompt-and-upload-status" aria-labelledby="form-confirmation-prompt-and-upload-status"></a></span></h3> <p>This example is a bit more complex, but shows the use of <code class="text-nowrap" translate="no">no-wrap</code>, and using the <code class="text-nowrap" translate="no">overlay</code> slot to present the user with a prompt dialog, and once confirmed it shows a uploading status indicator. This example also demonstrates additional accessibility markup.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;position-relative p-3&quot;</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Name&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;form-name&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-prepend</span> <span class="hljs-attr">is-text</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;person-fill&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-icon</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-prepend</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form-name&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;busy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Email&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;form-mail&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-prepend</span> <span class="hljs-attr">is-text</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;envelope-fill&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-icon</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-prepend</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form-email&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;busy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Image&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;form-image&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-prepend</span> <span class="hljs-attr">is-text</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;image-fill&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-icon</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-prepend</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form-image&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;busy&quot;</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex justify-content-center&quot;</span>&gt;</span>\n         <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;busy&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-overlay</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&quot;busy&quot;</span> <span class="hljs-attr">no-wrap</span> @<span class="hljs-attr">shown</span>=<span class="hljs-string">&quot;onShown&quot;</span> @<span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;onHidden&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">overlay</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;processing&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center p-4 bg-primary text-light rounded&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;cloud-upload&quot;</span> <span class="hljs-attr">font-scale</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-icon</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>Processing...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-progress</span>\n              <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;1&quot;</span>\n              <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;20&quot;</span>\n              <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;counter&quot;</span>\n              <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;success&quot;</span>\n              <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;3px&quot;</span>\n              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mx-n4 rounded-0&quot;</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-progress</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>\n            <span class="hljs-attr">v-else</span>\n            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dialog&quot;</span>\n            <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span>\n            <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;dialog&quot;</span>\n            <span class="hljs-attr">aria-modal</span>=<span class="hljs-string">&quot;false&quot;</span>\n            <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;form-confirm-label&quot;</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center p-3&quot;</span>\n          &gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form-confirm-label&quot;</span>&gt;</span>Are you sure?<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex&quot;</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-danger&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-3&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onCancel&quot;</span>&gt;</span>\n                Cancel\n              <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onOK&quot;</span>&gt;</span>OK<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-overlay</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">busy</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">processing</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">counter</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">interval</span>: <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-function"><span class="hljs-title">beforeDestroy</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-built_in">this</span>.clearInterval()\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">clearInterval</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.interval) {\n          <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.interval)\n          <span class="hljs-built_in">this</span>.interval = <span class="hljs-literal">null</span>\n        }\n      },\n      <span class="hljs-function"><span class="hljs-title">onShown</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Focus the dialog prompt</span>\n        <span class="hljs-built_in">this</span>.$refs.dialog.focus()\n      },\n      <span class="hljs-function"><span class="hljs-title">onHidden</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// In this case, we return focus to the submit button</span>\n        <span class="hljs-comment">// You may need to alter this based on your application requirements</span>\n        <span class="hljs-built_in">this</span>.$refs.submit.focus()\n      },\n      <span class="hljs-function"><span class="hljs-title">onSubmit</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.processing = <span class="hljs-literal">false</span>\n        <span class="hljs-built_in">this</span>.busy = <span class="hljs-literal">true</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">onCancel</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.busy = <span class="hljs-literal">false</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">onOK</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.counter = <span class="hljs-number">1</span>\n        <span class="hljs-built_in">this</span>.processing = <span class="hljs-literal">true</span>\n        <span class="hljs-comment">// Simulate an async request</span>\n        <span class="hljs-built_in">this</span>.clearInterval()\n        <span class="hljs-built_in">this</span>.interval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.counter &lt; <span class="hljs-number">20</span>) {\n            <span class="hljs-built_in">this</span>.counter = <span class="hljs-built_in">this</span>.counter + <span class="hljs-number">1</span>\n          } <span class="hljs-keyword">else</span> {\n            <span class="hljs-built_in">this</span>.clearInterval()\n            <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> {\n              <span class="hljs-built_in">this</span>.busy = <span class="hljs-built_in">this</span>.processing = <span class="hljs-literal">false</span>\n            })\n          }\n        }, <span class="hljs-number">350</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-overlay-example-form.vue --&gt;</span></pre></div><h3 id="using-in-b-modal" class="bv-no-focus-ring"><span class="bd-content-title">Using in <code class="text-nowrap" translate="no">&lt;b-modal&gt;</code><a class="anchorjs-link" href="#using-in-b-modal" aria-labelledby="using-in-b-modal"></a></span></h3> <p>The modal body has <code class="text-nowrap" translate="no">position: relative;</code> set, so when using <code class="text-nowrap" translate="no">&lt;b-overlay no-wrap ...&gt;</code> in the modal body only the modal body will be obscured. If you wish to obscure the entire modal (including the header and footer), you will need to set the <code class="text-nowrap" translate="no">&lt;b-modal&gt;</code> prop <code class="text-nowrap" translate="no">body-class</code> to <code class="text-nowrap" translate="no">position-static</code>, and also set the <code class="text-nowrap" translate="no">rounded</code> prop on <code class="text-nowrap" translate="no">&lt;b-overlay&gt;</code>.</p>'}}}]);