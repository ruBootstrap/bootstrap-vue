(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{459:function(n,t){n.exports={baseTOC:{top:"#form-select",title:"Form Select",toc:[{href:"#options-property",label:"Options property",toc:[{href:"#options-as-an-array",label:"Options as an array"},{href:"#options-as-an-array-of-objects",label:"Options as an array of objects"},{href:"#options-as-an-object",label:"Options as an object"},{href:"#changing-the-option-field-names",label:"Changing the option field names"},{href:"#option-notes",label:"Option notes"}]},{href:"#standard-single-select",label:"Standard (single) select",toc:[{href:"#value-in-single-mode",label:"Value in single mode"},{href:"#select-sizing-displayed-rows",label:"Select sizing (displayed rows)"}]},{href:"#multiple-select-support",label:"Multiple select support",toc:[{href:"#value-in-multiple-mode",label:"Value in multiple mode"}]},{href:"#control-sizing",label:"Control sizing"},{href:"#autofocus",label:"Autofocus"},{href:"#contextual-states",label:"Contextual states",toc:[{href:"#conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users",label:"Conveying contextual validation state to assistive technologies and colorblind users"},{href:"#aria-aria-invalid-attribute",label:"ARIA aria-invalid attribute:"}]},{href:"#non-custom-select",label:"Non custom select"}]},titleLead:'<h1 id="form-select" class="bv-no-focus-ring"><span class="bd-content-title">Form Select</span></h1> <p class="bd-lead">Bootstrap custom <code class="text-nowrap" translate="no">&lt;select&gt;</code> using custom styles. Optionally specify options based on an array, array of objects, or an object.</p>',body:'<p>Generate your select options by passing an array or object to the <code class="text-nowrap" translate="no">options</code> props:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Please select an option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is First option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Selected Option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: { <span class="hljs-attr">C</span>: <span class="hljs-string">&#x27;3PO&#x27;</span> }, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is an option with object value&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This one is disabled&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-options.vue --&gt;</span></pre></div><p>You can even define option groups with the <code class="text-nowrap" translate="no">options</code> prop:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Please select an option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is First option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Selected Option&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          {\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Grouped options&#x27;</span>,\n            <span class="hljs-attr">options</span>: [\n              { <span class="hljs-attr">value</span>: { <span class="hljs-attr">C</span>: <span class="hljs-string">&#x27;3PO&#x27;</span> }, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Option with object value&#x27;</span> },\n              { <span class="hljs-attr">value</span>: { <span class="hljs-attr">R</span>: <span class="hljs-string">&#x27;2D2&#x27;</span> }, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Another option with object value&#x27;</span> }\n            ]\n          }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-options.vue --&gt;</span></pre></div><p>Or manually provide your options and option groups:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;null&quot;</span>&gt;</span>Please select an option<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>Option A<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>Option B (disabled)<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Grouped options&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;{ C: &#x27;3PO&#x27; }&quot;</span>&gt;</span>Option with object value<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;{ R: &#x27;2D2&#x27; }&quot;</span>&gt;</span>Another option with object value<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-manual.vue --&gt;</span></pre></div><p>Feel free to mix the <code class="text-nowrap" translate="no">options</code> prop with <code class="text-nowrap" translate="no">&lt;b-form-select-option&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-form-select-option-group&gt;</code>. Manually placed options and option groups will appear <em>below</em> the options generated via the <code class="text-nowrap" translate="no">options</code> prop. To place manual options and option groups <em>above</em> the options specified by the <code class="text-nowrap" translate="no">options</code> prop, use the named slot <code class="text-nowrap" translate="no">first</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- This slot appears above the options from &#x27;options&#x27; prop --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">first</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;null&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>-- Please select an option --<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- These options will appear after the ones from &#x27;options&#x27; prop --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;C&quot;</span>&gt;</span>Option C<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;D&quot;</span>&gt;</span>Option D<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Option A (from options prop)&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Option B (from options prop)&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-both.vue --&gt;</span></pre></div><h2 id="options-property" class="bv-no-focus-ring"><span class="bd-content-title">Options property<a class="anchorjs-link" href="#options-property" aria-labelledby="options-property"></a></span></h2> <p><code class="text-nowrap" translate="no">options</code> can be an array of strings or objects, or a key-value object. Available fields:</p> <ul> <li><strong><code class="text-nowrap" translate="no">value</code></strong> The selected value which will be set on <code class="text-nowrap" translate="no">v-model</code></li> <li><strong><code class="text-nowrap" translate="no">disabled</code></strong> Disables item for selection</li> <li><strong><code class="text-nowrap" translate="no">text</code></strong> Display text, or <strong><code class="text-nowrap" translate="no">html</code></strong> Display basic inline html</li> </ul> <p><code class="text-nowrap" translate="no">value</code> can be a string, number, or simple object. Avoid using complex types in values.</p> <p>If both <code class="text-nowrap" translate="no">html</code> and <code class="text-nowrap" translate="no">text</code> are provided, <code class="text-nowrap" translate="no">html</code> will take precedence. Only basic/native HTML is supported in the <code class="text-nowrap" translate="no">html</code> field (components will not work). Note that not all browsers will render inline html (i.e. <code class="text-nowrap" translate="no">&lt;i&gt;</code>, <code class="text-nowrap" translate="no">&lt;strong&gt;</code>, etc.) inside <code class="text-nowrap" translate="no">&lt;option&gt;</code> elements of a <code class="text-nowrap" translate="no">&lt;select&gt;</code>.</p> <p class="alert alert-danger"> <strong>Be cautious</strong> of placing user supplied content in the <code class="notranslate" translate="no">html</code> field, as it may make you vulnerable to <a class="alert-link" href="https://en.wikipedia.org/wiki/Cross-site_scripting"> <abbr title="Cross Site Scripting Attacks">XSS attacks</abbr></a>, if you do not first <a class="alert-link" href="https://en.wikipedia.org/wiki/HTML_sanitization">sanitize</a> the user supplied string. </p> <h3 id="options-as-an-array" class="bv-no-focus-ring"><span class="bd-content-title">Options as an array<a class="anchorjs-link" href="#options-as-an-array" aria-labelledby="options-as-an-array"></a></span></h3> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> options = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>]</pre></div><p>If an array entry is a string, it will be used for both the generated <code class="text-nowrap" translate="no">value</code> and <code class="text-nowrap" translate="no">text</code> fields.</p> <p>You can mix using strings and <a href="#options-as-an-array-of-objects" class="font-weight-bold">objects</a> in the array.</p> <p>Internally, BootstrapVue will convert the above array to the following array (the <a href="#options-as-an-array-of-objects" class="font-weight-bold">array of objects</a>) format:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> }\n]</pre></div><h3 id="options-as-an-array-of-objects" class="bv-no-focus-ring"><span class="bd-content-title">Options as an array of objects<a class="anchorjs-link" href="#options-as-an-array-of-objects" aria-labelledby="options-as-an-array-of-objects"></a></span></h3> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 1&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;first&#x27;</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 2&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;second&#x27;</span> },\n  { <span class="hljs-attr">html</span>: <span class="hljs-string">&#x27;&lt;b&gt;Item&lt;/b&gt; 3&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;third&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 4&#x27;</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 5&#x27;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-literal">true</span> } }\n]</pre></div><p>If <code class="text-nowrap" translate="no">value</code> is missing, then <code class="text-nowrap" translate="no">text</code> will be used as both the <code class="text-nowrap" translate="no">value</code> and <code class="text-nowrap" translate="no">text</code> fields. If you use the <code class="text-nowrap" translate="no">html</code> property, you <strong>must</strong> supply a <code class="text-nowrap" translate="no">value</code> property.</p> <p><span class="badge badge-info">New in v2.2.0</span> To define option groups, just add an object with a <code class="text-nowrap" translate="no">label</code> prop as the groups name and a <code class="text-nowrap" translate="no">options</code> property with the array of options of the group.</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 1&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;first&#x27;</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 2&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;second&#x27;</span> },\n  {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Grouped options&#x27;</span>,\n    <span class="hljs-attr">options</span>: [{ <span class="hljs-attr">html</span>: <span class="hljs-string">&#x27;&lt;b&gt;Item&lt;/b&gt; 3&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;third&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }, { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 4&#x27;</span> }]\n  },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 5&#x27;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-literal">true</span> } }\n]</pre></div><h3 id="options-as-an-object" class="bv-no-focus-ring"><span class="bd-content-title">Options as an object<a class="anchorjs-link" href="#options-as-an-object" aria-labelledby="options-as-an-object"></a></span></h3> <p><span class="badge badge-warning">Deprecated</span></p> <p>Keys are mapped to <code class="text-nowrap" translate="no">value</code> and values are mapped to option <code class="text-nowrap" translate="no">text</code>.</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> options = {\n  <span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Item A&#x27;</span>,\n  <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;Item B&#x27;</span>,\n  <span class="hljs-attr">c</span>: { <span class="hljs-attr">html</span>: <span class="hljs-string">&#x27;Item C&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  <span class="hljs-attr">d</span>: { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item D&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;overridden_value&#x27;</span> },\n  <span class="hljs-attr">e</span>: { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item E&#x27;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-literal">true</span> } }\n}</pre></div><p>Internally, BootstrapVue will convert the above object to the following array (the <a href="#options-as-an-array-of-objects" class="font-weight-bold">array of objects</a>) format:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item A&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item B&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">html</span>: <span class="hljs-string">&#x27;Item C&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item D&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;overridden_value&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item E&#x27;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-literal">true</span> }, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> }\n]</pre></div><p><strong>Note:</strong> When using the Object format, the order of the final array is <strong>not</strong> guaranteed. For this reason, it is recommended to use either of the previously mentioned array formats.</p> <h3 id="changing-the-option-field-names" class="bv-no-focus-ring"><span class="bd-content-title">Changing the option field names<a class="anchorjs-link" href="#changing-the-option-field-names" aria-labelledby="changing-the-option-field-names"></a></span></h3> <p>If you want to customize the field property names (for example using <code class="text-nowrap" translate="no">name</code> field for display <code class="text-nowrap" translate="no">text</code>) you can easily change them by setting the <code class="text-nowrap" translate="no">text-field</code>, <code class="text-nowrap" translate="no">html-field</code>, <code class="text-nowrap" translate="no">value-field</code>, and <code class="text-nowrap" translate="no">disabled-field</code> props to a string that contains the property name you would like to use:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n      <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>\n      <span class="hljs-attr">value-field</span>=<span class="hljs-string">&quot;item&quot;</span>\n      <span class="hljs-attr">text-field</span>=<span class="hljs-string">&quot;name&quot;</span>\n      <span class="hljs-attr">disabled-field</span>=<span class="hljs-string">&quot;notEnabled&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;A&#x27;</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Option A&#x27;</span> },\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Option B&#x27;</span> },\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Option C&#x27;</span>, <span class="hljs-attr">notEnabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">item</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Option D&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-options-fields.vue --&gt;</span></pre></div><h3 id="option-notes" class="bv-no-focus-ring"><span class="bd-content-title">Option notes<a class="anchorjs-link" href="#option-notes" aria-labelledby="option-notes"></a></span></h3> <p>If the initial value of your <code class="text-nowrap" translate="no">v-model</code> expression does not match any of the options, the <code class="text-nowrap" translate="no">&lt;b-form-select&gt;</code> component (which is a native HTML5 <code class="text-nowrap" translate="no">&lt;select&gt;</code> under the hood) will render in an <em>unselected</em> state. On iOS this will cause the user not being able to select the first item because iOS does not fire a change event in this case. It is therefore recommended to provide a disabled option with an empty value as your first option.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">first</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>-- Please select an option --<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span></pre></div><p>See the <a href="https://vuejs.org/v2/guide/forms.html#Select" target="_blank" rel="noopener">Vue select</a> documentation for more details.</p> <h2 id="standard-single-select" class="bv-no-focus-ring"><span class="bd-content-title">Standard (single) select<a class="anchorjs-link" href="#standard-single-select" aria-labelledby="standard-single-select"></a></span></h2> <p>By default, Bootstrap v4&#39;s custom select styling is applied.</p> <h3 id="value-in-single-mode" class="bv-no-focus-ring"><span class="bd-content-title">Value in single mode<a class="anchorjs-link" href="#value-in-single-mode" aria-labelledby="value-in-single-mode"></a></span></h3> <p>In non <code class="text-nowrap" translate="no">multiple</code> mode, <code class="text-nowrap" translate="no">&lt;b-form-select&gt;</code> returns the a single <code class="text-nowrap" translate="no">value</code> of the currently selected option.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Please select some item&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is First option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Default Selected Option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is another option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This one is disabled&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-single.vue --&gt;</span></pre></div><h3 id="select-sizing-displayed-rows" class="bv-no-focus-ring"><span class="bd-content-title">Select sizing (displayed rows)<a class="anchorjs-link" href="#select-sizing-displayed-rows" aria-labelledby="select-sizing-displayed-rows"></a></span></h3> <p>You can use the <code class="text-nowrap" translate="no">select-size</code> prop to switch the custom select into a select list-box, rather than a dropdown. Set the <code class="text-nowrap" translate="no">select-size</code> prop to a numerical value greater than 1 to control how many rows of options are visible.</p> <p>Note when <code class="text-nowrap" translate="no">select-size</code> is set to a value greater than 1, the Bootstrap v4 custom styling will <strong>not</strong> be applied, unless the <code class="text-nowrap" translate="no">multiple</code> prop is also set.</p> <p>Note that not all mobile browsers will show the select as a list-box.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">:select-size</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Please select some item&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is option a&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Default Selected Option b&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is option c&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This one is disabled&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is option e&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is option f&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-size.vue --&gt;</span></pre></div><h2 id="multiple-select-support" class="bv-no-focus-ring"><span class="bd-content-title">Multiple select support<a class="anchorjs-link" href="#multiple-select-support" aria-labelledby="multiple-select-support"></a></span></h2> <p>Enable multiple select mode by setting the prop <code class="text-nowrap" translate="no">multiple</code>, and control how many rows are displayed in the multiple select list-box by setting <code class="text-nowrap" translate="no">select-size</code> to the number of rows to display. The default is to let the browser use its default (typically 4).</p> <h3 id="value-in-multiple-mode" class="bv-no-focus-ring"><span class="bd-content-title">Value in multiple mode<a class="anchorjs-link" href="#value-in-multiple-mode" aria-labelledby="value-in-multiple-mode"></a></span></h3> <p>In <code class="text-nowrap" translate="no">multiple</code> mode, <code class="text-nowrap" translate="no">&lt;b-form-select&gt;</code> always returns an array of option values. You <strong>must</strong> provide an array reference as your <code class="text-nowrap" translate="no">v-model</code> when in <code class="text-nowrap" translate="no">multiple</code> mode.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">:select-size</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: [<span class="hljs-string">&#x27;b&#x27;</span>], <span class="hljs-comment">// Array reference</span>\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is First option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Default Selected Option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is another option&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This one is disabled&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is option e&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is option f&#x27;</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is option g&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-multiple-mode.vue --&gt;</span></pre></div><h2 id="control-sizing" class="bv-no-focus-ring"><span class="bd-content-title">Control sizing<a class="anchorjs-link" href="#control-sizing" aria-labelledby="control-sizing"></a></span></h2> <p>Set the form-control text size using the <code class="text-nowrap" translate="no">size</code> prop to <code class="text-nowrap" translate="no">sm</code> or <code class="text-nowrap" translate="no">lg</code> for small or large respectively.</p> <p>By default <code class="text-nowrap" translate="no">&lt;b-form-select&gt;</code> will occupy the full width of the container that it appears in. To control the select width, place the input inside standard Bootstrap grid column.</p> <h2 id="autofocus" class="bv-no-focus-ring"><span class="bd-content-title">Autofocus<a class="anchorjs-link" href="#autofocus" aria-labelledby="autofocus"></a></span></h2> <p>When the <code class="text-nowrap" translate="no">autofocus</code> prop is set on <code class="text-nowrap" translate="no">&lt;b-form-select&gt;</code>, the select will be auto-focused when it is inserted (i.e. <strong>mounted</strong>) into the document or re-activated when inside a Vue <code class="text-nowrap" translate="no">&lt;keep-alive&gt;</code> component. Note that this prop <strong>does not</strong> set the <code class="text-nowrap" translate="no">autofocus</code> attribute on the select, nor can it tell when the select becomes visible.</p> <h2 id="contextual-states" class="bv-no-focus-ring"><span class="bd-content-title">Contextual states<a class="anchorjs-link" href="#contextual-states" aria-labelledby="contextual-states"></a></span></h2> <p>Bootstrap includes validation styles for <code class="text-nowrap" translate="no">valid</code> and <code class="text-nowrap" translate="no">invalid</code> states on most form controls.</p> <p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p> <ul> <li><code class="text-nowrap" translate="no">false</code> (denotes invalid state) is great for when there&#39;s a blocking or required field. A user must fill in this field properly to submit the form.</li> <li><code class="text-nowrap" translate="no">true</code> (denotes valid state) is ideal for situations when you have per-field validation throughout a form and want to encourage a user through the rest of the fields.</li> <li><code class="text-nowrap" translate="no">null</code> Displays no validation state (neither valid nor invalid)</li> </ul> <p>To apply one of the contextual state icons on <code class="text-nowrap" translate="no">&lt;b-form-select&gt;</code>, set the <code class="text-nowrap" translate="no">state</code> prop to <code class="text-nowrap" translate="no">false</code> (for invalid), <code class="text-nowrap" translate="no">true</code> (for valid), or <code class="text-nowrap" translate="no">null</code> (no validation state).</p> <h3 id="conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users" class="bv-no-focus-ring"><span class="bd-content-title">Conveying contextual validation state to assistive technologies and colorblind users<a class="anchorjs-link" href="#conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users" aria-labelledby="conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users"></a></span></h3> <p>Using these contextual states to denote the state of a form control only provides a visual, color-based indication, which will not be conveyed to users of assistive technologies - such as screen readers - or to colorblind users.</p> <p>Ensure that an alternative indication of state is also provided. For instance, you could include a hint about state in the form control&#39;s <code class="text-nowrap" translate="no">&lt;label&gt;</code> text itself, or by providing an additional help text block (via <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> or <code class="text-nowrap" translate="no">&lt;b-form-*-feedback&gt;</code>). Specifically for assistive technologies, invalid form controls can also be assigned an <code class="text-nowrap" translate="no">aria-invalid=&quot;true&quot;</code> attribute (see below).</p> <h3 id="aria-aria-invalid-attribute" class="bv-no-focus-ring"><span class="bd-content-title">ARIA <code class="text-nowrap" translate="no">aria-invalid</code> attribute:<a class="anchorjs-link" href="#aria-aria-invalid-attribute" aria-labelledby="aria-aria-invalid-attribute"></a></span></h3> <p>When <code class="text-nowrap" translate="no">&lt;b-form-select&gt;</code> has an invalid contextual state (i.e. state = <code class="text-nowrap" translate="no">false</code>) you may also want to set the <code class="text-nowrap" translate="no">&lt;b-form-select&gt;</code> prop <code class="text-nowrap" translate="no">aria-invalid</code> to <code class="text-nowrap" translate="no">true</code>.</p> <p>Supported <code class="text-nowrap" translate="no">invalid</code> values are:</p> <ul> <li><code class="text-nowrap" translate="no">false</code> (default) No errors detected</li> <li><code class="text-nowrap" translate="no">true</code> The value has failed validation.</li> </ul> <p>When <code class="text-nowrap" translate="no">state</code> is set to <code class="text-nowrap" translate="no">false</code>, aria-invalid will also be set to true.</p> <h2 id="non-custom-select" class="bv-no-focus-ring"><span class="bd-content-title">Non custom select<a class="anchorjs-link" href="#non-custom-select" aria-labelledby="non-custom-select"></a></span></h2> <p>Set the prop <code class="text-nowrap" translate="no">plain</code> to have a native browser <code class="text-nowrap" translate="no">&lt;select&gt;</code> rendered (although the class <code class="text-nowrap" translate="no">.form-control</code> will always be placed on the select).</p> <p>A <code class="text-nowrap" translate="no">plain</code> select will always be rendered for non <code class="text-nowrap" translate="no">multiple</code> selects which have the <code class="text-nowrap" translate="no">select-size</code> prop set to a value greater than 1.</p>'}}}]);