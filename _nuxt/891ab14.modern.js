(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{457:function(n,t){n.exports={baseTOC:{top:"#form-radio",title:"Form Radio",toc:[{href:"#individual-radios",label:"Individual radios"},{href:"#grouped-radios",label:"Grouped radios"},{href:"#radio-group-options-array",label:"Radio group options array",toc:[{href:"#options-as-an-array-of-objects",label:"Options as an array of objects"},{href:"#changing-the-option-field-names",label:"Changing the option field names"}]},{href:"#radio-value-and-v-model",label:"Radio value and v-model"},{href:"#inline-or-stacked-radios",label:"Inline or stacked radios"},{href:"#control-sizing",label:"Control sizing"},{href:"#button-style-radios",label:"Button style radios"},{href:"#non-custom-style-radio-inputs-plain",label:"Non-custom style radio inputs (plain)"},{href:"#required-constraint",label:"Required constraint"},{href:"#autofocus",label:"Autofocus"},{href:"#contextual-states",label:"Contextual states",toc:[{href:"#contextual-state-with-feedback-example",label:"Contextual state with feedback example"},{href:"#conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users",label:"Conveying contextual validation state to assistive technologies and colorblind users"},{href:"#aria-aria-invalid-attribute",label:"ARIA aria-invalid attribute"}]}]},titleLead:'<h1 id="form-radio" class="bv-no-focus-ring"><span class="bd-content-title">Form Radio</span></h1> <p class="bd-lead">For cross browser consistency, <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> uses Bootstrap&#39;s custom radio input to replace the browser default radio input. It is built on top of semantic and accessible markup, so it is a solid replacement for the default radio input.</p>',body:'<h2 id="individual-radios" class="bv-no-focus-ring"><span class="bd-content-title">Individual radios<a class="anchorjs-link" href="#individual-radios" aria-labelledby="individual-radios"></a></span></h2> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Individual radios&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;some-radios&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span>Option A<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;some-radios&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;B&quot;</span>&gt;</span>Option B<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio.vue --&gt;</span></pre></div><h2 id="grouped-radios" class="bv-no-focus-ring"><span class="bd-content-title">Grouped radios<a class="anchorjs-link" href="#grouped-radios" aria-labelledby="grouped-radios"></a></span></h2> <p>The individual radio inputs in <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code> can be specified via the <code class="text-nowrap" translate="no">options</code> prop, or via manual placement of the <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> sub component. When using manually placed <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> components within a <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code>, they will inherit most props and the v-model from the <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Radios using options&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;radio-group-1&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio-options&quot;</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Radios using sub-components&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;radio-group-2&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio-sub-component&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>Toggle this custom radio<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>Or toggle this other custom radio<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;third&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>This one is Disabled<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;{ fourth: 4 }&quot;</span>&gt;</span>This is the 4th radio<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;first&#x27;</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Toggle this custom radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;first&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Or toggle this other custom radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;second&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This one is Disabled&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;third&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;This is the 4th radio&#x27;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">fourth</span>: <span class="hljs-number">4</span> } }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-group.vue --&gt;</span></pre></div><p>Feel free to mix and match <code class="text-nowrap" translate="no">options</code> prop and <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> in <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code>. Manually placed <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> inputs will appear <em>below</em> any radio inputs generated by the <code class="text-nowrap" translate="no">options</code> prop. To have them appear <em>above</em> the inputs generated by <code class="text-nowrap" translate="no">options</code>, place them in the named slot <code class="text-nowrap" translate="no">first</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Radios using options and slots&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;radio-slots&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio-options-slots&quot;</span>\n      &gt;</span>\n        <span class="hljs-comment">&lt;!-- Radios in this slot will appear first --&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">first</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>Toggle this custom radio from slot first<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n        <span class="hljs-comment">&lt;!-- Radios in the default slot will appear after any option generated radios --&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;{ fourth: 4 }&quot;</span>&gt;</span>This is the 4th radio<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;fifth&quot;</span>&gt;</span>This is the 5th radio<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Or toggle this other custom radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;second&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Third radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;third&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-group-slot.vue --&gt;</span></pre></div><h2 id="radio-group-options-array" class="bv-no-focus-ring"><span class="bd-content-title">Radio group options array<a class="anchorjs-link" href="#radio-group-options-array" aria-labelledby="radio-group-options-array"></a></span></h2> <p><code class="text-nowrap" translate="no">options</code> can be an array of strings or objects. Available fields:</p> <ul> <li><strong><code class="text-nowrap" translate="no">value</code></strong> The selected value which will be set on <code class="text-nowrap" translate="no">v-model</code></li> <li><strong><code class="text-nowrap" translate="no">disabled</code></strong> Disables item for selection</li> <li><strong><code class="text-nowrap" translate="no">text</code></strong> Display text, or <strong><code class="text-nowrap" translate="no">html</code></strong> Display basic inline html</li> </ul> <p><code class="text-nowrap" translate="no">value</code> can be a string, number, or simple object. Avoid using complex types in values.</p> <p>If both <code class="text-nowrap" translate="no">html</code> and <code class="text-nowrap" translate="no">text</code> are provided, <code class="text-nowrap" translate="no">html</code> will take precedence. Only basic/native HTML is supported in the <code class="text-nowrap" translate="no">html</code> field (components will not work). Note that not all browsers will render inline html (i.e. <code class="text-nowrap" translate="no">&lt;i&gt;</code>, <code class="text-nowrap" translate="no">&lt;strong&gt;</code>, etc.) inside <code class="text-nowrap" translate="no">&lt;option&gt;</code> elements of a <code class="text-nowrap" translate="no">&lt;select&gt;</code>.</p> <p class="alert alert-danger"> <strong>Be cautious</strong> of placing user supplied content in the <code class="notranslate" translate="no">html</code> field, as it may make you vulnerable to <a class="alert-link" href="https://en.wikipedia.org/wiki/Cross-site_scripting"> <abbr title="Cross Site Scripting Attacks">XSS attacks</abbr></a>, if you do not first <a class="alert-link" href="https://en.wikipedia.org/wiki/HTML_sanitization">sanitize</a> the user supplied string. </p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> options = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>]</pre></div><p>If an array entry is a string, it will be used for both the generated <code class="text-nowrap" translate="no">value</code> and <code class="text-nowrap" translate="no">text</code> fields.</p> <p>You can mix using strings and <a href="#options-as-an-array-of-objects" class="font-weight-bold">objects</a> in the array.</p> <p>Internally, BootstrapVue will convert the above array to the following array (the <a href="#options-as-an-array-of-objects" class="font-weight-bold">array of objects</a>) format:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> }\n]</pre></div><h3 id="options-as-an-array-of-objects" class="bv-no-focus-ring"><span class="bd-content-title">Options as an array of objects<a class="anchorjs-link" href="#options-as-an-array-of-objects" aria-labelledby="options-as-an-array-of-objects"></a></span></h3> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 1&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;first&#x27;</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 2&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;second&#x27;</span> },\n  { <span class="hljs-attr">html</span>: <span class="hljs-string">&#x27;&lt;b&gt;Item&lt;/b&gt; 3&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;third&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 4&#x27;</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 5&#x27;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-literal">true</span> } }\n]</pre></div><p>If <code class="text-nowrap" translate="no">value</code> is missing, then <code class="text-nowrap" translate="no">text</code> will be used as both the <code class="text-nowrap" translate="no">value</code> and <code class="text-nowrap" translate="no">text</code> fields. If you use the <code class="text-nowrap" translate="no">html</code> property, you <strong>must</strong> supply a <code class="text-nowrap" translate="no">value</code> property.</p> <p>Internally, BootstrapVue will convert the above array to the following array (the <a href="#options-as-an-array-of-objects" class="font-weight-bold">array of objects</a>) format:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 1&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 2&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;second&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">html</span>: <span class="hljs-string">&#x27;&lt;b&gt;Item&lt;/b&gt; 3&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;third&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 4&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Item 4&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Item 5&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> }\n]</pre></div><h3 id="changing-the-option-field-names" class="bv-no-focus-ring"><span class="bd-content-title">Changing the option field names<a class="anchorjs-link" href="#changing-the-option-field-names" aria-labelledby="changing-the-option-field-names"></a></span></h3> <p>If you want to customize the field property names (for example using <code class="text-nowrap" translate="no">name</code> field for display <code class="text-nowrap" translate="no">text</code>) you can easily change them by setting the <code class="text-nowrap" translate="no">text-field</code>, <code class="text-nowrap" translate="no">html-field</code>, <code class="text-nowrap" translate="no">value-field</code>, and <code class="text-nowrap" translate="no">disabled-field</code> props to a string that contains the property name you would like to use:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n      <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>\n      <span class="hljs-attr">value-field</span>=<span class="hljs-string">&quot;item&quot;</span>\n      <span class="hljs-attr">text-field</span>=<span class="hljs-string">&quot;name&quot;</span>\n      <span class="hljs-attr">disabled-field</span>=<span class="hljs-string">&quot;notEnabled&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;A&#x27;</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Option A&#x27;</span> },\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Option B&#x27;</span> },\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Option C&#x27;</span>, <span class="hljs-attr">notEnabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">item</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Option D&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-group-options-fields.vue --&gt;</span></pre></div><h2 id="radio-value-and-v-model" class="bv-no-focus-ring"><span class="bd-content-title">Radio value and v-model<a class="anchorjs-link" href="#radio-value-and-v-model" aria-labelledby="radio-value-and-v-model"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> components do not have a value by default. You must explicitly supply a value via the <code class="text-nowrap" translate="no">value</code> prop on <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code>. This value will be sent to the <code class="text-nowrap" translate="no">v-model</code> when the radio is checked.</p> <p>The <code class="text-nowrap" translate="no">v-model</code> of both <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code> binds to the <code class="text-nowrap" translate="no">checked</code> prop. To pre-check a radio, you must set the <code class="text-nowrap" translate="no">v-model</code> value to the one of the radio&#39;s value (i.e. must match the value of specified on one of the the radio&#39;s <code class="text-nowrap" translate="no">value</code> prop). Do not use the <code class="text-nowrap" translate="no">checked</code> prop directly. Each radio in a radio group <em>must</em> have a unique value.</p> <p>Radios support values of many types, such as a <code class="text-nowrap" translate="no">string</code>, <code class="text-nowrap" translate="no">boolean</code>, <code class="text-nowrap" translate="no">number</code>, or a plain <code class="text-nowrap" translate="no">object</code>.</p> <h2 id="inline-or-stacked-radios" class="bv-no-focus-ring"><span class="bd-content-title">Inline or stacked radios<a class="anchorjs-link" href="#inline-or-stacked-radios" aria-labelledby="inline-or-stacked-radios"></a></span></h2> <p>By default <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code> generates inline radio inputs, while <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> generates stacked radios. Set the prop <code class="text-nowrap" translate="no">stacked</code> on <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code> to make the radios appear one over the other, or when using radios not in a group, set the <code class="text-nowrap" translate="no">inline</code> prop on <code class="text-nowrap" translate="no">b-form-radio</code> to true to render them inline.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Inline radios (default)&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio-inline&quot;</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Stacked radios&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radios-stacked&quot;</span>\n        <span class="hljs-attr">stacked</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;first&#x27;</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;First radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;first&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Second radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;second&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Third radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;third&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-stacked.vue --&gt;</span></pre></div><h2 id="control-sizing" class="bv-no-focus-ring"><span class="bd-content-title">Control sizing<a class="anchorjs-link" href="#control-sizing" aria-labelledby="control-sizing"></a></span></h2> <p>Use the <code class="text-nowrap" translate="no">size</code> prop to control the size of the radio. The default size is medium. Supported size values are <code class="text-nowrap" translate="no">sm</code> (small) and <code class="text-nowrap" translate="no">lg</code> (large).</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio-size&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>Small<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio-size&quot;</span>&gt;</span>Default<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio-size&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span>&gt;</span>Large<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-radio-sizes.vue --&gt;</span></pre></div><p>Sizes can be set on individual <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> components, or inherited from the <code class="text-nowrap" translate="no">size</code> setting of <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code>.</p> <p><strong>Note:</strong> Bootstrap v4.x does not natively support sizes for the custom radio control. However, BootstrapVue includes custom SCSS/CSS that adds support for sizing the custom radios.</p> <h2 id="button-style-radios" class="bv-no-focus-ring"><span class="bd-content-title">Button style radios<a class="anchorjs-link" href="#button-style-radios" aria-labelledby="button-style-radios"></a></span></h2> <p>Render radios with the look of buttons by setting the prop <code class="text-nowrap" translate="no">buttons</code> to <code class="text-nowrap" translate="no">true</code> on <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code>. Set the button variant by setting the <code class="text-nowrap" translate="no">button-variant</code> prop to one of the standard Bootstrap button variants (see <a href="/docs/components/button" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-button&gt;</code></a> for supported variants). The default <code class="text-nowrap" translate="no">button-variant</code> is <code class="text-nowrap" translate="no">secondary</code>.</p> <p>The <code class="text-nowrap" translate="no">buttons</code> prop has precedence over <code class="text-nowrap" translate="no">plain</code>, and <code class="text-nowrap" translate="no">button-variant</code> has no effect if <code class="text-nowrap" translate="no">buttons</code> is not set.</p> <p>Button style radios will have the class <code class="text-nowrap" translate="no">.active</code> automatically applied to their label when they are in the checked state.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Button style radios&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn-radios-1&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radios-btn-default&quot;</span>\n        <span class="hljs-attr">buttons</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Button style radios with outline-primary variant and size lg&quot;</span>\n      <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn-radios-2&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">button-variant</span>=<span class="hljs-string">&quot;outline-primary&quot;</span>\n        <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio-btn-outline&quot;</span>\n        <span class="hljs-attr">buttons</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Stacked button style radios&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn-radios-3&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio-btn-stacked&quot;</span>\n        <span class="hljs-attr">buttons</span>\n        <span class="hljs-attr">stacked</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;radio1&#x27;</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Radio 1&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;radio1&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Radio 3&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;radio2&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Radio 3 (disabled)&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;radio3&#x27;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Radio 4&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;radio4&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-buttons.vue --&gt;</span></pre></div><h2 id="non-custom-style-radio-inputs-plain" class="bv-no-focus-ring"><span class="bd-content-title">Non-custom style radio inputs (plain)<a class="anchorjs-link" href="#non-custom-style-radio-inputs-plain" aria-labelledby="non-custom-style-radio-inputs-plain"></a></span></h2> <p>You can have <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code> render a browser native-styled radio input by setting the <code class="text-nowrap" translate="no">plain</code> prop.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Plain inline radios&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plain-inline&quot;</span>\n        <span class="hljs-attr">plain</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Plain stacked radios&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plain-stacked&quot;</span>\n        <span class="hljs-attr">plain</span>\n        <span class="hljs-attr">stacked</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;first&#x27;</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;First radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;first&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Second radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;second&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Third radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;third&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-plain.vue --&gt;</span></pre></div><p><strong>Note:</strong> <code class="text-nowrap" translate="no">plain</code> will have no effect if <code class="text-nowrap" translate="no">buttons</code>/<code class="text-nowrap" translate="no">button</code> is set.</p> <h2 id="required-constraint" class="bv-no-focus-ring"><span class="bd-content-title">Required constraint<a class="anchorjs-link" href="#required-constraint" aria-labelledby="required-constraint"></a></span></h2> <p>When using individual <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> components (not in a <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code>), and you want the radio(s) to be <code class="text-nowrap" translate="no">required</code> in your form, you <strong>must</strong> provide a <code class="text-nowrap" translate="no">name</code> on each <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> in order for the required constraint to work. All <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> components tied to the same <code class="text-nowrap" translate="no">v-model</code> <strong>must</strong> have the same <code class="text-nowrap" translate="no">name</code>.</p> <p>The <code class="text-nowrap" translate="no">name</code> is required in order for Assistive Technologies (such as screen readers, and keyboard only users) to know which radios belong to the same form variable (the name also automatically enables native browser keyboard navigation), hence <code class="text-nowrap" translate="no">required</code> will only work if <code class="text-nowrap" translate="no">name</code> is set. <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code> will automatically generate a unique input name if one is not provided on the group.</p> <h2 id="autofocus" class="bv-no-focus-ring"><span class="bd-content-title">Autofocus<a class="anchorjs-link" href="#autofocus" aria-labelledby="autofocus"></a></span></h2> <p>When the <code class="text-nowrap" translate="no">autofocus</code> prop is set on <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code>, the input will be auto-focused when it is inserted (i.e. <strong>mounted</strong>) into the document or re-activated when inside a Vue <code class="text-nowrap" translate="no">&lt;keep-alive&gt;</code> component. Note that this prop <strong>does not</strong> set the <code class="text-nowrap" translate="no">autofocus</code> attribute on the input, nor can it tell when the input becomes visible.</p> <h2 id="contextual-states" class="bv-no-focus-ring"><span class="bd-content-title">Contextual states<a class="anchorjs-link" href="#contextual-states" aria-labelledby="contextual-states"></a></span></h2> <p>Bootstrap includes validation styles for <code class="text-nowrap" translate="no">valid</code> and <code class="text-nowrap" translate="no">invalid</code> states on most form controls.</p> <p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p> <ul> <li><code class="text-nowrap" translate="no">false</code> (denotes invalid state) is great for when there&#39;s a blocking or required field. A user must fill in this field properly to submit the form.</li> <li><code class="text-nowrap" translate="no">true</code> (denotes valid state) is ideal for situations when you have per-field validation throughout a form and want to encourage a user through the rest of the fields.</li> <li><code class="text-nowrap" translate="no">null</code> Displays no validation state (neither valid nor invalid)</li> </ul> <p>To apply one of the contextual state icons on <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code>, set the <code class="text-nowrap" translate="no">state</code> prop to <code class="text-nowrap" translate="no">false</code> (for invalid), <code class="text-nowrap" translate="no">true</code> (for valid), or <code class="text-nowrap" translate="no">null</code> (no validation state).</p> <p><strong>Note:</strong> Contextual state is not supported for radios rendered in buttons mode.</p> <h3 id="contextual-state-with-feedback-example" class="bv-no-focus-ring"><span class="bd-content-title">Contextual state with feedback example<a class="anchorjs-link" href="#contextual-state-with-feedback-example" aria-labelledby="contextual-state-with-feedback-example"></a></span></h3> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio-validation&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-invalid-feedback</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;</span>Please select one<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-invalid-feedback</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-valid-feedback</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;</span>Thank you<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-valid-feedback</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;First radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;first&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Second radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;second&#x27;</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Third radio&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;third&#x27;</span> }\n        ]\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-built_in">this</span>.value)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-validation.vue --&gt;</span></pre></div><h3 id="conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users" class="bv-no-focus-ring"><span class="bd-content-title">Conveying contextual validation state to assistive technologies and colorblind users<a class="anchorjs-link" href="#conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users" aria-labelledby="conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users"></a></span></h3> <p>Using these contextual states to denote the state of a form control only provides a visual, color-based indication, which will not be conveyed to users of assistive technologies - such as screen readers - or to colorblind users.</p> <p>Ensure that an alternative indication of state is also provided. For instance, you could include a hint about state in the form control&#39;s <code class="text-nowrap" translate="no">&lt;label&gt;</code> text itself, or by providing an additional help text block (i.e. <code class="text-nowrap" translate="no">&lt;b-form-invalid-feedback&gt;</code>). Specifically for assistive technologies, invalid form controls can also be assigned an <code class="text-nowrap" translate="no">aria-invalid=&quot;true&quot;</code> attribute (see below).</p> <h3 id="aria-aria-invalid-attribute" class="bv-no-focus-ring"><span class="bd-content-title">ARIA <code class="text-nowrap" translate="no">aria-invalid</code> attribute<a class="anchorjs-link" href="#aria-aria-invalid-attribute" aria-labelledby="aria-aria-invalid-attribute"></a></span></h3> <p>When <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code> has an invalid contextual state (i.e. state = <code class="text-nowrap" translate="no">false</code>) you may also want to set the <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code> prop <code class="text-nowrap" translate="no">aria-invalid</code> to <code class="text-nowrap" translate="no">true</code>.</p> <p>Supported <code class="text-nowrap" translate="no">aria-invalid</code> values are:</p> <ul> <li><code class="text-nowrap" translate="no">false</code> (default) No errors detected</li> <li><code class="text-nowrap" translate="no">true</code> The value has failed validation.</li> </ul> <p><code class="text-nowrap" translate="no">aria-invalid</code> is automatically set to <code class="text-nowrap" translate="no">true</code> if the <code class="text-nowrap" translate="no">state</code> prop is <code class="text-nowrap" translate="no">false</code>.</p>'}}}]);