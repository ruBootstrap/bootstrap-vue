(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{476:function(n,t){n.exports={baseTOC:{top:"#popover",title:"Popover",toc:[{href:"#overview",label:"Overview"},{href:"#target",label:"Target"},{href:"#positioning",label:"Positioning"},{href:"#triggers",label:"Triggers",toc:[{href:"#caveats-with-focus-trigger-on-button-elements",label:"Caveats with focus trigger on &lt;button&gt; elements"},{href:"#dismiss-on-next-click-self-dismissing",label:"Dismiss on next click (self-dismissing)"}]},{href:"#b-popover-component-basic-usage",label:"&lt;b-popover&gt; Component basic usage",toc:[{href:"#component-options-via-props",label:"Component options via props"},{href:"#variants-and-custom-class",label:"Variants and custom class"},{href:"#programmatically-show-and-hide-popover",label:"Programmatically show and hide popover"},{href:"#programmatically-disabling-popover",label:"Programmatically disabling popover"}]},{href:"#v-b-popover-directive-usage",label:"v-b-popover Directive usage"},{href:"#advanced-b-popover-usage-with-reactive-content",label:"Advanced &lt;b-popover&gt; usage with reactive content"},{href:"#global-root-instance-events",label:"&#39;Global&#39; $root instance events",toc:[{href:"#hiding-and-showing-popovers-via-root-events",label:"Hiding and showing popovers via $root events"},{href:"#disabling-and-enabling-popovers-via-root-events",label:"Disabling and enabling popovers via $root events"},{href:"#listening-to-popover-changes-via-root-events",label:"Listening to popover changes via $root events"}]},{href:"#accessibility",label:"Accessibility",toc:[{href:"#making-popovers-work-for-keyboard-and-assistive-technology-users",label:"Making popovers work for keyboard and assistive technology users"}]}]},titleLead:'<h1 id="popover" class="bv-no-focus-ring"><span class="bd-content-title">Popover</span></h1> <p class="bd-lead">The Popover feature, which provides a tooltip-like behavior, can be easily applied to any interactive element via the <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> component or <a href="/docs/directives/popover" class="font-weight-bold"><code class="text-nowrap" translate="no">v-b-popover</code></a> directive.</p>',body:'<div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center my-3&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.top</span>=<span class="hljs-string">&quot;&#x27;I am popover directive content!&#x27;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Popover Title&quot;</span>&gt;</span>\n    Hover Me\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-target-1&quot;</span>&gt;</span>\n    Hover Me\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-target-1&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;hover&quot;</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>Popover Title<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    I am popover <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>component<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> content!\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover.vue --&gt;</span></pre></div><h2 id="overview" class="bv-no-focus-ring"><span class="bd-content-title">Overview<a class="anchorjs-link" href="#overview" aria-labelledby="overview"></a></span></h2> <p>Things to know when using popover component:</p> <ul> <li>Popovers rely on the 3rd party library <a href="https://popper.js.org/" target="_blank" rel="noopener">Popper.js</a> for positioning.</li> <li>Popovers require BootstrapVue&#39;s custom SCSS/CSS in order to function correctly, and for variants.</li> <li>Specify <code class="text-nowrap" translate="no">container</code> as <code class="text-nowrap" translate="no">null</code> (default, appends to <code class="text-nowrap" translate="no">&lt;body&gt;</code>) to avoid rendering problems in more complex components (like input groups, button groups, etc.). You can use <code class="text-nowrap" translate="no">container</code> to optionally specify a different element to append the rendered popover to.</li> <li>Triggering popovers on hidden elements will not work.</li> <li>Popovers for <code class="text-nowrap" translate="no">disabled</code> elements must be triggered on a wrapper element.</li> <li>When triggered from hyperlinks that span multiple lines, popovers will be centered. Use <code class="text-nowrap" translate="no">white-space: nowrap;</code> on your <code class="text-nowrap" translate="no">&lt;a&gt;</code>s, <code class="text-nowrap" translate="no">&lt;b-link&gt;</code>s and <code class="text-nowrap" translate="no">&lt;router-link&gt;</code>s to avoid this behavior.</li> </ul> <h2 id="target" class="bv-no-focus-ring"><span class="bd-content-title">Target<a class="anchorjs-link" href="#target" aria-labelledby="target"></a></span></h2> <p>The target is the <em>trigger</em> element (or component) that will trigger the popover. The target is specified via the <code class="text-nowrap" translate="no">target</code> prop, and can be any of the following:</p> <ul> <li>A string identifying the ID of the trigger element (or ID of the root element of a component)</li> <li>A reference (ref) to an <code class="text-nowrap" translate="no">HTMLElement</code> or an <code class="text-nowrap" translate="no">SVGElement</code> (e.g. via <code class="text-nowrap" translate="no">this.$refs.refName</code>)</li> <li>A reference (ref) to a component that has either an <code class="text-nowrap" translate="no">HTMLElement</code> or <code class="text-nowrap" translate="no">SVGElement</code> as its root element (e.g. via <code class="text-nowrap" translate="no">this.$refs.refName</code>)</li> <li>A function (callback) that returns a reference to an <code class="text-nowrap" translate="no">HTMLElement</code> or <code class="text-nowrap" translate="no">SVGElement</code></li> </ul> <p>For more information on references, see the official <a href="https://vuejs.org/v2/api/#vm-refs" target="_blank" rel="noopener">Vue documentation</a>.</p> <p><strong>Notes:</strong></p> <p>The target element <strong>must</strong> exist in the document before <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> is mounted. If the target element is not found during mount, the popover will never open. Always place your <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> component lower in the DOM than your target element. This rule also applies if a callback function is used as target element, since that callback is called only once on mount.</p> <p><code class="text-nowrap" translate="no">HTMLElement</code> refers to standard HTML elements such as <code class="text-nowrap" translate="no">&lt;div&gt;</code>, <code class="text-nowrap" translate="no">&lt;button&gt;</code>, etc, while <code class="text-nowrap" translate="no">SVGElement</code> refers to <code class="text-nowrap" translate="no">&lt;svg&gt;</code> or supported child elements of SVGs.</p> <h2 id="positioning" class="bv-no-focus-ring"><span class="bd-content-title">Positioning<a class="anchorjs-link" href="#positioning" aria-labelledby="positioning"></a></span></h2> <p>Twelve options are available for positioning: <code class="text-nowrap" translate="no">top</code>, <code class="text-nowrap" translate="no">topleft</code>, <code class="text-nowrap" translate="no">topright</code>, <code class="text-nowrap" translate="no">right</code>, <code class="text-nowrap" translate="no">righttop</code>, <code class="text-nowrap" translate="no">rightbottom</code>, <code class="text-nowrap" translate="no">bottom</code>, <code class="text-nowrap" translate="no">bottomleft</code>, <code class="text-nowrap" translate="no">bottomright</code>, <code class="text-nowrap" translate="no">left</code>, <code class="text-nowrap" translate="no">lefttop</code>, and <code class="text-nowrap" translate="no">leftbottom</code> aligned. Positioning is relative to the trigger element.</p> <div class="bd-example bd-example-popover-static"> <div class="popover b-popover bs-popover-top bs-popover-top-docs"> <div class="arrow" style="left:calc(50% - 8px)"></div> <h3 class="popover-header">Popover top</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-top bs-popover-top-docs"> <div class="arrow" style="right:0"></div> <h3 class="popover-header">Popover topleft</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-top bs-popover-top-docs"> <div class="arrow" style="left:0"></div> <h3 class="popover-header">Popover topright</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-right bs-popover-right-docs"> <div class="arrow" style="top:calc(50% - 4px)"></div> <h3 class="popover-header">Popover right</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-right bs-popover-right-docs"> <div class="arrow" style="bottom:0"></div> <h3 class="popover-header">Popover righttop</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-right bs-popover-right-docs"> <div class="arrow" style="top:0"></div> <h3 class="popover-header">Popover rightbottom</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs"> <div class="arrow" style="left:calc(50% - 8px)"></div> <h3 class="popover-header">Popover bottom</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs"> <div class="arrow" style="right:0"></div> <h3 class="popover-header">Popover bottomleft</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs"> <div class="arrow" style="left:0"></div> <h3 class="popover-header">Popover bottomright</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-left bs-popover-left-docs"> <div class="arrow" style="top:calc(50% - 4px)"></div> <h3 class="popover-header">Popover left</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-left bs-popover-left-docs"> <div class="arrow" style="bottom:0"></div> <h3 class="popover-header">Popover lefttop</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-left bs-popover-left-docs"> <div class="arrow" style="top:0"></div> <h3 class="popover-header">Popover leftbottom</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="clearfix"></div> </div> <p>Refer to the <a href="/docs/directives/popover/#positioning" class="font-weight-bold">Popover directive</a> documentation for live examples of positioning.</p> <h2 id="triggers" class="bv-no-focus-ring"><span class="bd-content-title">Triggers<a class="anchorjs-link" href="#triggers" aria-labelledby="triggers"></a></span></h2> <p>Popovers can be triggered (opened/closed) via any combination of <code class="text-nowrap" translate="no">click</code>, <code class="text-nowrap" translate="no">hover</code> and <code class="text-nowrap" translate="no">focus</code>. The default trigger is <code class="text-nowrap" translate="no">click</code>. Or a trigger of <code class="text-nowrap" translate="no">manual</code> can be specified, where the popover can only be opened or closed <a href="#programmatically-disabling-popover" class="font-weight-bold">programmatically</a>.</p> <p>If a popover has more than one trigger, then all triggers must be cleared before the popover will close. I.e. if a popover has the trigger <code class="text-nowrap" translate="no">focus click</code>, and it was opened by <code class="text-nowrap" translate="no">focus</code>, and the user then clicks the trigger element, they must click it again <strong>and</strong> move focus to close the popover.</p> <h3 id="caveats-with-focus-trigger-on-button-elements" class="bv-no-focus-ring"><span class="bd-content-title">Caveats with <code class="text-nowrap" translate="no">focus</code> trigger on <code class="text-nowrap" translate="no">&lt;button&gt;</code> elements<a class="anchorjs-link" href="#caveats-with-focus-trigger-on-button-elements" aria-labelledby="caveats-with-focus-trigger-on-button-elements"></a></span></h3> <p>For proper cross-browser and cross-platform behavior when using only the <code class="text-nowrap" translate="no">focus</code> trigger, you must use an element that renders the <code class="text-nowrap" translate="no">&lt;a&gt;</code> tag, not the <code class="text-nowrap" translate="no">&lt;button&gt;</code> tag, and you also must include a <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code> attribute.</p> <p>The following will generate an <code class="text-nowrap" translate="no">&lt;a&gt;</code> that looks like a button:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>\n  <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>\n  <span class="hljs-attr">v-b-popover.focus</span>=<span class="hljs-string">&quot;&#x27;Popover content&#x27;&quot;</span>\n  <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Popover title&quot;</span>\n&gt;</span>\n  Link button with popover directive\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link-button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>\n  Link button with popover component\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;link-button&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Popover title&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;focus&quot;</span>&gt;</span>\n  Popover content\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span></pre></div><h3 id="dismiss-on-next-click-self-dismissing" class="bv-no-focus-ring"><span class="bd-content-title">Dismiss on next click (self-dismissing)<a class="anchorjs-link" href="#dismiss-on-next-click-self-dismissing" aria-labelledby="dismiss-on-next-click-self-dismissing"></a></span></h3> <p>Use the <code class="text-nowrap" translate="no">focus</code> trigger by itself to dismiss popovers on the next click that the user makes. <code class="text-nowrap" translate="no">focus</code> also makes the popover activate on both <code class="text-nowrap" translate="no">focus</code> and <code class="text-nowrap" translate="no">click</code> (as a click makes the element receive focus on most browsers, assuming it is in the tab sequence of the page).</p> <p>You can, however, specify your trigger as <code class="text-nowrap" translate="no">click blur</code>, which will make only a click activate the popover, and either a click on the element, <em>or</em> losing focus to another element or part of the document will close the popover.</p> <p>The special <code class="text-nowrap" translate="no">blur</code> trigger <strong>must</strong> be used in combination with the <code class="text-nowrap" translate="no">click</code> trigger.</p> <h2 id="b-popover-component-basic-usage" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> Component basic usage<a class="anchorjs-link" href="#b-popover-component-basic-usage" aria-labelledby="b-popover-component-basic-usage"></a></span></h2> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-3&quot;</span>&gt;</span>Placement<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>\n        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;placement in placements&quot;</span>\n        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;placement&quot;</span>\n        <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;4&quot;</span>\n        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4 text-center&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;`popover-1-${placement}`&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>{{ placement }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n          <span class="hljs-attr">:target</span>=<span class="hljs-string">&quot;`popover-1-${placement}`&quot;</span>\n          <span class="hljs-attr">:placement</span>=<span class="hljs-string">&quot;placement&quot;</span>\n          <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Popover!&quot;</span>\n          <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;hover focus&quot;</span>\n          <span class="hljs-attr">:content</span>=<span class="hljs-string">&quot;`Placement ${placement}`&quot;</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-3&quot;</span>&gt;</span>Content via properties or slots<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4 text-center&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-2&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Using properties<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n          <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-2&quot;</span>\n          <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Prop Examples&quot;</span>\n          <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;hover focus&quot;</span>\n          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Embedding content using properties is easy&quot;</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4 text-center&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-3&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Using slots<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-3&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;hover focus&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>Content via Slots<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n          Embedding content <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span>&gt;</span>using slots<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> affords you\n          <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>greater <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>control.<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> and basic HTML support.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">placements</span>: [\n          <span class="hljs-string">&#x27;topright&#x27;</span>,\n          <span class="hljs-string">&#x27;top&#x27;</span>,\n          <span class="hljs-string">&#x27;topleft&#x27;</span>,\n          <span class="hljs-string">&#x27;bottomright&#x27;</span>,\n          <span class="hljs-string">&#x27;bottom&#x27;</span>,\n          <span class="hljs-string">&#x27;bottomleft&#x27;</span>,\n          <span class="hljs-string">&#x27;righttop&#x27;</span>,\n          <span class="hljs-string">&#x27;right&#x27;</span>,\n          <span class="hljs-string">&#x27;lefttop&#x27;</span>,\n          <span class="hljs-string">&#x27;rightbottom&#x27;</span>,\n          <span class="hljs-string">&#x27;left&#x27;</span>,\n          <span class="hljs-string">&#x27;leftbottom&#x27;</span>\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-placements.vue --&gt;</span></pre></div><h3 id="component-options-via-props" class="bv-no-focus-ring"><span class="bd-content-title">Component options via props<a class="anchorjs-link" href="#component-options-via-props" aria-labelledby="component-options-via-props"></a></span></h3> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Prop</th> <th>Default</th> <th>Description</th> <th>Supported values</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">target</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Element string ID, or a reference to an element or component, that you want to trigger the popover. <strong>Required</strong></td> <td>Any valid in-document unique element ID, or in-document element/component reference</td> </tr> <tr> <td><code class="text-nowrap" translate="no">title</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Popover title (text only, no HTML). If HTML or reactivity is required, use the <code class="text-nowrap" translate="no">title</code> named slot</td> <td>Plain text</td> </tr> <tr> <td><code class="text-nowrap" translate="no">content</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Popover content (text only, no HTML). If HTML or reactivity is required, use the default slot</td> <td>Plain text</td> </tr> <tr> <td><code class="text-nowrap" translate="no">placement</code></td> <td><code class="text-nowrap" translate="no">&#39;right&#39;</code></td> <td>Positioning of the popover, relative to the trigger element.</td> <td><code class="text-nowrap" translate="no">auto</code>, <code class="text-nowrap" translate="no">top</code>, <code class="text-nowrap" translate="no">bottom</code>, <code class="text-nowrap" translate="no">left</code>, <code class="text-nowrap" translate="no">right</code>, <code class="text-nowrap" translate="no">topleft</code>, <code class="text-nowrap" translate="no">topright</code>, <code class="text-nowrap" translate="no">bottomleft</code>, <code class="text-nowrap" translate="no">bottomright</code>, <code class="text-nowrap" translate="no">lefttop</code>, <code class="text-nowrap" translate="no">leftbottom</code>, <code class="text-nowrap" translate="no">righttop</code>, <code class="text-nowrap" translate="no">rightbottom</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">fallback-placement</code></td> <td><code class="text-nowrap" translate="no">&#39;flip&#39;</code></td> <td>Auto-flip placement behaviour of the popover, relative to the trigger element.</td> <td><code class="text-nowrap" translate="no">flip</code>, <code class="text-nowrap" translate="no">clockwise</code>, <code class="text-nowrap" translate="no">counterclockwise</code>, or an array of valid placements evaluated from left to right</td> </tr> <tr> <td><code class="text-nowrap" translate="no">disabled</code></td> <td><code class="text-nowrap" translate="no">false</code></td> <td>Programmatic control of the Popover display state. Recommended to use with <a href="https://vuejs.org/v2/guide/components.html#sync-Modifier" target="_blank" rel="noopener">sync modifier</a>.</td> <td><code class="text-nowrap" translate="no">true</code>, <code class="text-nowrap" translate="no">false</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">triggers</code></td> <td><code class="text-nowrap" translate="no">&#39;click&#39;</code></td> <td>Space separated list of event(s), which will trigger open/close of popover using built-in handling</td> <td><code class="text-nowrap" translate="no">hover</code>, <code class="text-nowrap" translate="no">focus</code>, <code class="text-nowrap" translate="no">click</code>. Note <code class="text-nowrap" translate="no">blur</code> is a special use case to close popover on next click.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">no-fade</code></td> <td><code class="text-nowrap" translate="no">false</code></td> <td>Disable fade animation when set to <code class="text-nowrap" translate="no">true</code></td> <td><code class="text-nowrap" translate="no">true</code> or <code class="text-nowrap" translate="no">false</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">delay</code></td> <td><code class="text-nowrap" translate="no">50</code></td> <td>Delay showing and hiding of popover by specified number of milliseconds. Can also be defined as an object in the form of <code class="text-nowrap" translate="no">{ show: 100, hide: 400 }</code> allowing different show and hide delays</td> <td><code class="text-nowrap" translate="no">0</code> and up, integers only.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">offset</code></td> <td><code class="text-nowrap" translate="no">0</code></td> <td>Shift the center of the popover by specified number of pixels. Also affects the position of the popover arrow.</td> <td>Any negative or positive integer</td> </tr> <tr> <td><code class="text-nowrap" translate="no">container</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Element string ID to append rendered popover into. If <code class="text-nowrap" translate="no">null</code> or element not found, popover is appended to <code class="text-nowrap" translate="no">&lt;body&gt;</code> (default)</td> <td>Any valid in-document unique element ID.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">boundary</code></td> <td><code class="text-nowrap" translate="no">&#39;scrollParent&#39;</code></td> <td>The container that the popover will be constrained visually. The default should suffice in most cases, but you may need to change this if your target element is in a small container with overflow scroll</td> <td><code class="text-nowrap" translate="no">&#39;scrollParent&#39;</code> (default), <code class="text-nowrap" translate="no">&#39;viewport&#39;</code>, <code class="text-nowrap" translate="no">&#39;window&#39;</code>, or a reference to an HTML element.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">boundary-padding</code></td> <td><code class="text-nowrap" translate="no">5</code></td> <td>Amount of pixel used to define a minimum distance between the boundaries and the popover. This makes sure the popover always has a little padding between the edges of its container.</td> <td>Any positive number</td> </tr> <tr> <td><code class="text-nowrap" translate="no">variant</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Contextual color variant for the popover</td> <td>Any contextual theme color variant name</td> </tr> <tr> <td><code class="text-nowrap" translate="no">custom-class</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>A custom classname to apply to the popover outer wrapper element</td> <td>A string</td> </tr> <tr> <td><code class="text-nowrap" translate="no">id</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>An ID to use on the popover root element. If none is provided, one will automatically be generated. If you do provide an ID, it <em>must</em> be guaranteed to be unique on the rendered page.</td> <td>A valid unique element ID string</td> </tr> </tbody></table> </div><h3 id="variants-and-custom-class" class="bv-no-focus-ring"><span class="bd-content-title">Variants and custom class<a class="anchorjs-link" href="#variants-and-custom-class" aria-labelledby="variants-and-custom-class"></a></span></h3> <p>BootstrapVue&#39;s popovers support contextual color variants via our custom CSS, via the <code class="text-nowrap" translate="no">variant</code> prop:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-variant&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-variant&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;focus&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>Danger!<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    Danger variant popover\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-variant.vue --&gt;</span></pre></div><p>Bootstrap default theme variants are: <code class="text-nowrap" translate="no">danger</code>, <code class="text-nowrap" translate="no">warning</code>, <code class="text-nowrap" translate="no">success</code>, <code class="text-nowrap" translate="no">primary</code>, <code class="text-nowrap" translate="no">secondary</code>, <code class="text-nowrap" translate="no">info</code>, <code class="text-nowrap" translate="no">light</code>, and <code class="text-nowrap" translate="no">dark</code>. You can change or add additional variants via Bootstrap <a href="/docs/reference/theming" class="font-weight-bold">SCSS variables</a></p> <p>A custom class can be applied to the popover outer wrapper <code class="text-nowrap" translate="no">&lt;div&gt;</code> by using the <code class="text-nowrap" translate="no">custom-class</code> prop:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-button&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;my-button&quot;</span> <span class="hljs-attr">custom-class</span>=<span class="hljs-string">&quot;my-popover-class&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>Popover Title<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    Popover content\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><p><code class="text-nowrap" translate="no">variant</code> and <code class="text-nowrap" translate="no">custom-class</code> are reactive and can be changed while the popover is open.</p> <p>Refer to the <a href="/docs/directives/popover" class="font-weight-bold">popover directive</a> docs on applying variants and custom class to the directive version.</p> <h3 id="programmatically-show-and-hide-popover" class="bv-no-focus-ring"><span class="bd-content-title">Programmatically show and hide popover<a class="anchorjs-link" href="#programmatically-show-and-hide-popover" aria-labelledby="programmatically-show-and-hide-popover"></a></span></h3> <p>You can manually control the visibility of a popover via the syncable Boolean <code class="text-nowrap" translate="no">show</code> prop. Setting it to <code class="text-nowrap" translate="no">true</code> will show the popover, while setting it to <code class="text-nowrap" translate="no">false</code> will hide the popover.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-sync&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>I have a popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span>Toggle Popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-sync&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Popover&quot;</span>&gt;</span>\n        Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-show-sync.vue --&gt;</span></pre></div><p>Programmatic control can also be affected by submitting <code class="text-nowrap" translate="no">&#39;open&#39;</code> and <code class="text-nowrap" translate="no">&#39;close&#39;</code> events to the popover by reference.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-event&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>I have a popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onOpen&quot;</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClose&quot;</span>&gt;</span>Close<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;popover&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-event&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Popover&quot;</span>&gt;</span>\n      Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onOpen</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;open&#x27;</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">onClose</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;close&#x27;</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-show-event.vue --&gt;</span></pre></div><p>To make the popover shown on initial render, simply add the <code class="text-nowrap" translate="no">show</code> prop on <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-open&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">show</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-open&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Popover&quot;</span>&gt;</span>\n    I start <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>open<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-show-open.vue --&gt;</span></pre></div><p>A popover which is opened programmatically via the &#39;show&#39; property or by an event call can only be closed programmatically. Built-in triggers will work inadequately, because trigger event will try to open the popover even though it is already opened.</p> <p>In the below example, when the first Popover is opened with the &#39;open&#39; event, it will take two button clicks to close it. Play with the below demo to understand this. When you desire graceful handling of both programmatic control of the Popover component as well as user interaction triggers, you should disable built-in triggers and handle control yourself as demonstrated by the second Popover.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-manual-1&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Unreliable<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-manual-1&quot;</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">&quot;pop1&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span>\n        I can be stubborn sometimes.\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-manual-2&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;pop2 = !pop2&quot;</span>&gt;</span>\n        Comfortably Numb\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-manual-2&quot;</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">&quot;pop2&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>\n        I do believe it&#x27;s working, good.\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;popOpen&quot;</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;popClose&quot;</span>&gt;</span>Close<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;popToggle&quot;</span>&gt;</span>Toggle<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">pop1</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">pop2</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">popOpen</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.pop1 = <span class="hljs-built_in">this</span>.pop2 = <span class="hljs-literal">true</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">popClose</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.pop1 = <span class="hljs-built_in">this</span>.pop2 = <span class="hljs-literal">false</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">popToggle</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.pop1 = !<span class="hljs-built_in">this</span>.pop1\n        <span class="hljs-built_in">this</span>.pop2 = !<span class="hljs-built_in">this</span>.pop2\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-advanced-caution.vue --&gt;</span></pre></div><p>You can also use <code class="text-nowrap" translate="no">$root</code> events to trigger the showing and hiding of popover(s). See the <strong>Hiding and showing popovers via $root events</strong> section below for details.</p> <h3 id="programmatically-disabling-popover" class="bv-no-focus-ring"><span class="bd-content-title">Programmatically disabling popover<a class="anchorjs-link" href="#programmatically-disabling-popover" aria-labelledby="programmatically-disabling-popover"></a></span></h3> <p>You can disable popover via the syncable Boolean prop <code class="text-nowrap" translate="no">disabled</code> (default value is <code class="text-nowrap" translate="no">false</code>) Setting it to <code class="text-nowrap" translate="no">true</code> will disable the popover. If the popover is currently visible when disabled is set to <code class="text-nowrap" translate="no">false</code>, it will remain visible until it is enabled or programmatically closed. If the popover is disabled/enabled via $root events (see below), your <code class="text-nowrap" translate="no">disabled</code> value will be updated as long as you have provided the <code class="text-nowrap" translate="no">.sync</code> prop modifier.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-disable&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>I have a popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;disabled = !disabled&quot;</span>&gt;</span>\n        {{ disabled ? &#x27;Enable&#x27; : &#x27;Disable&#x27; }} Popover by prop\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;disableByRef&quot;</span>&gt;</span>\n        {{ disabled ? &#x27;Enable&#x27; : &#x27;Disable&#x27; }} Popover by $ref event\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n        <span class="hljs-attr">:disabled.sync</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n        <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-disable&quot;</span>\n        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Popover&quot;</span>\n        <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;popover&quot;</span>\n      &gt;</span>\n        Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">disableByRef</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.disabled) {\n          <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;enable&#x27;</span>)\n        } <span class="hljs-keyword">else</span> {\n          <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;disable&#x27;</span>)\n        }\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-disable.vue --&gt;</span></pre></div><p>Programmatic control can also be affected by submitting <code class="text-nowrap" translate="no">&#39;enable&#39;</code> and <code class="text-nowrap" translate="no">&#39;disable&#39;</code> events to the popover by reference.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-disable-event&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>I have a popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onEnable&quot;</span>&gt;</span>Enable<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onDisable&quot;</span>&gt;</span>Disable<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;popover&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-disable-event&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Popover&quot;</span>&gt;</span>\n      Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onEnable</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;enable&#x27;</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">onDisable</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;disable&#x27;</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-disabled-event.vue --&gt;</span></pre></div><p>When disabled, the popover can be opened programmatically (either via the <code class="text-nowrap" translate="no">show</code> prop, methods or events).</p> <p>You can also use <code class="text-nowrap" translate="no">$root</code> events to trigger disabling and enabling of popover(s). See the <strong>Disabling and enabling popovers via $root events</strong> section below for details.</p> <h2 id="v-b-popover-directive-usage" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">v-b-popover</code> Directive usage<a class="anchorjs-link" href="#v-b-popover-directive-usage" aria-labelledby="v-b-popover-directive-usage"></a></span></h2> <p>Just need quick popovers without too much markup? Use the <a href="/docs/directives/popover" class="font-weight-bold"><code class="text-nowrap" translate="no">v-b-popover</code> directive</a>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.top</span>=<span class="hljs-string">&quot;&#x27;Popover!&#x27;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Title&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Top<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.right</span>=<span class="hljs-string">&quot;&#x27;Popover!&#x27;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Title&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Right<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.left</span>=<span class="hljs-string">&quot;&#x27;Popover!&#x27;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Title&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Left<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.bottom</span>=<span class="hljs-string">&quot;&#x27;Popover!&#x27;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Title&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Bottom<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-directive-placement.vue --&gt;</span></pre></div><p>Refer to the <a href="/docs/directives/popover" class="font-weight-bold"><code class="text-nowrap" translate="no">v-b-popover</code> directive</a> documentation for detailed information on the directive usage.</p> <h2 id="advanced-b-popover-usage-with-reactive-content" class="bv-no-focus-ring"><span class="bd-content-title">Advanced <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> usage with reactive content<a class="anchorjs-link" href="#advanced-b-popover-usage-with-reactive-content" aria-labelledby="advanced-b-popover-usage-with-reactive-content"></a></span></h2> <p>You can even make your <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> content interactive. Just remember not to use the <code class="text-nowrap" translate="no">focus</code> or triggers (use only <code class="text-nowrap" translate="no">click</code>).</p> <p>If you absolutely must use a trigger other than <code class="text-nowrap" translate="no">click</code> (or want to disable closing of the popover when the trigger element is clicked a second time), then you can either:</p> <ul> <li>Listen for the <code class="text-nowrap" translate="no">hide</code> event on the <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> element, and call the <code class="text-nowrap" translate="no">preventDefault()</code> method (when appropriate) on the <code class="text-nowrap" translate="no">BvEvent</code> object passed to your <code class="text-nowrap" translate="no">hide</code> handler;</li> <li>Disable your trigger element (if possible) as soon as the popover begins to open (via the <code class="text-nowrap" translate="no">show</code> event), and re-enable it when appropriate (i.e. via the <code class="text-nowrap" translate="no">hide</code> or <code class="text-nowrap" translate="no">hidden</code> event).</li> </ul> <p>For practical purposes, <strong>interactive content popovers should be minimal</strong>. The maximum width of the popover is hard coded by Bootstrap v4 CSS to <code class="text-nowrap" translate="no">276px</code>. Tall popovers on small screens can be harder to deal with on mobile devices (such as smart-phones).</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-container&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-3&quot;</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Our triggering (target) element --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-reactive-1&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>\n        Reactive Content Using Slots\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Output from the popover interaction --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Returned values:&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;input1Return &amp;&amp; input2Return&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;max-width: 20rem;&quot;</span>&gt;</span>\n        Name: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input1Return }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n        Color: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input2Return }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Our popover title and content render container --&gt;</span>\n    <span class="hljs-comment">&lt;!-- We use placement &#x27;auto&#x27; so popover fits in the best spot on viewport --&gt;</span>\n    <span class="hljs-comment">&lt;!-- We specify the same container as the trigger button, so that popover is close to button --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n      <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-reactive-1&quot;</span>\n      <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;click&quot;</span>\n      <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">&quot;popoverShow&quot;</span>\n      <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;auto&quot;</span>\n      <span class="hljs-attr">container</span>=<span class="hljs-string">&quot;my-container&quot;</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;popover&quot;</span>\n      @<span class="hljs-attr">show</span>=<span class="hljs-string">&quot;onShow&quot;</span>\n      @<span class="hljs-attr">shown</span>=<span class="hljs-string">&quot;onShown&quot;</span>\n      @<span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;onHidden&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClose&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Close&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline-block&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-symbol">&amp;times;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        Interactive Content\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Name&quot;</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;popover-input-1&quot;</span>\n          <span class="hljs-attr">label-cols</span>=<span class="hljs-string">&quot;3&quot;</span>\n          <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;input1state&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-1&quot;</span>\n          <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Enter your name&quot;</span>\n          <span class="hljs-attr">invalid-feedback</span>=<span class="hljs-string">&quot;This field is required&quot;</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input1&quot;</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-input-1&quot;</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;input1&quot;</span>\n            <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;input1state&quot;</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Color&quot;</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;popover-input-2&quot;</span>\n          <span class="hljs-attr">label-cols</span>=<span class="hljs-string">&quot;3&quot;</span>\n          <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;input2state&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-1&quot;</span>\n          <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Pick a color&quot;</span>\n          <span class="hljs-attr">invalid-feedback</span>=<span class="hljs-string">&quot;This field is required&quot;</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-input-2&quot;</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;input2&quot;</span>\n            <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;input2state&quot;</span>\n            <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-alert</span> <span class="hljs-attr">show</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Current Values:<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n          Name: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input1 }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n          Color: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input2 }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-alert</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClose&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>Cancel<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onOk&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Ok<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">input1</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">input1state</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">input2</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">input2state</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [{ <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;- Choose 1 -&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span> }, <span class="hljs-string">&#x27;Red&#x27;</span>, <span class="hljs-string">&#x27;Green&#x27;</span>, <span class="hljs-string">&#x27;Blue&#x27;</span>],\n        <span class="hljs-attr">input1Return</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">input2Return</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">popoverShow</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">watch</span>: {\n      <span class="hljs-function"><span class="hljs-title">input1</span>(<span class="hljs-params">val</span>)</span> {\n        <span class="hljs-keyword">if</span> (val) {\n          <span class="hljs-built_in">this</span>.input1state = <span class="hljs-literal">true</span>\n        }\n      },\n      <span class="hljs-function"><span class="hljs-title">input2</span>(<span class="hljs-params">val</span>)</span> {\n        <span class="hljs-keyword">if</span> (val) {\n          <span class="hljs-built_in">this</span>.input2state = <span class="hljs-literal">true</span>\n        }\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onClose</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.popoverShow = <span class="hljs-literal">false</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">onOk</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.input1) {\n          <span class="hljs-built_in">this</span>.input1state = <span class="hljs-literal">false</span>\n        }\n        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.input2) {\n          <span class="hljs-built_in">this</span>.input2state = <span class="hljs-literal">false</span>\n        }\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.input1 &amp;&amp; <span class="hljs-built_in">this</span>.input2) {\n          <span class="hljs-built_in">this</span>.onClose()\n          <span class="hljs-comment">// Return our popover form results</span>\n          <span class="hljs-built_in">this</span>.input1Return = <span class="hljs-built_in">this</span>.input1\n          <span class="hljs-built_in">this</span>.input2Return = <span class="hljs-built_in">this</span>.input2\n        }\n      },\n      <span class="hljs-function"><span class="hljs-title">onShow</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// This is called just before the popover is shown</span>\n        <span class="hljs-comment">// Reset our popover form variables</span>\n        <span class="hljs-built_in">this</span>.input1 = <span class="hljs-string">&#x27;&#x27;</span>\n        <span class="hljs-built_in">this</span>.input2 = <span class="hljs-string">&#x27;&#x27;</span>\n        <span class="hljs-built_in">this</span>.input1state = <span class="hljs-literal">null</span>\n        <span class="hljs-built_in">this</span>.input2state = <span class="hljs-literal">null</span>\n        <span class="hljs-built_in">this</span>.input1Return = <span class="hljs-string">&#x27;&#x27;</span>\n        <span class="hljs-built_in">this</span>.input2Return = <span class="hljs-string">&#x27;&#x27;</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">onShown</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Called just after the popover has been shown</span>\n        <span class="hljs-comment">// Transfer focus to the first input</span>\n        <span class="hljs-built_in">this</span>.focusRef(<span class="hljs-built_in">this</span>.$refs.input1)\n      },\n      <span class="hljs-function"><span class="hljs-title">onHidden</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Called just after the popover has finished hiding</span>\n        <span class="hljs-comment">// Bring focus back to the button</span>\n        <span class="hljs-built_in">this</span>.focusRef(<span class="hljs-built_in">this</span>.$refs.button)\n      },\n      <span class="hljs-function"><span class="hljs-title">focusRef</span>(<span class="hljs-params">ref</span>)</span> {\n        <span class="hljs-comment">// Some references may be a component, functional component, or plain element</span>\n        <span class="hljs-comment">// This handles that check before focusing, assuming a `focus()` method exists</span>\n        <span class="hljs-comment">// We do this in a double `$nextTick()` to ensure components have</span>\n        <span class="hljs-comment">// updated &amp; popover positioned first</span>\n        <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> {\n            ;(ref.$el || ref).focus()\n          })\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-advanced.vue --&gt;</span></pre></div><h2 id="global-root-instance-events" class="bv-no-focus-ring"><span class="bd-content-title">&#39;Global&#39; $root instance events<a class="anchorjs-link" href="#global-root-instance-events" aria-labelledby="global-root-instance-events"></a></span></h2> <p>Using <code class="text-nowrap" translate="no">$root</code> instance it is possible to emit and listen events somewhere out of a component, where <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> is used. In short, <code class="text-nowrap" translate="no">$root</code> behaves like a global event emitters and listener. Details about <code class="text-nowrap" translate="no">$root</code> instance can be found in <a href="https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Root-Instance" target="_blank" rel="noopener">the official Vue docs</a>.</p> <h3 id="hiding-and-showing-popovers-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Hiding and showing popovers via $root events<a class="anchorjs-link" href="#hiding-and-showing-popovers-via-root-events" aria-labelledby="hiding-and-showing-popovers-via-root-events"></a></span></h3> <p>You can close (hide) <strong>all open popovers</strong> by emitting the <code class="text-nowrap" translate="no">bv::hide::popover</code> event on $root:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::hide::popover&#x27;</span>)</pre></div><p>To close a <strong>specific popover</strong>, pass the trigger element&#39;s <code class="text-nowrap" translate="no">id</code>, or the <code class="text-nowrap" translate="no">id</code> of the popover (if one was provided via the <code class="text-nowrap" translate="no">id</code> prop), as the first argument:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::hide::popover&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>To open (show) a <strong>specific popover</strong>, pass the trigger element&#39;s <code class="text-nowrap" translate="no">id</code>, or the <code class="text-nowrap" translate="no">id</code> of the popover (if one was provided via the <code class="text-nowrap" translate="no">id</code> prop), as the first argument when emitting the <code class="text-nowrap" translate="no">bv::show::popover</code> event:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::show::popover&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>To open all popovers simultaneously, omit the <code class="text-nowrap" translate="no">id</code> argument when emitting the <code class="text-nowrap" translate="no">bv::show::popover</code> event.</p> <p>These events work for both the component <strong>and</strong> directive versions of popover.</p> <p><strong>Note:</strong> <em>The <strong>trigger element</strong> must exist in the DOM and be in a visible state in order for the popover to instantiate and show.</em></p> <h3 id="disabling-and-enabling-popovers-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Disabling and enabling popovers via $root events<a class="anchorjs-link" href="#disabling-and-enabling-popovers-via-root-events" aria-labelledby="disabling-and-enabling-popovers-via-root-events"></a></span></h3> <p>You can disable <strong>all</strong> popovers by emitting the <code class="text-nowrap" translate="no">bv::disable::popover</code> event on $root:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::disable::popover&#x27;</span>)</pre></div><p>To disable a <strong>specific popover</strong>, pass the trigger element&#39;s <code class="text-nowrap" translate="no">id</code>, or the <code class="text-nowrap" translate="no">id</code> of the popover (if one was provided via the <code class="text-nowrap" translate="no">id</code> prop), as the first argument:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::disable::popover&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>To enable a <strong>specific popover</strong>, pass the trigger element&#39;s <code class="text-nowrap" translate="no">id</code>, or the <code class="text-nowrap" translate="no">id</code> of the popover (if one was provided via the <code class="text-nowrap" translate="no">id</code> prop), as the first argument when emitting the <code class="text-nowrap" translate="no">bv::enable::popover</code> event:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::enable::popover&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>To enable all popovers simultaneously, omit the <code class="text-nowrap" translate="no">id</code> argument when emitting the <code class="text-nowrap" translate="no">bv::enable::popover</code> event.</p> <p>These events work for both the component and directive versions of popover.</p> <p><strong>Note:</strong> <em>The <strong>trigger element</strong> must exist in the DOM in order for the popover to be enabled or disabled.</em></p> <h3 id="listening-to-popover-changes-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Listening to popover changes via $root events<a class="anchorjs-link" href="#listening-to-popover-changes-via-root-events" aria-labelledby="listening-to-popover-changes-via-root-events"></a></span></h3> <p>To listen to any popover opening, use:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-built_in">this</span>.$root.$on(<span class="hljs-string">&#x27;bv::popover::show&#x27;</span>, <span class="hljs-function"><span class="hljs-params">bvEventObj</span> =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;bvEventObj:&#x27;</span>, bvEventObj)\n    })\n  }\n}</pre></div><p>Refer to the <a href="/docs/components/popover#component-reference" class="font-weight-bold">Events</a> section of documentation for the full list of events.</p> <h2 id="accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-labelledby="accessibility"></a></span></h2> <p>Popovers, in their current implementation, are not overly accessible when used as interactive components. Content may not be actively read to screen reader users, and the popover markup might not be located close to the trigger element in the DOM (as popovers usually get appended to the end of <code class="text-nowrap" translate="no">&lt;body&gt;</code>).</p> <p>When using popovers as interactive component, you should transfer focus into the popover if possible. When the popover is closed, you should return focus back to your triggering element (assuming <code class="text-nowrap" translate="no">focus</code> is not used as a trigger method), as we have done in the above example.</p> <p>You may also want to implement focus containment in the popover content while the user is interacting with it (keeping focus inside the popover until it is closed by the user).</p> <p><strong>Note:</strong> The animation effect of this component is dependent on the <code class="text-nowrap" translate="no">prefers-reduced-motion</code> media query. See the <a href="/docs/reference/accessibility" class="font-weight-bold">reduced motion section of our accessibility documentation</a> for additional details.</p> <h3 id="making-popovers-work-for-keyboard-and-assistive-technology-users" class="bv-no-focus-ring"><span class="bd-content-title">Making popovers work for keyboard and assistive technology users<a class="anchorjs-link" href="#making-popovers-work-for-keyboard-and-assistive-technology-users" aria-labelledby="making-popovers-work-for-keyboard-and-assistive-technology-users"></a></span></h3> <p>To allow keyboard users to activate your popovers, you should only add them to HTML elements that are traditionally keyboard-focusable and interactive (such as links or form controls). Although arbitrary HTML elements (such as <code class="text-nowrap" translate="no">&lt;span&gt;</code>s) can be made focusable by adding the <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code> attribute, this will add potentially annoying and confusing tab stops on non-interactive elements for keyboard users, and most assistive technologies currently do not announce the popover&#39;s content in this situation. Additionally, do not rely solely on <code class="text-nowrap" translate="no">hover</code> as the trigger for your popovers, as this will make them impossible to trigger for keyboard users.</p> <p>While you can insert rich, structured HTML and/or components in popovers via slots, we strongly recommend that you avoid adding an excessive amount of content. The way popovers currently work is that, once displayed, their content is tied to the trigger element with the <code class="text-nowrap" translate="no">aria-describedby</code> attribute. As a result, the entirety of the popover&#39;s content will be announced (read) to assistive technology users as one long, uninterrupted stream.</p> <p>Additionally, while it is possible to also include interactive controls (such as form elements or links) in your popover, be aware that currently the popover does not manage keyboard focus order. When a keyboard user opens a popover, focus remains on the triggering element, and as the popover usually does not immediately follow the trigger in the document&#39;s structure, there is no guarantee that moving forward/pressing <kbd class="notranslate" translate="no">Tab</kbd> will move a keyboard user into the popover itself. In short, simply adding interactive controls to a popover is likely to make these controls unreachable/unusable for keyboard users and users of assistive technologies, or at the very least make for an illogical overall focus order. <strong>In these cases, consider using a <code class="text-nowrap" translate="no">&lt;b-modal&gt;</code> dialog instead</strong>.</p>'}}}]);