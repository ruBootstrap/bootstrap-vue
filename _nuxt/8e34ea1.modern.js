(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{448:function(n,l){n.exports={baseTOC:{top:"#collapse",title:"Collapse",toc:[{href:"#usage",label:"Usage"},{href:"#initial-visibility-start-expanded",label:"Initial visibility (start expanded)"},{href:"#v-model-support",label:"v-model support"},{href:"#trigger-multiple-collapse-elements",label:"Trigger multiple collapse elements"},{href:"#accordion-support",label:"Accordion support"},{href:"#hiding-and-showing-content-in-the-toggle-button-based-on-collapse-state",label:"Hiding and showing content in the toggle button based on collapse state"},{href:"#global-root-instance-events",label:"&#39;Global&#39; $root instance events",toc:[{href:"#listening-to-collapses-state-changes-via-root-events",label:"Listening to collapses state changes via $root events"},{href:"#toggling-collapses-via-root-events",label:"Toggling collapses via $root events"}]},{href:"#optionally-scoped-default-slot",label:"Optionally scoped default slot"},{href:"#accessibility",label:"Accessibility"},{href:"#see-also",label:"See also"}]},titleLead:'<h1 id="collapse" class="bv-no-focus-ring"><span class="bd-content-title">Collapse</span></h1> <p class="bd-lead">Easily toggle visibility of almost any content on your pages in a vertically collapsing container. Includes support for making accordions. Visibility can be easily toggled with our <a href="/docs/directives/toggle" class="font-weight-bold"><code class="text-nowrap" translate="no">v-b-toggle</code> directive</a>, or via <code class="text-nowrap" translate="no">v-model</code>.</p>',body:'<div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-toggle.collapse-1</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Toggle Collapse<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;collapse-1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>Collapse contents Here<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-toggle.collapse-1-inner</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>Toggle Inner Collapse<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;collapse-1-inner&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>Hello!<span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-collapse.vue --&gt;</span></pre></div><h2 id="usage" class="bv-no-focus-ring"><span class="bd-content-title">Usage<a class="anchorjs-link" href="#usage" aria-labelledby="usage"></a></span></h2> <p>Other elements can easily toggle <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> components using the <a href="/docs/directives/toggle" class="font-weight-bold"><code class="text-nowrap" translate="no">v-b-toggle</code> directive</a>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Using modifiers --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-toggle.collapse-2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-1&quot;</span>&gt;</span>Toggle Collapse<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Using value --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-toggle</span>=<span class="hljs-string">&quot;&#x27;collapse-2&#x27;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-1&quot;</span>&gt;</span>Toggle Collapse<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Element to collapse --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;collapse-2&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>I am collapsible content!<span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-collapse-usage.vue --&gt;</span></pre></div><p>See the <a href="/docs/directives/toggle" class="font-weight-bold"><code class="text-nowrap" translate="no">v-b-toggle</code> directive documentation</a> for detailed usage information.</p> <h2 id="initial-visibility-start-expanded" class="bv-no-focus-ring"><span class="bd-content-title">Initial visibility (start expanded)<a class="anchorjs-link" href="#initial-visibility-start-expanded" aria-labelledby="initial-visibility-start-expanded"></a></span></h2> <p>To make the <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> show initially, set the <code class="text-nowrap" translate="no">visible</code> prop:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-toggle.collapse-3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-1&quot;</span>&gt;</span>Toggle Collapse<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">visible</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;collapse-3&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>I should start open!<span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-collapse-visible.vue --&gt;</span></pre></div><p>By default, an initially visible collapse will not animate on mount. To enable the collapse expanding animation on mount (when <code class="text-nowrap" translate="no">visible</code> or <code class="text-nowrap" translate="no">v-model</code> is <code class="text-nowrap" translate="no">true</code>), set the <code class="text-nowrap" translate="no">appear</code> prop on <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code>.</p> <h2 id="v-model-support" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">v-model</code> support<a class="anchorjs-link" href="#v-model-support" aria-labelledby="v-model-support"></a></span></h2> <p>The component&#39;s collapsed (visible) state can also be set with <code class="text-nowrap" translate="no">v-model</code> which binds internally to the <code class="text-nowrap" translate="no">visible</code> prop.</p> <p>Note, when using <code class="text-nowrap" translate="no">v-model</code> to control <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code>, the <code class="text-nowrap" translate="no">aria-*</code> attributes and class <code class="text-nowrap" translate="no">collapsed</code> are not automatically placed on the trigger button (as is the case when using the <code class="text-nowrap" translate="no">v-b-toggle</code> directive). In this example we <strong>must control the attributes ourselves</strong> for proper accessibility support.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n      <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;visible ? null : &#x27;collapsed&#x27;&quot;</span>\n      <span class="hljs-attr">:aria-expanded</span>=<span class="hljs-string">&quot;visible ? &#x27;true&#x27; : &#x27;false&#x27;&quot;</span>\n      <span class="hljs-attr">aria-controls</span>=<span class="hljs-string">&quot;collapse-4&quot;</span>\n      @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;visible = !visible&quot;</span>\n    &gt;</span>\n      Toggle Collapse\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;collapse-4&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;visible&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>I should start open!<span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-collapse-v-model.vue --&gt;</span></pre></div><h2 id="trigger-multiple-collapse-elements" class="bv-no-focus-ring"><span class="bd-content-title">Trigger multiple collapse elements<a class="anchorjs-link" href="#trigger-multiple-collapse-elements" aria-labelledby="trigger-multiple-collapse-elements"></a></span></h2> <p>You can even collapse multiple <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> components via a single <code class="text-nowrap" translate="no">v-b-toggle</code> by providing multiple target IDs using <em>modifiers</em>.</p> <p>You can also pass multiple target IDs via the directive <em>value</em> in BootstrapVue release v2.14.0+.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Via multiple directive modifiers --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-toggle.collapse-a.collapse-b</span>&gt;</span>Toggle Collapse A and B<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Via space separated string of IDs passed to directive value --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-toggle</span>=<span class="hljs-string">&quot;&#x27;collapse-a collapse-b&#x27;&quot;</span>&gt;</span>Toggle Collapse A and B<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Via array of string IDs passed to directive value --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-toggle</span>=<span class="hljs-string">&quot;[&#x27;collapse-a&#x27;, &#x27;collapse-b&#x27;]&quot;</span>&gt;</span>Toggle Collapse A and B<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Elements to collapse --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;collapse-a&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>I am collapsible content A!<span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;collapse-b&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>I am collapsible content B!<span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-collapse-trigger-multiple.vue --&gt;</span></pre></div><h2 id="accordion-support" class="bv-no-focus-ring"><span class="bd-content-title">Accordion support<a class="anchorjs-link" href="#accordion-support" aria-labelledby="accordion-support"></a></span></h2> <p>Turn a group of <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> components into an accordion by supplying an accordion group identifier via the <code class="text-nowrap" translate="no">accordion</code> prop. Note that only one collapse in an accordion group can be open at a time.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;accordion&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;tablist&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">no-body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-1&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-card-header</span> <span class="hljs-attr">header-tag</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-1&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;tab&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">block</span> <span class="hljs-attr">v-b-toggle.accordion-1</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>Accordion 1<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-card-header</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accordion-1&quot;</span> <span class="hljs-attr">visible</span> <span class="hljs-attr">accordion</span>=<span class="hljs-string">&quot;my-accordion&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;tabpanel&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-body</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>I start opened because <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>visible<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> is <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>{{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-card-body</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">no-body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-1&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-card-header</span> <span class="hljs-attr">header-tag</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-1&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;tab&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">block</span> <span class="hljs-attr">v-b-toggle.accordion-2</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>Accordion 2<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-card-header</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accordion-2&quot;</span> <span class="hljs-attr">accordion</span>=<span class="hljs-string">&quot;my-accordion&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;tabpanel&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-body</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>{{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-card-body</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">no-body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-1&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-card-header</span> <span class="hljs-attr">header-tag</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-1&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;tab&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">block</span> <span class="hljs-attr">v-b-toggle.accordion-3</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>Accordion 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-card-header</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accordion-3&quot;</span> <span class="hljs-attr">accordion</span>=<span class="hljs-string">&quot;my-accordion&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;tabpanel&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card-body</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-card-text</span>&gt;</span>{{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-card-text</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-card-body</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">text</span>: <span class="hljs-string">`\n          Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\n          richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor\n          brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon\n          tempor, sunt aliqua put a bird on it squid single-origin coffee nulla\n          assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore\n          wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher\n          vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic\n          synth nesciunt you probably haven&#x27;t heard of them accusamus labore VHS.\n        `</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-accordion.vue --&gt;</span></pre></div><p><strong>Notes:</strong></p> <ul> <li>When using accordion mode, make sure you place the trigger elements and <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> components inside an element with <code class="text-nowrap" translate="no">role=&quot;tablist&quot;</code> and set <code class="text-nowrap" translate="no">role=&quot;tab&quot;</code> on each trigger element&#39;s container (each trigger element should be wrapped) in order to help screen reader users navigate the accordion group.</li> <li>If using the <code class="text-nowrap" translate="no">v-model</code> feature of <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> in accordion mode, do not bind the <code class="text-nowrap" translate="no">v-model</code> or <code class="text-nowrap" translate="no">visible</code> prop of all the collapses in the accordion group to the same variable!</li> <li>Ensure, at most, only one <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> in the accordion group has the <code class="text-nowrap" translate="no">visible</code> prop and/or <code class="text-nowrap" translate="no">v-model</code> set to <code class="text-nowrap" translate="no">true</code>. Only one collapse in an accordion group can be open at a time.</li> </ul> <h2 id="hiding-and-showing-content-in-the-toggle-button-based-on-collapse-state" class="bv-no-focus-ring"><span class="bd-content-title">Hiding and showing content in the toggle button based on collapse state<a class="anchorjs-link" href="#hiding-and-showing-content-in-the-toggle-button-based-on-collapse-state" aria-labelledby="hiding-and-showing-content-in-the-toggle-button-based-on-collapse-state"></a></span></h2> <p>When using the <code class="text-nowrap" translate="no">v-b-toggle</code> directive, the class <code class="text-nowrap" translate="no">collapsed</code> will automatically be placed on the trigger element when the collapse is closed, and removed when open. You can use this class to display or hide content within the toggle via custom CSS. As of BootstrapVue 2.14.0, the class <code class="text-nowrap" translate="no">not-collapsed</code> will be applied when the target(s) are not closed.</p> <p><strong>Example HTML markup:</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-toggle:my-collapse</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;when-open&quot;</span>&gt;</span>Close<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;when-closed&quot;</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> My Collapse\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-collapse</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-collapse&quot;</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Content here --&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-collapse</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><p><strong>Example Custom CSS:</strong></p> <div class="bd-code"><pre class="hljs css p-2" translate="no"><span class="hljs-selector-class">.collapsed</span> &gt; <span class="hljs-selector-class">.when-open</span>,\n<span class="hljs-selector-class">.not-collapsed</span> &gt; <span class="hljs-selector-class">.when-closed</span> {\n  <span class="hljs-attribute">display</span>: none;\n}</pre></div><h2 id="global-root-instance-events" class="bv-no-focus-ring"><span class="bd-content-title">&#39;Global&#39; $root instance events<a class="anchorjs-link" href="#global-root-instance-events" aria-labelledby="global-root-instance-events"></a></span></h2> <p>Using <code class="text-nowrap" translate="no">$root</code> instance it is possible to emit and listen events somewhere out of a component, where <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> is used. In short, <code class="text-nowrap" translate="no">$root</code> behaves like a global event emitters and listener. Details about <code class="text-nowrap" translate="no">$root</code> instance can be found in <a href="https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Root-Instance" target="_blank" rel="noopener">the official Vue docs</a>.</p> <h3 id="listening-to-collapses-state-changes-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Listening to collapses state changes via $root events<a class="anchorjs-link" href="#listening-to-collapses-state-changes-via-root-events" aria-labelledby="listening-to-collapses-state-changes-via-root-events"></a></span></h3> <p>To listen to any collapse state changes, use:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-built_in">this</span>.$root.$on(<span class="hljs-string">&#x27;bv::collapse::state&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">collapseId, isJustShown</span>) =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;collapseId:&#x27;</span>, collapseId)\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;isJustShown:&#x27;</span>, isJustShown)\n    })\n  }\n}</pre></div><p>where <code class="text-nowrap" translate="no">collapseId</code> is collapse id which changed its state; <code class="text-nowrap" translate="no">isJustShown</code> is true/false, i.e. shown/hidden collapse.</p> <h3 id="toggling-collapses-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Toggling collapses via $root events<a class="anchorjs-link" href="#toggling-collapses-via-root-events" aria-labelledby="toggling-collapses-via-root-events"></a></span></h3> <p>To toggle (open/close) a <strong>specific collapse</strong>, pass the collapse <code class="text-nowrap" translate="no">id</code>:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::toggle::collapse&#x27;</span>, <span class="hljs-string">&#x27;my-collapse-id&#x27;</span>)</pre></div><h2 id="optionally-scoped-default-slot" class="bv-no-focus-ring"><span class="bd-content-title">Optionally scoped default slot<a class="anchorjs-link" href="#optionally-scoped-default-slot" aria-labelledby="optionally-scoped-default-slot"></a></span></h2> <p><span class="badge badge-info small">New in v2.2.0</span></p> <p>The default slot can be optionally scoped. The following scope properties are available:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">visible</code></td> <td>Boolean</td> <td>Visible state of the collapse</td> </tr> <tr> <td><code class="text-nowrap" translate="no">close</code></td> <td>Function</td> <td>When called, will close the collapse</td> </tr> </tbody></table> </div><h2 id="accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-labelledby="accessibility"></a></span></h2> <p>The <code class="text-nowrap" translate="no">v-b-toggle</code> directive will automatically add the ARIA attributes <code class="text-nowrap" translate="no">aria-controls</code> and <code class="text-nowrap" translate="no">aria-expanded</code> to the component that the directive appears on (as well as add the class <code class="text-nowrap" translate="no">collapsed</code> when not expanded). <code class="text-nowrap" translate="no">aria-expanded</code> will reflect the state of the target <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> component, while <code class="text-nowrap" translate="no">aria-controls</code> will be set to the ID(s) of the target <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> component(s).</p> <p>If using <code class="text-nowrap" translate="no">v-model</code> to set the visible state instead of the directive <code class="text-nowrap" translate="no">v-b-toggle</code>, you will be required to, on the toggle element, add the <code class="text-nowrap" translate="no">aria-controls</code> and other appropriate attributes and classes yourself.</p> <p>While the <code class="text-nowrap" translate="no">v-b-toggle</code> directive can be placed on almost any HTML element or Vue component, it is recommended to use a button or link (or similar component) to act as your toggler. Otherwise your trigger elements may be inaccessible to keyboard or screen reader users. If you do place them on something other than a button or link (or similar component), you should add the attributes <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code> and <code class="text-nowrap" translate="no">role=&quot;button&quot;</code> to allow users of assistive technology to reach your trigger element.</p> <p>When using accordion mode, make sure you place the trigger elements and <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code> components inside an element with <code class="text-nowrap" translate="no">role=&quot;tablist&quot;</code> and set <code class="text-nowrap" translate="no">role=&quot;tab&quot;</code> on each trigger element&#39;s container in order to help screen reader users navigate the accordion group. Unfortunately, BootstrapVue cannot apply those roles for you automatically, as it depends on your final document markup.</p> <p><strong>Note:</strong> The animation effect of this component is dependent on the <code class="text-nowrap" translate="no">prefers-reduced-motion</code> media query. See the <a href="/docs/reference/accessibility" class="font-weight-bold">reduced motion section of our accessibility documentation</a> for additional details.</p> <h2 id="see-also" class="bv-no-focus-ring"><span class="bd-content-title">See also<a class="anchorjs-link" href="#see-also" aria-labelledby="see-also"></a></span></h2> <ul> <li><a href="/docs/directives/toggle" class="font-weight-bold"><code class="text-nowrap" translate="no">v-b-toggle</code> directive</a></li> </ul>'}}}]);