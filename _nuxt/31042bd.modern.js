(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{455:function(t,n){t.exports={baseTOC:{top:"#form-group",title:"Form Group",toc:[{href:"#label",label:"Label",toc:[{href:"#horizontal-layout",label:"Horizontal layout"},{href:"#label-size",label:"Label size"},{href:"#label-text-alignment",label:"Label text alignment"}]},{href:"#description",label:"Description"},{href:"#nested-form-groups",label:"Nested form groups"},{href:"#disabled-form-group",label:"Disabled form group"},{href:"#validation-state-feedback",label:"Validation state feedback",toc:[{href:"#invalid-feedback",label:"Invalid feedback"},{href:"#valid-feedback",label:"Valid feedback"},{href:"#feedback-style",label:"Feedback style"},{href:"#feedback-limitations",label:"Feedback limitations"}]},{href:"#accessibility",label:"Accessibility"}]},titleLead:'<h1 id="form-group" class="bv-no-focus-ring"><span class="bd-content-title">Form Group</span></h1> <p class="bd-lead">The <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> component is the easiest way to add some structure to forms. Its purpose is to pair form controls with a legend or label, and to provide help text and invalid/valid feedback text, as well as visual (color) contextual state feedback.</p>',body:'<div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fieldset-1&quot;</span>\n      <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Let us know your name.&quot;</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Enter your name&quot;</span>\n      <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input-1&quot;</span>\n      <span class="hljs-attr">valid-feedback</span>=<span class="hljs-string">&quot;Thank you!&quot;</span>\n      <span class="hljs-attr">:invalid-feedback</span>=<span class="hljs-string">&quot;invalidFeedback&quot;</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-1&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span> <span class="hljs-attr">trim</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.length &gt;= <span class="hljs-number">4</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">invalidFeedback</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.name.length &gt; <span class="hljs-number">0</span>) {\n          <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Enter at least 4 characters.&#x27;</span>\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Please enter something.&#x27;</span>\n      }\n    },\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-group.vue --&gt;</span></pre></div><h2 id="label" class="bv-no-focus-ring"><span class="bd-content-title">Label<a class="anchorjs-link" href="#label" aria-labelledby="label"></a></span></h2> <p>Use the prop <code class="text-nowrap" translate="no">label</code> to set the content of the generated <code class="text-nowrap" translate="no">&lt;legend&gt;</code> or <code class="text-nowrap" translate="no">&lt;label&gt;</code> element, or by using the named slot <code class="text-nowrap" translate="no">label</code>, You may optionally visually hide the label text while still making it available to screen readers by setting the prop <code class="text-nowrap" translate="no">label-sr-only</code>.</p> <p><code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> will render a <code class="text-nowrap" translate="no">&lt;fieldset&gt;</code> with <code class="text-nowrap" translate="no">&lt;legend&gt;</code> if the <code class="text-nowrap" translate="no">label-for</code> prop is not set. If an input ID is provided to the <code class="text-nowrap" translate="no">label-for</code> prop, then a <code class="text-nowrap" translate="no">&lt;div&gt;</code> with <code class="text-nowrap" translate="no">&lt;label&gt;</code> will be rendered.</p> <p>If you provide an input <code class="text-nowrap" translate="no">id</code> value to the <code class="text-nowrap" translate="no">label-for</code> prop (the <code class="text-nowrap" translate="no">id</code> must exist on the input contained within the <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code>), a <code class="text-nowrap" translate="no">&lt;label&gt;</code> element will be rendered instead of a <code class="text-nowrap" translate="no">&lt;legend&gt;</code> element, and will have the <code class="text-nowrap" translate="no">for</code> attribute set to the <code class="text-nowrap" translate="no">id</code> specified. When specifying the id, <strong>do not</strong> prepend it with <code class="text-nowrap" translate="no">#</code>. The <code class="text-nowrap" translate="no">label-for</code> prop should only be used when you have a single form input inside the <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> component. Do not set the <code class="text-nowrap" translate="no">label-for</code> prop when using <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-form-checkbox-group&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-form-checkbox&gt;</code> or <code class="text-nowrap" translate="no">&lt;b-form-file&gt;</code> components (or when placing multiple inputs in the same form group), as these inputs include integrated label element(s) and the <code class="text-nowrap" translate="no">&lt;legend&gt;</code> element is more suitable.</p> <p>You can also apply additional classes to the label via the <code class="text-nowrap" translate="no">label-class</code> prop, such as responsive padding and text alignment utility classes. The <code class="text-nowrap" translate="no">label-class</code> prop accepts either a string or array of strings.</p> <h3 id="horizontal-layout" class="bv-no-focus-ring"><span class="bd-content-title">Horizontal layout<a class="anchorjs-link" href="#horizontal-layout" aria-labelledby="horizontal-layout"></a></span></h3> <p>By default, the label appears above the input element(s), but you may optionally render horizontal (label to the left of the input) at the various standard Bootstrap breakpoints.</p> <p>The props <code class="text-nowrap" translate="no">label-cols</code> and <code class="text-nowrap" translate="no">label-cols-{breakpoint}</code> allow you to specify how many columns the label should occupy in the row. The input will fill the rest of the row width. The value must be a number greater than <code class="text-nowrap" translate="no">0</code>. Or you can set the prop to <code class="text-nowrap" translate="no">true</code> to make the label and input(s) each occupy half of the width of the rendered row (handy if you have custom Bootstrap with an odd number of columns), or set the value to <code class="text-nowrap" translate="no">&#39;auto&#39;</code> so that the label occupies only the width that is needed.</p> <p>Since BootstrapVue <code class="text-nowrap" translate="no">v2.21.0</code> it is also possible to specify how many columns the content should occupy in the row via the <code class="text-nowrap" translate="no">content-cols</code> and <code class="text-nowrap" translate="no">content-cols-{breakpoint}</code> props.</p> <p>When using both, the <code class="text-nowrap" translate="no">label-cols</code> and <code class="text-nowrap" translate="no">content-cols</code> props, make sure that the total amount of columns doesn&#39;t exceed <code class="text-nowrap" translate="no">12</code>.</p> <p>See the <a href="/docs/components/layout#how-it-works" class="font-weight-bold">Layout and Grid System</a> docs for further information.</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Prop</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">label-cols</code></td> <td>Applies to breakpoint <code class="text-nowrap" translate="no">xs</code> up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">label-cols-sm</code></td> <td>Applies to breakpoint <code class="text-nowrap" translate="no">sm</code> and up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">label-cols-md</code></td> <td>Applies to breakpoint <code class="text-nowrap" translate="no">md</code> and up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">label-cols-lg</code></td> <td>Applies to breakpoint <code class="text-nowrap" translate="no">lg</code> and up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">label-cols-xl</code></td> <td>Applies to breakpoint <code class="text-nowrap" translate="no">xl</code> and up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">content-cols</code></td> <td><span class="badge badge-secondary">v2.21.0+</span> Applies to breakpoint <code class="text-nowrap" translate="no">xs</code> up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">content-cols-sm</code></td> <td><span class="badge badge-secondary">v2.21.0+</span> Applies to breakpoint <code class="text-nowrap" translate="no">sm</code> and up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">content-cols-md</code></td> <td><span class="badge badge-secondary">v2.21.0+</span> Applies to breakpoint <code class="text-nowrap" translate="no">md</code> and up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">content-cols-lg</code></td> <td><span class="badge badge-secondary">v2.21.0+</span> Applies to breakpoint <code class="text-nowrap" translate="no">lg</code> and up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">content-cols-xl</code></td> <td><span class="badge badge-secondary">v2.21.0+</span> Applies to breakpoint <code class="text-nowrap" translate="no">xl</code> and up</td> </tr> </tbody></table> </div><div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fieldset-horizontal&quot;</span>\n      <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;4&quot;</span>\n      <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;3&quot;</span>\n      <span class="hljs-attr">content-cols-sm</span>\n      <span class="hljs-attr">content-cols-lg</span>=<span class="hljs-string">&quot;7&quot;</span>\n      <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Let us know your name.&quot;</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Enter your name&quot;</span>\n      <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input-horizontal&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-horizontal&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-group-horizontal.vue --&gt;</span></pre></div><p>The ability to set the label cols to <code class="text-nowrap" translate="no">&#39;auto&#39;</code> was added in BootstrapVue version <code class="text-nowrap" translate="no">v2.1.0</code>.</p> <h3 id="label-size" class="bv-no-focus-ring"><span class="bd-content-title">Label size<a class="anchorjs-link" href="#label-size" aria-labelledby="label-size"></a></span></h3> <p>You can control the label text size match the size of your form input(s) via the optional <code class="text-nowrap" translate="no">label-size</code> prop. Values can be <code class="text-nowrap" translate="no">&#39;sm&#39;</code> or <code class="text-nowrap" translate="no">&#39;lg&#39;</code> for small or large label, respectively. Sizes work for both horizontal and non-horizontal form groups.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label-cols</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;sm&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Small&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input-sm&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-sm&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label-cols</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Default&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input-default&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-default&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label-cols</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;lg&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Large&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input-lg&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-lg&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-group-label-size.vue --&gt;</span></pre></div><h3 id="label-text-alignment" class="bv-no-focus-ring"><span class="bd-content-title">Label text alignment<a class="anchorjs-link" href="#label-text-alignment" aria-labelledby="label-text-alignment"></a></span></h3> <p>The label text may also optionally be aligned <code class="text-nowrap" translate="no">left</code>, <code class="text-nowrap" translate="no">center</code> or <code class="text-nowrap" translate="no">right</code> by setting the respective value via the prop <code class="text-nowrap" translate="no">label-text-align</code> and/or <code class="text-nowrap" translate="no">label-align-{breakpoint}</code>.</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Prop</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">label-align</code></td> <td>Applies to breakpoint <code class="text-nowrap" translate="no">xs</code> up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">label-align-sm</code></td> <td>Applies to breakpoint <code class="text-nowrap" translate="no">sm</code> and up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">label-align-md</code></td> <td>Applies to breakpoint <code class="text-nowrap" translate="no">md</code> and up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">label-align-lg</code></td> <td>Applies to breakpoint <code class="text-nowrap" translate="no">lg</code> and up</td> </tr> <tr> <td><code class="text-nowrap" translate="no">label-align-xl</code></td> <td>Applies to breakpoint <code class="text-nowrap" translate="no">xl</code> and up</td> </tr> </tbody></table> </div><p>Alignment has no effect if the <code class="text-nowrap" translate="no">label-sr-only</code> prop is set.</p> <h2 id="description" class="bv-no-focus-ring"><span class="bd-content-title">Description<a class="anchorjs-link" href="#description" aria-labelledby="description"></a></span></h2> <p>Optional descriptive text which is always shown with the <code class="text-nowrap" translate="no">.text-muted</code> class by setting the <code class="text-nowrap" translate="no">description</code> prop or using the named slot <code class="text-nowrap" translate="no">description</code>. The description text is rendered using the <a href="/docs/components/form#helper-components" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-text&gt;</code></a> form sub-component.</p> <h2 id="nested-form-groups" class="bv-no-focus-ring"><span class="bd-content-title">Nested form groups<a class="anchorjs-link" href="#nested-form-groups" aria-labelledby="nested-form-groups"></a></span></h2> <p>Feel free to nest <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> components to produce advanced form layouts and semantic grouping of related form controls:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">bg-variant</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;3&quot;</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Shipping Address&quot;</span>\n      <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;lg&quot;</span>\n      <span class="hljs-attr">label-class</span>=<span class="hljs-string">&quot;font-weight-bold pt-0&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Street:&quot;</span>\n        <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;nested-street&quot;</span>\n        <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;3&quot;</span>\n        <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">&quot;right&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nested-street&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;City:&quot;</span>\n        <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;nested-city&quot;</span>\n        <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;3&quot;</span>\n        <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">&quot;right&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nested-city&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;State:&quot;</span>\n        <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;nested-state&quot;</span>\n        <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;3&quot;</span>\n        <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">&quot;right&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nested-state&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Country:&quot;</span>\n        <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;nested-country&quot;</span>\n        <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;3&quot;</span>\n        <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">&quot;right&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nested-country&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Ship via:&quot;</span>\n        <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;3&quot;</span>\n        <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">&quot;right&quot;</span>\n        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n        <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pt-2&quot;</span>\n          <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;[&#x27;Air&#x27;, &#x27;Courier&#x27;, &#x27;Mail&#x27;]&quot;</span>\n          <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-group-nested.vue --&gt;</span></pre></div><h2 id="disabled-form-group" class="bv-no-focus-ring"><span class="bd-content-title">Disabled form group<a class="anchorjs-link" href="#disabled-form-group" aria-labelledby="disabled-form-group"></a></span></h2> <p>Setting the <code class="text-nowrap" translate="no">disabled</code> prop will disable the rendered <code class="text-nowrap" translate="no">&lt;fieldset&gt;</code> and, on most browsers, will disable all the input elements contained within the fieldset.</p> <p><code class="text-nowrap" translate="no">disabled</code> has no effect when <code class="text-nowrap" translate="no">label-for</code> is set (as a <code class="text-nowrap" translate="no">&lt;fieldset&gt;</code> element is not rendered).</p> <h2 id="validation-state-feedback" class="bv-no-focus-ring"><span class="bd-content-title">Validation state feedback<a class="anchorjs-link" href="#validation-state-feedback" aria-labelledby="validation-state-feedback"></a></span></h2> <p>Bootstrap includes validation styles for <code class="text-nowrap" translate="no">valid</code> and <code class="text-nowrap" translate="no">invalid</code> states on most form controls.</p> <p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p> <ul> <li><code class="text-nowrap" translate="no">false</code> (denotes invalid state) is great for when there&#39;s a blocking or required field. A user must fill in this field properly to submit the form.</li> <li><code class="text-nowrap" translate="no">true</code> (denotes valid state) is ideal for situations when you have per-field validation throughout a form and want to encourage a user through the rest of the fields.</li> <li><code class="text-nowrap" translate="no">null</code> Displays no validation state (neither valid nor invalid)</li> </ul> <p>To apply one of the contextual state icons on <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code>, set the <code class="text-nowrap" translate="no">state</code> prop to <code class="text-nowrap" translate="no">false</code> (for invalid), <code class="text-nowrap" translate="no">true</code> (for valid), or <code class="text-nowrap" translate="no">null</code> (no validation state).</p> <p>Bootstrap v4 uses sibling CSS selectors of <code class="text-nowrap" translate="no">:invalid</code> or <code class="text-nowrap" translate="no">:valid</code> inputs to show the feedback text. Some form controls (such as checkboxes, radios, and file inputs, or inputs inside input-groups) are wrapped in additional markup that will no longer make the feedback text a sibling of the input, and hence the feedback will not show. In these situations you will need to set the validity <code class="text-nowrap" translate="no">state</code> on the <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> <em>as well as</em> the input.</p> <p>Feedback will be shown if the parent <code class="text-nowrap" translate="no">&lt;b-form&gt;</code> component does <em>not</em> have the <code class="text-nowrap" translate="no">novalidate</code> prop set (or set to <code class="text-nowrap" translate="no">false</code>) along with the <code class="text-nowrap" translate="no">validated</code> prop set (and the input fails or passes native browser validation constraints such as <code class="text-nowrap" translate="no">required</code>). Refer to Bootstrap v4&#39;s <a href="https://getbootstrap.com/docs/4.5/components/forms/#validation" target="_blank" rel="noopener">Form component</a> documentation for details on validation methods.</p> <p>You should always provide content via the <code class="text-nowrap" translate="no">invalid-feedback</code> prop (or slot) to aid users using assistive technologies when setting a contextual <code class="text-nowrap" translate="no">invalid</code> state.</p> <h3 id="invalid-feedback" class="bv-no-focus-ring"><span class="bd-content-title">Invalid feedback<a class="anchorjs-link" href="#invalid-feedback" aria-labelledby="invalid-feedback"></a></span></h3> <p>Show optional invalid state feedback text to provide textual state feedback (html supported) by setting the prop <code class="text-nowrap" translate="no">invalid-feedback</code> or using the named slot <code class="text-nowrap" translate="no">invalid-feedback</code>.</p> <p>Invalid feedback is rendered using the <a href="/docs/components/form#helper-components" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-invalid-feedback&gt;</code></a> form sub-component.</p> <h3 id="valid-feedback" class="bv-no-focus-ring"><span class="bd-content-title">Valid feedback<a class="anchorjs-link" href="#valid-feedback" aria-labelledby="valid-feedback"></a></span></h3> <p>Show optional valid state feedback text to provide textual state feedback (html supported) by setting the prop <code class="text-nowrap" translate="no">valid-feedback</code> or using the named slot <code class="text-nowrap" translate="no">valid-feedback</code>.</p> <p>Valid feedback is rendered using the <a href="/docs/components/form#helper-components" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-valid-feedback&gt;</code></a> form sub-component.</p> <h3 id="feedback-style" class="bv-no-focus-ring"><span class="bd-content-title">Feedback style<a class="anchorjs-link" href="#feedback-style" aria-labelledby="feedback-style"></a></span></h3> <p>By default, when visible, feedback (valid or invalid) will show as a block of text. You can change the feedback so that it shows as a static tooltip when visible, by setting the prop <code class="text-nowrap" translate="no">tooltip</code> to <code class="text-nowrap" translate="no">true</code>.</p> <h3 id="feedback-limitations" class="bv-no-focus-ring"><span class="bd-content-title">Feedback limitations<a class="anchorjs-link" href="#feedback-limitations" aria-labelledby="feedback-limitations"></a></span></h3> <p><strong>Note:</strong> When using <code class="text-nowrap" translate="no">&lt;b-input-group&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-form-file&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-form-radio-group&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-form-checkbox-group&gt;</code> or <code class="text-nowrap" translate="no">&lt;b-form-checkbox&gt;</code> inside a <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code>, setting an invalid (or valid) <code class="text-nowrap" translate="no">state</code> on the <code class="text-nowrap" translate="no">input</code> alone will <strong>not</strong> trigger the invalid (or valid) feedback to show (due to limitations with the new Bootstrap v4 validation CSS). To get around this, <strong>you must also</strong> set the invalid/valid <code class="text-nowrap" translate="no">state</code> on <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code>. Native browser validation will <strong>not</strong> trigger the invalid feedback to show when using one of the above mentioned form controls.</p> <h2 id="accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-labelledby="accessibility"></a></span></h2> <p>By default, when no <code class="text-nowrap" translate="no">label-for</code> value is provided, <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> renders the input control(s) inside a an HTML <code class="text-nowrap" translate="no">&lt;fieldset&gt;</code> element with the label content placed inside the fieldset&#39;s <code class="text-nowrap" translate="no">&lt;legend&gt;</code> element. By nature of this markup, the legend content is automatically associated to the containing input control(s).</p> <p>It is <strong>highly recommended</strong> that you provide a unique <code class="text-nowrap" translate="no">id</code> prop on your input element and set the <code class="text-nowrap" translate="no">label-for</code> prop to this ID, when you have only a single input in the <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code>.</p> <p>When multiple form controls are placed inside <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> (i.e. a series or radio or checkbox inputs, or a series of related inputs), <strong>do not set</strong> the <code class="text-nowrap" translate="no">label-for</code> prop, as a label can only be associated with a single input. It is best to use the default rendered markup that produces a <code class="text-nowrap" translate="no">&lt;fieldset&gt;</code> + <code class="text-nowrap" translate="no">&lt;legend&gt;</code> which will describe the group of inputs.</p> <p>When placing multiple form controls inside a <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> (and you are not nesting <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> components), it is recommended to give each control its own associated <code class="text-nowrap" translate="no">&lt;label&gt;</code> (which may be visually hidden using the <code class="text-nowrap" translate="no">.sr-only</code> class) and set the labels <code class="text-nowrap" translate="no">for</code> attribute to the <code class="text-nowrap" translate="no">id</code> of the associated input control. Alternatively, you can set the <code class="text-nowrap" translate="no">aria-label</code> attribute on each input control instead of using a <code class="text-nowrap" translate="no">&lt;label&gt;</code>. For <code class="text-nowrap" translate="no">&lt;b-form-radio&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-form-checkbox&gt;</code> (or the group versions), you do not need to set individual labels, as the rendered markup for these types of inputs already includes a <code class="text-nowrap" translate="no">&lt;label&gt;</code> element.</p> <p>When the <code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code> has a <code class="text-nowrap" translate="no">label-for</code> prop set, the <code class="text-nowrap" translate="no">aria-describedby</code> attribute will be auto-assigned to the input. When the form group has multiple form controls, make sure to set the attribute to each control yourself by using the <code class="text-nowrap" translate="no">ariaDescribedby</code> prop value from the optionally scoped <code class="text-nowrap" translate="no">default</code> slot.</p>'}}}]);