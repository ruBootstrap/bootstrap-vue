(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{590:function(n,t){n.exports={baseTOC:{top:"#всплывающее-окно",title:"Всплывающее окно",toc:[{href:"#обзор",label:"Обзор"},{href:"#цель",label:"Цель"},{href:"#позиционирование",label:"Позиционирование"},{href:"#триггеры",label:"Триггеры",toc:[{href:"#предостережения-с-триггером-focus-на-элементах-button",label:"Предостережения с триггером focus на элементах &lt;button&gt;"},{href:"#закрыть-при-следующем-нажатии-самозакрытие",label:"Закрыть при следующем нажатии (самозакрытие)"}]},{href:"#основное-использование-компонента-b-popover",label:"Основное использование компонента &lt;b-popover&gt;",toc:[{href:"#параметры-компонента-через-свойства",label:"Параметры компонента через свойства"},{href:"#варианты-и-пользовательский-класс",label:"Варианты и пользовательский класс"},{href:"#программно-показать-и-скрыть-всплывающее-окно",label:"Программно показать и скрыть всплывающее окно"},{href:"#программное-отключение-всплывающих-окон",label:"Программное отключение всплывающих окон"}]},{href:"#использование-директивы-v-b-popover",label:"Использование директивы v-b-popover"},{href:"#расширенное-использование-b-popover-с-реактивным-контентом",label:"Расширенное использование &lt;b-popover&gt; с реактивным контентом"},{href:"#global-события-экземпляра-root",label:"&#39;Global&#39; события экземпляра $root",toc:[{href:"#скрытие-и-отображение-всплывающих-окон-с-помощью-событий-root",label:"Скрытие и отображение всплывающих окон с помощью событий $root"},{href:"#отключение-и-включение-всплывающих-окон-с-помощью-событий-root",label:"Отключение и включение всплывающих окон с помощью событий $root"},{href:"#прослушивание-изменений-всплывающих-окон-с-помощью-событий-root",label:"Прослушивание изменений всплывающих окон с помощью событий $root"}]},{href:"#доступность",label:"Доступность",toc:[{href:"#настройка-всплывающих-окон-для-пользователей-клавиатуры-и-вспомогательных-технологий",label:"Настройка всплывающих окон для пользователей клавиатуры и вспомогательных технологий"}]}]},titleLead:'<h1 id="всплывающее-окно" class="bv-no-focus-ring"><span class="bd-content-title">Всплывающее окно</span></h1> <p class="bd-lead">Функцию всплывающего сообщения, которая обеспечивает поведение, подобное всплывающей подсказке, можно легко применить к любому интерактивному элементу с помощью компонента <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> или директивы <a href="/docs/directives/popover" class="font-weight-bold"><code class="text-nowrap" translate="no">v-b-popover</code></a>.</p>',body:'<div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center my-3&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.top</span>=<span class="hljs-string">&quot;&#x27;Я содержание директивы popover!&#x27;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Заголовок всплывающего окна&quot;</span>&gt;</span>\n    Наведите на меня\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-target-1&quot;</span>&gt;</span>\n    Наведите на меня\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-target-1&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;hover&quot;</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>Заголовок всплывающего окна<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    Я <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>компонентный<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> поповер контент!\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover.vue --&gt;</span></pre></div><h2 id="обзор" class="bv-no-focus-ring"><span class="bd-content-title">Обзор<a class="anchorjs-link" href="#обзор" aria-labelledby="обзор"></a></span></h2> <p>Что нужно знать при использовании компонента popover:</p> <ul> <li>Поповеры полагаются на стороннюю библиотеку <a href="https://popper.js.org/" target="_blank" rel="noopener">Popper.js</a> для позиционирования.</li> <li>Поповеры требуют пользовательского SCSS/CSS BootstrapVue для правильной работы и для вариантов.</li> <li>Укажите <code class="text-nowrap" translate="no">container</code> как <code class="text-nowrap" translate="no">null</code> (по умолчанию, добавляется к <code class="text-nowrap" translate="no">&lt;body&gt;</code>), чтобы избежать проблем с рендерингом в более сложных компонентах (таких как группы ввода, группы кнопок и т. д.). Вы можете использовать <code class="text-nowrap" translate="no">container</code>, чтобы дополнительно указать другой элемент, к которому нужно добавить отображаемое всплывающее окно.</li> <li>Запуск всплывающих окон на скрытых элементах не будет работать.</li> <li>Поповеры для <code class="text-nowrap" translate="no">disabled</code> элементов должны запускаться для элемента-оболочки.</li> <li>При запуске из гиперссылок, которые охватывают несколько строк, всплывающие окна будут центрированы. Используйте <code class="text-nowrap" translate="no">white-space: nowrap;</code> для <code class="text-nowrap" translate="no">&lt;a&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-link&gt;</code> и <code class="text-nowrap" translate="no">&lt;router-link&gt;</code>, чтобы избежать такого поведения.</li> </ul> <h2 id="цель" class="bv-no-focus-ring"><span class="bd-content-title">Цель<a class="anchorjs-link" href="#цель" aria-labelledby="цель"></a></span></h2> <p>Целью является элемент <em>триггер</em> (или компонент), который вызовет всплывающее окно. Цель указывается с помощью свойства <code class="text-nowrap" translate="no">target</code> и может быть любой из следующих:</p> <ul> <li>Строка, идентифицирующая идентификатор триггерного элемента (или идентификатор корневого элемента компонента)</li> <li>Ссылка (ref) на <code class="text-nowrap" translate="no">HTMLElement</code> или <code class="text-nowrap" translate="no">SVGElement</code> (например, через <code class="text-nowrap" translate="no">this.$refs.refName</code>)</li> <li>Ссылка (ref) на компонент, который имеет либо <code class="text-nowrap" translate="no">HTMLElement</code>, либо <code class="text-nowrap" translate="no">SVGElement</code> в качестве корневого элемента (например, через <code class="text-nowrap" translate="no">this.$refs.refName</code>)</li> <li>Функция (callback), которая возвращает ссылку на <code class="text-nowrap" translate="no">HTMLElement</code> или <code class="text-nowrap" translate="no">SVGElement</code></li> </ul> <p>Для получения дополнительной информации о ссылках см. официальную <a href="https://vuejs.org/v2/api/#vm-refs" target="_blank" rel="noopener">документацию Vue</a>.</p> <p><strong>Примечания:</strong></p> <p>Целевой элемент <strong>должен</strong> существовать в документе, прежде чем <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> будет смонтирован. Если целевой элемент не найден во время монтирования, всплывающее окно никогда не откроется. Всегда размещайте компонент <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> ниже в DOM, чем целевой элемент. Это правило также применяется, если функция обратного вызова используется в качестве целевого элемента, поскольку этот обратный вызов вызывается только один раз при монтировании.</p> <p><code class="text-nowrap" translate="no">HTMLElement</code> относится к стандартным элементам HTML, таким как <code class="text-nowrap" translate="no">&lt;div&gt;</code>, <code class="text-nowrap" translate="no">&lt;button&gt;</code> и т. д., а <code class="text-nowrap" translate="no">SVGElement</code> относится к <code class="text-nowrap" translate="no">&lt;svg&gt;</code> или поддерживаемым дочерним элементам SVG.</p> <h2 id="позиционирование" class="bv-no-focus-ring"><span class="bd-content-title">Позиционирование<a class="anchorjs-link" href="#позиционирование" aria-labelledby="позиционирование"></a></span></h2> <p>Для позиционирования доступны двенадцать вариантов выравнивания: <code class="text-nowrap" translate="no">top</code>, <code class="text-nowrap" translate="no">topleft</code>, <code class="text-nowrap" translate="no">topright</code>, <code class="text-nowrap" translate="no">right</code>, <code class="text-nowrap" translate="no">righttop</code>, <code class="text-nowrap" translate="no">rightbottom</code>, <code class="text-nowrap" translate="no">bottom</code>, <code class="text-nowrap" translate="no">bottomleft</code>, <code class="text-nowrap" translate="no">bottomright</code>, <code class="text-nowrap" translate="no">left</code>, <code class="text-nowrap" translate="no">lefttop</code> и <code class="text-nowrap" translate="no">leftbottom</code>. Позиционирование относительно триггерного элемента.</p> <div class="bd-example bd-example-popover-static"> <div class="popover b-popover bs-popover-top bs-popover-top-docs"> <div class="arrow" style="left:calc(50% - 8px)"></div> <h3 class="popover-header">Popover top</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-top bs-popover-top-docs"> <div class="arrow" style="right:0"></div> <h3 class="popover-header">Popover topleft</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-top bs-popover-top-docs"> <div class="arrow" style="left:0"></div> <h3 class="popover-header">Popover topright</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-right bs-popover-right-docs"> <div class="arrow" style="top:calc(50% - 4px)"></div> <h3 class="popover-header">Popover right</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-right bs-popover-right-docs"> <div class="arrow" style="bottom:0"></div> <h3 class="popover-header">Popover righttop</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-right bs-popover-right-docs"> <div class="arrow" style="top:0"></div> <h3 class="popover-header">Popover rightbottom</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs"> <div class="arrow" style="left:calc(50% - 8px)"></div> <h3 class="popover-header">Popover bottom</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs"> <div class="arrow" style="right:0"></div> <h3 class="popover-header">Popover bottomleft</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs"> <div class="arrow" style="left:0"></div> <h3 class="popover-header">Popover bottomright</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-left bs-popover-left-docs"> <div class="arrow" style="top:calc(50% - 4px)"></div> <h3 class="popover-header">Popover left</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-left bs-popover-left-docs"> <div class="arrow" style="bottom:0"></div> <h3 class="popover-header">Popover lefttop</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="popover b-popover bs-popover-left bs-popover-left-docs"> <div class="arrow" style="top:0"></div> <h3 class="popover-header">Popover leftbottom</h3> <div class="popover-body"> Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. </div> </div> <div class="clearfix"></div> </div> <p>Смотрите документацию <a href="/docs/directives/popover/#positioning" class="font-weight-bold">Директива Popover</a> для живых примеров позиционирования.</p> <h2 id="триггеры" class="bv-no-focus-ring"><span class="bd-content-title">Триггеры<a class="anchorjs-link" href="#триггеры" aria-labelledby="триггеры"></a></span></h2> <p>570 / 5 000 Результаты перевода Всплывающие окна могут быть запущены (открыты/закрыты) с помощью любой комбинации <code class="text-nowrap" translate="no">click</code>, <code class="text-nowrap" translate="no">hover</code> и <code class="text-nowrap" translate="no">focus</code>. Триггер по умолчанию — <code class="text-nowrap" translate="no">click</code>. Или можно указать триггер <code class="text-nowrap" translate="no">manual</code>, где всплывающее окно можно открыть или закрыть только <a href="#programmatically-disabling-popover" class="font-weight-bold">программно</a>.</p> <p>Если всплывающее окно имеет более одного триггера, то все триггеры должны быть очищены, прежде чем всплывающее окно закроется. Т. е. если всплывающее окно имеет триггер <code class="text-nowrap" translate="no">focus click</code> и оно было открыто <code class="text-nowrap" translate="no">focus</code>, а затем пользователь щелкает элемент триггера, он должен снова щелкнуть его <strong>и</strong> переместить фокус, чтобы закрыть всплывающее окно.</p> <h3 id="предостережения-с-триггером-focus-на-элементах-button" class="bv-no-focus-ring"><span class="bd-content-title">Предостережения с триггером <code class="text-nowrap" translate="no">focus</code> на элементах <code class="text-nowrap" translate="no">&lt;button&gt;</code><a class="anchorjs-link" href="#предостережения-с-триггером-focus-на-элементах-button" aria-labelledby="предостережения-с-триггером-focus-на-элементах-button"></a></span></h3> <p>Для правильного кросс-браузерного и кросс-платформенного поведения при использовании только триггера <code class="text-nowrap" translate="no">focus</code> вы должны использовать элемент, который отображает тег <code class="text-nowrap" translate="no">&lt;a&gt;</code>, а не тег <code class="text-nowrap" translate="no">&lt;button&gt;</code>, и вы также должны включить атрибут <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code>.</p> <p>Следующее сгенерирует <code class="text-nowrap" translate="no">&lt;a&gt;</code>, который выглядит как кнопка:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>\n  <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>\n  <span class="hljs-attr">v-b-popover.focus</span>=<span class="hljs-string">&quot;&#x27;Контент всплывающего окна&#x27;&quot;</span>\n  <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Заголовок всплывающего окна&quot;</span>\n&gt;</span>\n  Кнопка ссылки с директивой поповера\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link-button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>\n  Кнопка ссылки с компонентом поповера\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;link-button&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Заголовок всплывающего окна&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;focus&quot;</span>&gt;</span>\n  Контент всплывающего окна\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span></pre></div><h3 id="закрыть-при-следующем-нажатии-самозакрытие" class="bv-no-focus-ring"><span class="bd-content-title">Закрыть при следующем нажатии (самозакрытие)<a class="anchorjs-link" href="#закрыть-при-следующем-нажатии-самозакрытие" aria-labelledby="закрыть-при-следующем-нажатии-самозакрытие"></a></span></h3> <p>Используйте триггер <code class="text-nowrap" translate="no">focus</code> отдельно, чтобы закрыть всплывающие окна при следующем щелчке, который делает пользователь. <code class="text-nowrap" translate="no">focus</code> также заставляет всплывающее окно активироваться как при <code class="text-nowrap" translate="no">focus</code>, так и при <code class="text-nowrap" translate="no">click</code> (поскольку щелчок заставляет элемент получать фокус в большинстве браузеров, предполагая, что он находится в последовательности вкладок на странице).</p> <p>Однако вы можете указать свой триггер как <code class="text-nowrap" translate="no">click blur</code>, который заставит только щелчок активировать всплывающее окно, и либо щелчок по элементу, <strong>либо</strong> потеря фокуса на другом элементе или части документа закроет всплывающее окно.</p> <p>Специальный триггер <code class="text-nowrap" translate="no">blur</code> <strong>должен</strong> использоваться в сочетании с триггером <code class="text-nowrap" translate="no">click</code>.</p> <h2 id="основное-использование-компонента-b-popover" class="bv-no-focus-ring"><span class="bd-content-title">Основное использование компонента <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code><a class="anchorjs-link" href="#основное-использование-компонента-b-popover" aria-labelledby="основное-использование-компонента-b-popover"></a></span></h2> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-3&quot;</span>&gt;</span>Размещение<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>\n        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;placement in placements&quot;</span>\n        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;placement&quot;</span>\n        <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;4&quot;</span>\n        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4 text-center&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;`popover-1-${placement}`&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>{{ placement }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n          <span class="hljs-attr">:target</span>=<span class="hljs-string">&quot;`popover-1-${placement}`&quot;</span>\n          <span class="hljs-attr">:placement</span>=<span class="hljs-string">&quot;placement&quot;</span>\n          <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Поповер!&quot;</span>\n          <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;hover focus&quot;</span>\n          <span class="hljs-attr">:content</span>=<span class="hljs-string">&quot;`Размещение ${placement}`&quot;</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-3&quot;</span>&gt;</span>Контент через свойства или слоты<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4 text-center&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-2&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Использование свойств<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n          <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-2&quot;</span>\n          <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Примеры свойства&quot;</span>\n          <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;hover focus&quot;</span>\n          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Встраивание контента с использованием свойств очень просто&quot;</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4 text-center&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-3&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Использование слотов<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-3&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;hover focus&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>Контент через слоты<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n          Встраивание контента <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span>&gt;</span>с использованием слотов<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> дает вам\n          <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>более высокий <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>контроль<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> и базовую поддержку HTML.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">placements</span>: [\n          <span class="hljs-string">&#x27;topright&#x27;</span>,\n          <span class="hljs-string">&#x27;top&#x27;</span>,\n          <span class="hljs-string">&#x27;topleft&#x27;</span>,\n          <span class="hljs-string">&#x27;bottomright&#x27;</span>,\n          <span class="hljs-string">&#x27;bottom&#x27;</span>,\n          <span class="hljs-string">&#x27;bottomleft&#x27;</span>,\n          <span class="hljs-string">&#x27;righttop&#x27;</span>,\n          <span class="hljs-string">&#x27;right&#x27;</span>,\n          <span class="hljs-string">&#x27;lefttop&#x27;</span>,\n          <span class="hljs-string">&#x27;rightbottom&#x27;</span>,\n          <span class="hljs-string">&#x27;left&#x27;</span>,\n          <span class="hljs-string">&#x27;leftbottom&#x27;</span>\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-placements.vue --&gt;</span></pre></div><h3 id="параметры-компонента-через-свойства" class="bv-no-focus-ring"><span class="bd-content-title">Параметры компонента через свойства<a class="anchorjs-link" href="#параметры-компонента-через-свойства" aria-labelledby="параметры-компонента-через-свойства"></a></span></h3> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Свойство</th> <th>По умолчанию</th> <th>Описание</th> <th>Поддерживаемые значения</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">target</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Идентификатор строки элемента или ссылка на элемент или компонент, для которого вы хотите вызвать всплывающее окно. <strong>Обязательный</strong></td> <td>Любой действительный уникальный идентификатор элемента в документе или ссылка на элемент/компонент в документе</td> </tr> <tr> <td><code class="text-nowrap" translate="no">title</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Заголовок всплывающего окна (только текст, без HTML). Если требуется HTML или реактивность, используйте именованный слот <code class="text-nowrap" translate="no">title</code></td> <td>Простой текст</td> </tr> <tr> <td><code class="text-nowrap" translate="no">content</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Содержимое всплывающего окна (только текст, без HTML). Если требуется HTML или реактивность, используйте слот по умолчанию.</td> <td>Простой текст</td> </tr> <tr> <td><code class="text-nowrap" translate="no">placement</code></td> <td><code class="text-nowrap" translate="no">&#39;right&#39;</code></td> <td>Позиционирование поповера относительно триггерного элемента.</td> <td><code class="text-nowrap" translate="no">auto</code>, <code class="text-nowrap" translate="no">top</code>, <code class="text-nowrap" translate="no">bottom</code>, <code class="text-nowrap" translate="no">left</code>, <code class="text-nowrap" translate="no">right</code>, <code class="text-nowrap" translate="no">topleft</code>, <code class="text-nowrap" translate="no">topright</code>, <code class="text-nowrap" translate="no">bottomleft</code>, <code class="text-nowrap" translate="no">bottomright</code>, <code class="text-nowrap" translate="no">lefttop</code>, <code class="text-nowrap" translate="no">leftbottom</code>, <code class="text-nowrap" translate="no">righttop</code>, <code class="text-nowrap" translate="no">rightbottom</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">fallback-placement</code></td> <td><code class="text-nowrap" translate="no">&#39;flip&#39;</code></td> <td>Автоматическое переворачивание поведения всплывающего окна относительно триггерного элемента.</td> <td><code class="text-nowrap" translate="no">flip</code>, <code class="text-nowrap" translate="no">clockwise</code>, <code class="text-nowrap" translate="no">counterclockwise</code> или массив допустимых мест размещения, оцениваемых слева направо</td> </tr> <tr> <td><code class="text-nowrap" translate="no">disabled</code></td> <td><code class="text-nowrap" translate="no">false</code></td> <td>Программное управление состоянием отображения Popover. Рекомендуется использовать с <a href="https://vuejs.org/v2/guide/components.html#sync-Modifier" target="_blank" rel="noopener">модификатором синхронизации</a>.</td> <td><code class="text-nowrap" translate="no">true</code>, <code class="text-nowrap" translate="no">false</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">triggers</code></td> <td><code class="text-nowrap" translate="no">&#39;click&#39;</code></td> <td>Разделенный пробелами список событий, которые вызовут открытие/закрытие всплывающего окна с помощью встроенной обработки</td> <td><code class="text-nowrap" translate="no">hover</code>, <code class="text-nowrap" translate="no">focus</code>, <code class="text-nowrap" translate="no">click</code>. Обратите внимание, что <code class="text-nowrap" translate="no">blur</code> — это специальный вариант использования, чтобы закрыть всплывающее окно при следующем щелчке.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">no-fade</code></td> <td><code class="text-nowrap" translate="no">false</code></td> <td>Отключить анимацию затухания, если установлено значение <code class="text-nowrap" translate="no">true</code></td> <td><code class="text-nowrap" translate="no">true</code> или <code class="text-nowrap" translate="no">false</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">delay</code></td> <td><code class="text-nowrap" translate="no">50</code></td> <td>Задержка показа и скрытия всплывающих окон на указанное количество миллисекунд. Также может быть определен как объект в форме <code class="text-nowrap" translate="no">{ show: 100, hide: 400 }</code>, что позволяет отображать и скрывать различные задержки</td> <td><code class="text-nowrap" translate="no">0</code> и выше, только целые числа.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">offset</code></td> <td><code class="text-nowrap" translate="no">0</code></td> <td>Сместить центр всплывающего окна на указанное количество пикселей. Также влияет на положение стрелки всплывающего окна.</td> <td>Любое отрицательное или положительное целое число</td> </tr> <tr> <td><code class="text-nowrap" translate="no">container</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Идентификатор строки элемента для добавления визуализированного всплывающего окна. Если <code class="text-nowrap" translate="no">null</code> или элемент не найден, всплывающее окно добавляется к <code class="text-nowrap" translate="no">&lt;body&gt;</code> (по умолчанию)</td> <td>Любой действительный уникальный идентификатор элемента в документе.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">boundary</code></td> <td><code class="text-nowrap" translate="no">&#39;scrollParent&#39;</code></td> <td>Контейнер, в котором всплывающее окно будет визуально ограничено. В большинстве случаев должно быть достаточно значения по умолчанию, но вам может потребоваться изменить его, если ваш целевой элемент находится в небольшом контейнере с прокруткой переполнения.</td> <td><code class="text-nowrap" translate="no">&#39;scrollParent&#39;</code> (по умолчанию), <code class="text-nowrap" translate="no">&#39;viewport&#39;</code>, <code class="text-nowrap" translate="no">&#39;window&#39;</code> или ссылка на элемент HTML.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">boundary-padding</code></td> <td><code class="text-nowrap" translate="no">5</code></td> <td>Количество пикселей, используемое для определения минимального расстояния между границами и всплывающим окном. Это гарантирует, что всплывающее окно всегда будет иметь небольшой отступ между краями своего контейнера.</td> <td>Любое положительное число</td> </tr> <tr> <td><code class="text-nowrap" translate="no">variant</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Контекстный вариант цвета всплывающего окна</td> <td>Название любого контекстного варианта цвета темы</td> </tr> <tr> <td><code class="text-nowrap" translate="no">custom-class</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Пользовательское имя класса для применения к элементу внешней оболочки всплывающего окна</td> <td>Строка</td> </tr> <tr> <td><code class="text-nowrap" translate="no">id</code></td> <td><code class="text-nowrap" translate="no">null</code></td> <td>Идентификатор для использования в корневом элементе всплывающего окна. Если ничего не указано, оно будет сгенерировано автоматически. Если вы предоставляете идентификатор, он <em>должен</em> быть уникальным на отображаемой странице.</td> <td>Действительная строка уникального идентификатора элемента</td> </tr> </tbody></table> </div><h3 id="варианты-и-пользовательский-класс" class="bv-no-focus-ring"><span class="bd-content-title">Варианты и пользовательский класс<a class="anchorjs-link" href="#варианты-и-пользовательский-класс" aria-labelledby="варианты-и-пользовательский-класс"></a></span></h3> <p>Всплывающие окна BootstrapVue поддерживают контекстные цветовые варианты через наш собственный CSS, через свойство <code class="text-nowrap" translate="no">variant</code>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-variant&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>Кнопка<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-variant&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;focus&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>Опасность!<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    Опасный вариант всплывающего окна\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-variant.vue --&gt;</span></pre></div><p>Варианты темы Bootstrap по умолчанию: <code class="text-nowrap" translate="no">danger</code>, <code class="text-nowrap" translate="no">warning</code>, <code class="text-nowrap" translate="no">success</code>, <code class="text-nowrap" translate="no">primary</code>, <code class="text-nowrap" translate="no">secondary</code>, <code class="text-nowrap" translate="no">info</code>, <code class="text-nowrap" translate="no">light</code> и <code class="text-nowrap" translate="no">dark</code>. Вы можете изменить или добавить дополнительные варианты через Bootstrap <a href="/docs/reference/theming" class="font-weight-bold">переменные SCSS</a></p> <p>Пользовательский класс можно применить к внешней оболочке всплывающего окна <code class="text-nowrap" translate="no">&lt;div&gt;</code> с помощью свойства <code class="text-nowrap" translate="no">custom-class</code>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-button&quot;</span>&gt;</span>Кнопка<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;my-button&quot;</span> <span class="hljs-attr">custom-class</span>=<span class="hljs-string">&quot;my-popover-class&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>Заголовок всплывающего окна<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    Контент всплывающего окна\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><p><code class="text-nowrap" translate="no">variant</code> и <code class="text-nowrap" translate="no">custom-class</code> являются реактивными и могут быть изменены, пока всплывающее окно открыто.</p> <p>Смотрите документацию <a href="/docs/directives/popover" class="font-weight-bold">директива всплывающего окна</a> о применении вариантов и пользовательского класса к версии директивы.</p> <h3 id="программно-показать-и-скрыть-всплывающее-окно" class="bv-no-focus-ring"><span class="bd-content-title">Программно показать и скрыть всплывающее окно<a class="anchorjs-link" href="#программно-показать-и-скрыть-всплывающее-окно" aria-labelledby="программно-показать-и-скрыть-всплывающее-окно"></a></span></h3> <p>Вы можете вручную управлять видимостью всплывающего окна с помощью синхронизируемой логической переменной <code class="text-nowrap" translate="no">show</code>. Установка значения <code class="text-nowrap" translate="no">true</code> покажет всплывающее окно, а установка значения <code class="text-nowrap" translate="no">false</code> скроет всплывающее окно.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-sync&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>У меня есть поповер<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span>Переключить всплывающее окно<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-sync&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Поповер&quot;</span>&gt;</span>\n        Привет <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Мир!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-show-sync.vue --&gt;</span></pre></div><p>Программное управление также может быть затронуто отправкой событий <code class="text-nowrap" translate="no">&#39;open&#39;</code> и <code class="text-nowrap" translate="no">&#39;close&#39;</code> во всплывающее окно по ссылке.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-event&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>У меня есть поповер<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onOpen&quot;</span>&gt;</span>Открыть<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClose&quot;</span>&gt;</span>Закрыть<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;popover&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-event&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Поповер&quot;</span>&gt;</span>\n      Привет <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Мир!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onOpen</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;open&#x27;</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">onClose</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;close&#x27;</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-show-event.vue --&gt;</span></pre></div><p>Чтобы всплывающее окно отображалось при начальном рендеринге, просто добавьте свойство <code class="text-nowrap" translate="no">show</code> в <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-open&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Кнопка<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">show</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-open&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Поповер&quot;</span>&gt;</span>\n    Я начинаю <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>открывать<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-show-open.vue --&gt;</span></pre></div><p>Всплывающее окно, открытое программно через свойство &#39;show&#39; или вызовом события, может быть закрыто только программно. Встроенные триггеры будут работать некорректно, т.к. событие триггера попытается открыть поповер, даже если он уже открыт.</p> <p>В приведенном ниже примере, когда первый Popover открывается с помощью события &#39;open&#39;, потребуется два нажатия кнопки, чтобы закрыть его. Поиграйте с приведенной ниже демонстрацией, чтобы понять это. Если вам нужна изящная обработка как программного управления компонентом Popover, так и триггеров взаимодействия с пользователем, вам следует отключить встроенные триггеры и управлять управлением самостоятельно, как показано во втором Popover.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-manual-1&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Ненадежный<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-manual-1&quot;</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">&quot;pop1&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span>\n        Иногда я могу быть упрямым.\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-manual-2&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;pop2 = !pop2&quot;</span>&gt;</span>\n        Комфортное онемение\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-manual-2&quot;</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">&quot;pop2&quot;</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>\n        Я верю, что это работает, хорошо.\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;popOpen&quot;</span>&gt;</span>Открыть<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;popClose&quot;</span>&gt;</span>Закрыть<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;popToggle&quot;</span>&gt;</span>Переключить<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">pop1</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">pop2</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">popOpen</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.pop1 = <span class="hljs-built_in">this</span>.pop2 = <span class="hljs-literal">true</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">popClose</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.pop1 = <span class="hljs-built_in">this</span>.pop2 = <span class="hljs-literal">false</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">popToggle</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.pop1 = !<span class="hljs-built_in">this</span>.pop1\n        <span class="hljs-built_in">this</span>.pop2 = !<span class="hljs-built_in">this</span>.pop2\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-advanced-caution.vue --&gt;</span></pre></div><p>Вы также можете использовать события <code class="text-nowrap" translate="no">$root</code> для запуска показа и скрытия всплывающих окон. Дополнительные сведения см. в разделе <strong>Скрытие и отображение всплывающих окон с помощью $root событий</strong> ниже.</p> <h3 id="программное-отключение-всплывающих-окон" class="bv-no-focus-ring"><span class="bd-content-title">Программное отключение всплывающих окон<a class="anchorjs-link" href="#программное-отключение-всплывающих-окон" aria-labelledby="программное-отключение-всплывающих-окон"></a></span></h3> <p>Вы можете отключить всплывающее окно с помощью синхронизируемого логического свойства <code class="text-nowrap" translate="no">disabled</code> (значение по умолчанию — <code class="text-nowrap" translate="no">false</code>) установка его в <code class="text-nowrap" translate="no">true</code> отключит всплывающее окно. Если всплывающее окно в настоящее время видимо, когда для параметра <code class="text-nowrap" translate="no">disabled</code> установлено значение <code class="text-nowrap" translate="no">false</code>, оно останется видимым до тех пор, пока не будет включено или программно закрыто. Если всплывающее окно отключено/включено с помощью $root событий (смотрите ниже), ваше значение <code class="text-nowrap" translate="no">disabled</code> будет обновлено, если вы указали модификатор свойства <code class="text-nowrap" translate="no">.sync</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-disable&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>У меня есть поповер<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;disabled = !disabled&quot;</span>&gt;</span>\n        {{ disabled ? &#x27;Enable&#x27; : &#x27;Disable&#x27; }} Поповер по свойству\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;disableByRef&quot;</span>&gt;</span>\n        {{ disabled ? &#x27;Enable&#x27; : &#x27;Disable&#x27; }} Поповер по событию $ref\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n        <span class="hljs-attr">:disabled.sync</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n        <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-disable&quot;</span>\n        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Поповер&quot;</span>\n        <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;popover&quot;</span>\n      &gt;</span>\n        Привет <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Мир!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">disableByRef</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.disabled) {\n          <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;enable&#x27;</span>)\n        } <span class="hljs-keyword">else</span> {\n          <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;disable&#x27;</span>)\n        }\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-disable.vue --&gt;</span></pre></div><p>На программное управление также можно воздействовать, отправляя события <code class="text-nowrap" translate="no">&#39;enable&#39;</code> и <code class="text-nowrap" translate="no">&#39;disable&#39;</code> во всплывающее окно по ссылке.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-button-disable-event&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>У меня есть поповер<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onEnable&quot;</span>&gt;</span>Включить<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onDisable&quot;</span>&gt;</span>Отключить<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;popover&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-button-disable-event&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Поповер&quot;</span>&gt;</span>\n      Привет <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Мир!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onEnable</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;enable&#x27;</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">onDisable</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.popover.$emit(<span class="hljs-string">&#x27;disable&#x27;</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-disabled-event.vue --&gt;</span></pre></div><p>Когда отключено, всплывающее окно можно открыть программно (через свойство <code class="text-nowrap" translate="no">show</code>, методы или события).</p> <p>Вы также можете использовать события <code class="text-nowrap" translate="no">$root</code> для включения и отключения всплывающих окон. Дополнительные сведения см. в разделе <strong>Отключение и включение всплывающих окон с помощью $root событий</strong> ниже.</p> <h2 id="использование-директивы-v-b-popover" class="bv-no-focus-ring"><span class="bd-content-title">Использование директивы <code class="text-nowrap" translate="no">v-b-popover</code><a class="anchorjs-link" href="#использование-директивы-v-b-popover" aria-labelledby="использование-директивы-v-b-popover"></a></span></h2> <p>Просто нужны быстрые всплывающие окна без лишней разметки? Используйте <a href="/docs/directives/popover" class="font-weight-bold">директиву <code class="text-nowrap" translate="no">v-b-popover</code></a>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.top</span>=<span class="hljs-string">&quot;&#x27;Popover!&#x27;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Заголовок&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Top<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.right</span>=<span class="hljs-string">&quot;&#x27;Popover!&#x27;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Заголовок&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Right<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.left</span>=<span class="hljs-string">&quot;&#x27;Popover!&#x27;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Заголовок&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Left<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.bottom</span>=<span class="hljs-string">&quot;&#x27;Popover!&#x27;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Заголовок&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Bottom<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-directive-placement.vue --&gt;</span></pre></div><p>Обратитесь к документации <a href="/docs/directives/popover" class="font-weight-bold">директивы <code class="text-nowrap" translate="no">v-b-popover</code></a> для получения подробной информации об использовании директивы.</p> <h2 id="расширенное-использование-b-popover-с-реактивным-контентом" class="bv-no-focus-ring"><span class="bd-content-title">Расширенное использование <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> с реактивным контентом<a class="anchorjs-link" href="#расширенное-использование-b-popover-с-реактивным-контентом" aria-labelledby="расширенное-использование-b-popover-с-реактивным-контентом"></a></span></h2> <p>Вы даже можете сделать содержимое <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> интерактивным. Просто помните, что нельзя использовать <code class="text-nowrap" translate="no">focus</code> или триггеры (используйте только <code class="text-nowrap" translate="no">click</code>).</p> <p>Если вам абсолютно необходимо использовать триггер, отличный от <code class="text-nowrap" translate="no">click</code> (или вы хотите отключить закрытие всплывающего окна при повторном щелчке элемента триггера), вы можете:</p> <ul> <li>Слушайте событие <code class="text-nowrap" translate="no">hide</code> элемента <code class="text-nowrap" translate="no">&lt;b-popover&gt;</code> и вызовите метод <code class="text-nowrap" translate="no">preventDefault()</code> при необходимости) для объекта <code class="text-nowrap" translate="no">BvEvent</code>, переданного вашему обработчику <code class="text-nowrap" translate="no">hide</code>;</li> <li>Отключите ваш триггерный элемент (если возможно), как только всплывающее окно начнет открываться (через событие <code class="text-nowrap" translate="no">hide</code> или <code class="text-nowrap" translate="no">hidden</code>).</li> </ul> <p>Для практических целей <strong>всплывающие окна с интерактивным контентом должны быть минимальными</strong>. Максимальная ширина всплывающего окна жестко закодирована в Bootstrap v4 CSS на <code class="text-nowrap" translate="no">276px</code>. С высокими всплывающими окнами на маленьких экранах может быть сложнее работать на мобильных устройствах (таких как смартфоны).</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-container&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-3&quot;</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Our triggering (target) element --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-reactive-1&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>\n        Реактивный контент с использованием слотов\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Output from the popover interaction --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Returned values:&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;input1Return &amp;&amp; input2Return&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;max-width: 20rem;&quot;</span>&gt;</span>\n        Название: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input1Return }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n        Цвет: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input2Return }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Our popover title and content render container --&gt;</span>\n    <span class="hljs-comment">&lt;!-- We use placement &#x27;auto&#x27; so popover fits in the best spot on viewport --&gt;</span>\n    <span class="hljs-comment">&lt;!-- We specify the same container as the trigger button, so that popover is close to button --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n      <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;popover-reactive-1&quot;</span>\n      <span class="hljs-attr">triggers</span>=<span class="hljs-string">&quot;click&quot;</span>\n      <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">&quot;popoverShow&quot;</span>\n      <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;auto&quot;</span>\n      <span class="hljs-attr">container</span>=<span class="hljs-string">&quot;my-container&quot;</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;popover&quot;</span>\n      @<span class="hljs-attr">show</span>=<span class="hljs-string">&quot;onShow&quot;</span>\n      @<span class="hljs-attr">shown</span>=<span class="hljs-string">&quot;onShown&quot;</span>\n      @<span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;onHidden&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClose&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Close&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline-block&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-symbol">&amp;times;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        Интерактивный контент\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Name&quot;</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;popover-input-1&quot;</span>\n          <span class="hljs-attr">label-cols</span>=<span class="hljs-string">&quot;3&quot;</span>\n          <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;input1state&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-1&quot;</span>\n          <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Enter your name&quot;</span>\n          <span class="hljs-attr">invalid-feedback</span>=<span class="hljs-string">&quot;This field is required&quot;</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input1&quot;</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-input-1&quot;</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;input1&quot;</span>\n            <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;input1state&quot;</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Color&quot;</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;popover-input-2&quot;</span>\n          <span class="hljs-attr">label-cols</span>=<span class="hljs-string">&quot;3&quot;</span>\n          <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;input2state&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-1&quot;</span>\n          <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Pick a color&quot;</span>\n          <span class="hljs-attr">invalid-feedback</span>=<span class="hljs-string">&quot;This field is required&quot;</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popover-input-2&quot;</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;input2&quot;</span>\n            <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;input2state&quot;</span>\n            <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-alert</span> <span class="hljs-attr">show</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Текущие значения:<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n          Название: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input1 }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n          Цвет: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input2 }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-alert</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClose&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>Отменить<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onOk&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Хорошо<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">input1</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">input1state</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">input2</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">input2state</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [{ <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;- Choose 1 -&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span> }, <span class="hljs-string">&#x27;Red&#x27;</span>, <span class="hljs-string">&#x27;Green&#x27;</span>, <span class="hljs-string">&#x27;Blue&#x27;</span>],\n        <span class="hljs-attr">input1Return</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">input2Return</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">popoverShow</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">watch</span>: {\n      <span class="hljs-function"><span class="hljs-title">input1</span>(<span class="hljs-params">val</span>)</span> {\n        <span class="hljs-keyword">if</span> (val) {\n          <span class="hljs-built_in">this</span>.input1state = <span class="hljs-literal">true</span>\n        }\n      },\n      <span class="hljs-function"><span class="hljs-title">input2</span>(<span class="hljs-params">val</span>)</span> {\n        <span class="hljs-keyword">if</span> (val) {\n          <span class="hljs-built_in">this</span>.input2state = <span class="hljs-literal">true</span>\n        }\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onClose</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.popoverShow = <span class="hljs-literal">false</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">onOk</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.input1) {\n          <span class="hljs-built_in">this</span>.input1state = <span class="hljs-literal">false</span>\n        }\n        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.input2) {\n          <span class="hljs-built_in">this</span>.input2state = <span class="hljs-literal">false</span>\n        }\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.input1 &amp;&amp; <span class="hljs-built_in">this</span>.input2) {\n          <span class="hljs-built_in">this</span>.onClose()\n          <span class="hljs-comment">// Return our popover form results</span>\n          <span class="hljs-built_in">this</span>.input1Return = <span class="hljs-built_in">this</span>.input1\n          <span class="hljs-built_in">this</span>.input2Return = <span class="hljs-built_in">this</span>.input2\n        }\n      },\n      <span class="hljs-function"><span class="hljs-title">onShow</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// This is called just before the popover is shown</span>\n        <span class="hljs-comment">// Reset our popover form variables</span>\n        <span class="hljs-built_in">this</span>.input1 = <span class="hljs-string">&#x27;&#x27;</span>\n        <span class="hljs-built_in">this</span>.input2 = <span class="hljs-string">&#x27;&#x27;</span>\n        <span class="hljs-built_in">this</span>.input1state = <span class="hljs-literal">null</span>\n        <span class="hljs-built_in">this</span>.input2state = <span class="hljs-literal">null</span>\n        <span class="hljs-built_in">this</span>.input1Return = <span class="hljs-string">&#x27;&#x27;</span>\n        <span class="hljs-built_in">this</span>.input2Return = <span class="hljs-string">&#x27;&#x27;</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">onShown</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Called just after the popover has been shown</span>\n        <span class="hljs-comment">// Transfer focus to the first input</span>\n        <span class="hljs-built_in">this</span>.focusRef(<span class="hljs-built_in">this</span>.$refs.input1)\n      },\n      <span class="hljs-function"><span class="hljs-title">onHidden</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Called just after the popover has finished hiding</span>\n        <span class="hljs-comment">// Bring focus back to the button</span>\n        <span class="hljs-built_in">this</span>.focusRef(<span class="hljs-built_in">this</span>.$refs.button)\n      },\n      <span class="hljs-function"><span class="hljs-title">focusRef</span>(<span class="hljs-params">ref</span>)</span> {\n        <span class="hljs-comment">// Some references may be a component, functional component, or plain element</span>\n        <span class="hljs-comment">// This handles that check before focusing, assuming a `focus()` method exists</span>\n        <span class="hljs-comment">// We do this in a double `$nextTick()` to ensure components have</span>\n        <span class="hljs-comment">// updated &amp; popover positioned first</span>\n        <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> {\n            ;(ref.$el || ref).focus()\n          })\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-advanced.vue --&gt;</span></pre></div><h2 id="global-события-экземпляра-root" class="bv-no-focus-ring"><span class="bd-content-title">&#39;Global&#39; события экземпляра $root<a class="anchorjs-link" href="#global-события-экземпляра-root" aria-labelledby="global-события-экземпляра-root"></a></span></h2> <p>Используя экземпляр <code class="text-nowrap" translate="no">$root</code> , можно генерировать и прослушивать события где-то вне компонента, где используется <code class="text-nowrap" translate="no">&lt;b-collapse&gt;</code>. Короче говоря, <code class="text-nowrap" translate="no">$root</code> ведет себя как глобальный источник и слушатель событий. Подробности об экземпляре <code class="text-nowrap" translate="no">$root</code> можно найти в <a href="https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Root-Instance" target="_blank" rel="noopener">официальной документации Vue</a>.</p> <h3 id="скрытие-и-отображение-всплывающих-окон-с-помощью-событий-root" class="bv-no-focus-ring"><span class="bd-content-title">Скрытие и отображение всплывающих окон с помощью событий $root<a class="anchorjs-link" href="#скрытие-и-отображение-всплывающих-окон-с-помощью-событий-root" aria-labelledby="скрытие-и-отображение-всплывающих-окон-с-помощью-событий-root"></a></span></h3> <p>Вы можете закрыть (скрыть) <strong>все открытые всплывающие окна</strong>, создав событие <code class="text-nowrap" translate="no">bv::hide::popover</code> в $root:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::hide::popover&#x27;</span>)</pre></div><p>Чтобы закрыть <strong>определенное всплывающее окно</strong>, передайте <code class="text-nowrap" translate="no">id</code> триггерного элемента или <code class="text-nowrap" translate="no">id</code> всплывающего окна (если он был предоставлен через свойство <code class="text-nowrap" translate="no">id</code>) в качестве первого аргумента:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::hide::popover&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>Чтобы открыть (показать) <strong>определенное всплывающее окно</strong>, передайте <code class="text-nowrap" translate="no">id</code> триггерного элемента или <code class="text-nowrap" translate="no">id</code> всплывающего окна (если он был предоставлен через свойство <code class="text-nowrap" translate="no">id</code>) в качестве первого аргумента при создании события <code class="text-nowrap" translate="no">bv::show::popover</code>:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::show::popover&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>Чтобы открыть все всплывающие окна одновременно, опустите аргумент <code class="text-nowrap" translate="no">id</code> при генерации события <code class="text-nowrap" translate="no">bv::show::popover</code>.</p> <p>Эти события работают как для версии компонента **, так и для версии директивы popover.</p> <p><strong>Примечание:</strong> <em><strong>Элемент триггера</strong> должен существовать в DOM и находиться в видимом состоянии, чтобы всплывающее окно могло создаваться и отображаться.</em></p> <h3 id="отключение-и-включение-всплывающих-окон-с-помощью-событий-root" class="bv-no-focus-ring"><span class="bd-content-title">Отключение и включение всплывающих окон с помощью событий $root<a class="anchorjs-link" href="#отключение-и-включение-всплывающих-окон-с-помощью-событий-root" aria-labelledby="отключение-и-включение-всплывающих-окон-с-помощью-событий-root"></a></span></h3> <p>Вы можете отключить <strong>все</strong> всплывающие окна, создав событие <code class="text-nowrap" translate="no">bv::disable::popover</code> на $root:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::disable::popover&#x27;</span>)</pre></div><p>Чтобы отключить <strong>определенное всплывающее окно</strong>, передайте <code class="text-nowrap" translate="no">id</code> триггерного элемента или <code class="text-nowrap" translate="no">id</code> всплывающего окна (если он был предоставлен через свойство <code class="text-nowrap" translate="no">id</code>) в качестве первого аргумента:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::disable::popover&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>Чтобы включить <strong>определенное всплывающее окно</strong>, передайте <code class="text-nowrap" translate="no">id</code> триггерного элемента или <code class="text-nowrap" translate="no">id</code> всплывающего окна (если он был предоставлен через свойство <code class="text-nowrap" translate="no">id</code>) в качестве первого аргумента при создании события <code class="text-nowrap" translate="no">bv::enable::popover</code>:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::enable::popover&#x27;</span>, <span class="hljs-string">&#x27;my-trigger-button-id&#x27;</span>)</pre></div><p>Чтобы включить все всплывающие окна одновременно, опустите аргумент <code class="text-nowrap" translate="no">id</code> при генерации события <code class="text-nowrap" translate="no">bv::enable::popover</code>.</p> <p>Эти события работают как для компонентной, так и для директивной версии popover.</p> <p><strong>Примечание:</strong> <em>Элемент <strong>триггера</strong> должен существовать в DOM, чтобы всплывающее окно было включено или отключено.</em></p> <h3 id="прослушивание-изменений-всплывающих-окон-с-помощью-событий-root" class="bv-no-focus-ring"><span class="bd-content-title">Прослушивание изменений всплывающих окон с помощью событий $root<a class="anchorjs-link" href="#прослушивание-изменений-всплывающих-окон-с-помощью-событий-root" aria-labelledby="прослушивание-изменений-всплывающих-окон-с-помощью-событий-root"></a></span></h3> <p>Чтобы прослушать любое всплывающее окно, используйте:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-built_in">this</span>.$root.$on(<span class="hljs-string">&#x27;bv::popover::show&#x27;</span>, <span class="hljs-function"><span class="hljs-params">bvEventObj</span> =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;bvEventObj:&#x27;</span>, bvEventObj)\n    })\n  }\n}</pre></div><p>Полный список событий см. в разделе документации <a href="/docs/components/popover#component-reference" class="font-weight-bold">Событий</a>.</p> <h2 id="доступность" class="bv-no-focus-ring"><span class="bd-content-title">Доступность<a class="anchorjs-link" href="#доступность" aria-labelledby="доступность"></a></span></h2> <p>Всплывающие окна в их текущей реализации не слишком доступны при использовании в качестве интерактивных компонентов. Контент не может активно читаться пользователями программ чтения с экрана, а разметка всплывающего окна может располагаться не близко к элементу-триггеру в DOM (поскольку всплывающие окна обычно добавляются в конец <code class="text-nowrap" translate="no">&lt;body&gt;</code>).</p> <p>При использовании всплывающих окон в качестве интерактивного компонента вы должны по возможности переносить фокус в всплывающее окно. Когда всплывающее окно закрывается, вы должны вернуть фокус обратно на ваш триггерный элемент (при условии, что <code class="text-nowrap" translate="no">focus</code> не используется в качестве метода триггера), как мы сделали в приведенном выше примере.</p> <p>Вы также можете захотеть реализовать сдерживание фокуса в содержимом всплывающего окна, пока пользователь взаимодействует с ним (удерживая фокус внутри всплывающего окна, пока оно не будет закрыто пользователем).</p> <p><strong>Примечание:</strong> Эффект анимации этого компонента зависит от медиа-запроса <code class="text-nowrap" translate="no">prefers-reduced-motion</code>. Дополнительную информацию см. в <a href="/docs/reference/accessibility" class="font-weight-bold">разделе с уменьшенным движением в нашей документации по специальным возможностям</a>.</p> <h3 id="настройка-всплывающих-окон-для-пользователей-клавиатуры-и-вспомогательных-технологий" class="bv-no-focus-ring"><span class="bd-content-title">Настройка всплывающих окон для пользователей клавиатуры и вспомогательных технологий<a class="anchorjs-link" href="#настройка-всплывающих-окон-для-пользователей-клавиатуры-и-вспомогательных-технологий" aria-labelledby="настройка-всплывающих-окон-для-пользователей-клавиатуры-и-вспомогательных-технологий"></a></span></h3> <p>Чтобы позволить пользователям клавиатуры активировать ваши всплывающие окна, вы должны добавлять их только к элементам HTML, которые традиционно являются интерактивными и ориентированными на клавиатуру (такими как ссылки или элементы управления формы). Хотя произвольные элементы HTML (такие как <code class="text-nowrap" translate="no">&lt;span&gt;</code>) можно сделать фокусируемыми, добавив атрибут <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code>, это добавит потенциально раздражающие и запутанные позиции табуляции на неинтерактивных элементах для пользователей клавиатуры, и большинство вспомогательные технологии в настоящее время не объявляют содержимое всплывающего окна в этой ситуации. Кроме того, не полагайтесь исключительно на <code class="text-nowrap" translate="no">hover</code> в качестве триггера для ваших всплывающих окон, так как это сделает их невозможными для пользователей клавиатуры.</p> <p>Хотя вы можете вставлять богатый структурированный HTML и/или компоненты во всплывающие окна через слоты, мы настоятельно рекомендуем вам избегать добавления чрезмерного количества контента. В настоящее время всплывающие окна работают следующим образом: после отображения их содержимое привязывается к элементу триггера с атрибутом <code class="text-nowrap" translate="no">aria-describedby</code>. В результате все содержимое всплывающего окна будет объявлено (прочитано) пользователям вспомогательных технологий как один длинный непрерывный поток.</p> <p>Кроме того, хотя в всплывающее окно можно также включать интерактивные элементы управления (такие как элементы формы или ссылки), имейте в виду, что в настоящее время всплывающее окно не управляет порядком фокуса клавиатуры. Когда пользователь с клавиатурой открывает всплывающее окно, фокус остается на вызывающем его элементе, и, поскольку всплывающее окно обычно не следует сразу за триггером в структуре документа, нет гарантии, что перемещение вперед/нажатие <kbd class="notranslate" translate="no">Tab</kbd> приведет к перемещению. пользователя клавиатуры в самом всплывающем окне. Короче говоря, простое добавление интерактивных элементов управления во всплывающее окно, вероятно, сделает эти элементы управления недоступными/непригодными для пользователей клавиатуры и пользователей вспомогательных технологий или, по крайней мере, приведет к нелогичному общему порядку фокуса. <strong>В этих случаях рассмотрите возможность использования вместо этого диалогового окна <code class="text-nowrap" translate="no">&lt;b-modal&gt;</code></strong>.</p>'}}}]);