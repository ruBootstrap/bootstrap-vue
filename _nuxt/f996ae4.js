(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{562:function(t,n){t.exports={baseTOC:{top:"#table",title:"Table",toc:[{href:"#items-record-data",label:"Items (record data)",toc:[{href:"#table-item-notes-and-warnings",label:"Table item notes and warnings"}]},{href:"#fields-column-definitions",label:"Fields (column definitions)",toc:[{href:"#fields-as-a-simple-array",label:"Fields as a simple array"},{href:"#fields-as-an-array-of-objects",label:"Fields as an array of objects"},{href:"#field-definition-reference",label:"Field definition reference"}]},{href:"#primary-key",label:"Primary key",toc:[{href:"#table-row-id-generation",label:"Table row ID generation"},{href:"#table-render-and-transition-optimization",label:"Table render and transition optimization"}]},{href:"#table-style-options",label:"Table style options",toc:[{href:"#table-styling",label:"Table styling"},{href:"#row-styling-and-attributes",label:"Row styling and attributes"},{href:"#responsive-tables",label:"Responsive tables"},{href:"#stacked-tables",label:"Stacked tables"},{href:"#table-caption",label:"Table caption"},{href:"#table-colgroup",label:"Table colgroup"},{href:"#table-busy-state",label:"Table busy state"}]},{href:"#custom-data-rendering",label:"Custom data rendering",toc:[{href:"#scoped-field-slots",label:"Scoped field slots"},{href:"#formatter-callback",label:"Formatter callback"}]},{href:"#header-and-footer-custom-rendering-via-scoped-slots",label:"Header and Footer custom rendering via scoped slots",toc:[{href:"#adding-additional-rows-to-the-header",label:"Adding additional rows to the header"},{href:"#creating-a-custom-footer",label:"Creating a custom footer"}]},{href:"#custom-empty-and-emptyfiltered-rendering-via-slots",label:"Custom empty and emptyfiltered rendering via slots"},{href:"#advanced-features",label:"Advanced features",toc:[{href:"#sticky-headers",label:"Sticky headers"},{href:"#sticky-columns",label:"Sticky columns"},{href:"#row-details-support",label:"Row details support"},{href:"#row-select-support",label:"Row select support"},{href:"#table-body-transition-support",label:"Table body transition support"},{href:"#v-model-binding",label:"v-model binding"}]},{href:"#sorting",label:"Sorting",toc:[{href:"#sort-icon-alignment",label:"Sort icon alignment"},{href:"#customizing-the-sort-icons",label:"Customizing the sort icons"},{href:"#sort-compare-routine",label:"Sort-compare routine"},{href:"#internal-sorting-and-locale-handling",label:"Internal sorting and locale handling"},{href:"#custom-sort-compare-routine",label:"Custom sort-compare routine"},{href:"#disable-local-sorting",label:"Disable local sorting"},{href:"#change-initial-sort-direction",label:"Change initial sort direction"}]},{href:"#filtering",label:"Filtering",toc:[{href:"#built-in-filtering",label:"Built in filtering"},{href:"#built-in-filtering-options",label:"Built in filtering options"},{href:"#custom-filter-function",label:"Custom filter function"},{href:"#filter-events",label:"Filter events"},{href:"#debouncing-filter-criteria-changes",label:"Debouncing filter criteria changes"},{href:"#filtering-notes",label:"Filtering notes"}]},{href:"#pagination",label:"Pagination"},{href:"#using-items-provider-functions",label:"Using items provider functions",toc:[{href:"#automated-table-busy-state",label:"Automated table busy state"},{href:"#provider-paging-filtering-and-sorting",label:"Provider paging, filtering, and sorting"},{href:"#force-refreshing-of-table-data",label:"Force refreshing of table data"},{href:"#detection-of-sorting-change",label:"Detection of sorting change"},{href:"#server-side-rendering",label:"Server side rendering"}]},{href:"#light-weight-tables",label:"Light-weight tables",toc:[{href:"#table-lite-as-a-plugin",label:"Table lite as a plugin"}]},{href:"#simple-tables",label:"Simple tables",toc:[{href:"#simple-tables-and-stacked-mode",label:"Simple tables and stacked mode"},{href:"#simple-tables-and-sticky-columns",label:"Simple tables and sticky columns"},{href:"#table-simple-as-a-plugin",label:"Table simple as a plugin"}]},{href:"#table-helper-components",label:"Table helper components"},{href:"#accessibility",label:"Accessibility",toc:[{href:"#heading-accessibility",label:"Heading accessibility"},{href:"#data-row-accessibility",label:"Data row accessibility"},{href:"#row-event-accessibility",label:"Row event accessibility"}]},{href:"#complete-example",label:"Complete example"}]},titleLead:'<h1 id="table" class="bv-no-focus-ring"><span class="bd-content-title">Table</span></h1> <p class="bd-lead">For displaying tabular data, <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> supports pagination, filtering, sorting, custom rendering, various style options, events, and asynchronous data. For simple display of tabular data without all the fancy features, BootstrapVue provides two lightweight alternative components <a href="#light-weight-tables" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code></a> and <a href="#simple-tables" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code></a>.</p>',body:'<p><strong>Example: Basic usage</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">striped</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Jami&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Carney&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table.vue --&gt;</span></pre></div><h2 id="items-record-data" class="bv-no-focus-ring"><span class="bd-content-title">Items (record data)<a class="anchorjs-link" href="#items-record-data" aria-labelledby="items-record-data"></a></span></h2> <p><code class="text-nowrap" translate="no">items</code> is the table data in array format, where each record (row) data are keyed objects. Example format:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> items = [\n  { <span class="hljs-attr">age</span>: <span class="hljs-number">32</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Cyndi&#x27;</span> },\n  { <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Havij&#x27;</span> },\n  { <span class="hljs-attr">age</span>: <span class="hljs-number">42</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Robert&#x27;</span> }\n]</pre></div><p><code class="text-nowrap" translate="no">&lt;b-table&gt;</code> automatically samples the first row to extract field names (the keys in the record data). Field names are automatically &quot;humanized&quot; by converting <code class="text-nowrap" translate="no">kebab-case</code>, <code class="text-nowrap" translate="no">snake_case</code>, and <code class="text-nowrap" translate="no">camelCase</code> to individual words and capitalizes each word. Example conversions:</p> <ul> <li><code class="text-nowrap" translate="no">first_name</code> becomes <code class="text-nowrap" translate="no">First Name</code></li> <li><code class="text-nowrap" translate="no">last-name</code> becomes <code class="text-nowrap" translate="no">Last Name</code></li> <li><code class="text-nowrap" translate="no">age</code> becomes <code class="text-nowrap" translate="no">Age</code></li> <li><code class="text-nowrap" translate="no">YEAR</code> remains <code class="text-nowrap" translate="no">YEAR</code></li> <li><code class="text-nowrap" translate="no">isActive</code> becomes <code class="text-nowrap" translate="no">Is Active</code></li> </ul> <p>These titles will be displayed in the table header, in the order they appear in the <strong>first</strong> record of data. See the <a href="#fields-column-definitions" class="font-weight-bold">Fields</a> section below for customizing how field headings appear.</p> <p><strong>Note:</strong> Field order is not guaranteed. Fields will typically appear in the order they were defined in the first row, but this may not always be the case depending on the version of browser in use. See section <a href="#fields-column-definitions" class="font-weight-bold">Fields (column definitions)</a> below to see how to guarantee the order of fields, and to override the headings generated.</p> <p>Record data may also have additional special reserved name keys for colorizing rows and individual cells (variants), and for triggering additional row detail. The supported optional item record modifier properties (make sure your field keys do not conflict with these names):</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">_cellVariants</code></td> <td>Object</td> <td>Bootstrap contextual state applied to individual cells. Keyed by field (See the <a href="/docs/reference/color-variants" class="font-weight-bold">Color Variants</a> for supported values). These variants map to classes <code class="text-nowrap" translate="no">table-${variant}</code> or <code class="text-nowrap" translate="no">bg-${variant}</code> (when the <code class="text-nowrap" translate="no">dark</code> prop is set).</td> </tr> <tr> <td><code class="text-nowrap" translate="no">_rowVariant</code></td> <td>String</td> <td>Bootstrap contextual state applied to the entire row (See the <a href="/docs/reference/color-variants" class="font-weight-bold">Color Variants</a> for supported values). These variants map to classes <code class="text-nowrap" translate="no">table-${variant}</code> or <code class="text-nowrap" translate="no">bg-${variant}</code> (when the <code class="text-nowrap" translate="no">dark</code> prop is set)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">_showDetails</code></td> <td>Boolean</td> <td>Used to trigger the display of the <code class="text-nowrap" translate="no">row-details</code> scoped slot. See section <a href="#row-details-support" class="font-weight-bold">Row details support</a> below for additional information</td> </tr> </tbody></table> </div><p><strong>Example: Using variants for table cells</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          {\n            <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>,\n            <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>,\n            <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span>,\n            <span class="hljs-attr">_rowVariant</span>: <span class="hljs-string">&#x27;danger&#x27;</span>\n          },\n          {\n            <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,\n            <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Thor&#x27;</span>,\n            <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;MacDonald&#x27;</span>,\n            <span class="hljs-attr">_cellVariants</span>: { <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;warning&#x27;</span> }\n          },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">29</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dick&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Dunlap&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-variants.vue --&gt;</span></pre></div><p><code class="text-nowrap" translate="no">items</code> can also be a reference to a <em>provider</em> function, which returns an <code class="text-nowrap" translate="no">Array</code> of items data. Provider functions can also be asynchronous:</p> <ul> <li>By returning <code class="text-nowrap" translate="no">null</code> (or <code class="text-nowrap" translate="no">undefined</code>) and calling a callback, when the data is ready, with the data array as the only argument to the callback,</li> <li>By returning a <code class="text-nowrap" translate="no">Promise</code> that resolves to an array.</li> </ul> <p>See the <a href="#using-items-provider-functions" class="font-weight-bold">&quot;Using Items Provider functions&quot;</a> section below for more details.</p> <h3 id="table-item-notes-and-warnings" class="bv-no-focus-ring"><span class="bd-content-title">Table item notes and warnings<a class="anchorjs-link" href="#table-item-notes-and-warnings" aria-labelledby="table-item-notes-and-warnings"></a></span></h3> <ul> <li>Avoid manipulating record data in place, as changes to the underlying items data will cause either the row or entire table to be re-rendered. See <a href="#primary-key" class="font-weight-bold">Primary Key</a>, below, for ways to minimize Vue&#39;s re-rendering of rows.</li> <li><code class="text-nowrap" translate="no">items</code> array records should be a simple object and <strong>must</strong> avoid placing data that may have circular references in the values within a row. <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> serializes the row data into strings for sorting and filtering, and circular references will cause stack overflows to occur and your app to crash!</li> </ul> <h2 id="fields-column-definitions" class="bv-no-focus-ring"><span class="bd-content-title">Fields (column definitions)<a class="anchorjs-link" href="#fields-column-definitions" aria-labelledby="fields-column-definitions"></a></span></h2> <p>The <code class="text-nowrap" translate="no">fields</code> prop is used to customize the table columns headings, and in which order the columns of data are displayed. The field object keys (i.e. <code class="text-nowrap" translate="no">age</code> or <code class="text-nowrap" translate="no">first_name</code> as shown below) are used to extract the value from each item (record) row, and to provide additional features such as enabling <a href="#sorting" class="font-weight-bold">sorting</a> on the column, etc.</p> <p>Fields can be provided as a <em>simple array</em> or an <em>array of objects</em>. <strong>Internally the fields data will be normalized into the <em>array of objects</em> format</strong>. Events or slots that include the column <code class="text-nowrap" translate="no">field</code> data will be in the normalized field object format (array of objects for <code class="text-nowrap" translate="no">fields</code>, or an object for an individual <code class="text-nowrap" translate="no">field</code>).</p> <h3 id="fields-as-a-simple-array" class="bv-no-focus-ring"><span class="bd-content-title">Fields as a simple array<a class="anchorjs-link" href="#fields-as-a-simple-array" aria-labelledby="fields-as-a-simple-array"></a></span></h3> <p>Fields can be a simple array, for defining the order of the columns, and which columns to display:</p> <p><strong>Example: Using <code class="text-nowrap" translate="no">array</code> fields definition</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">striped</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-comment">// Note `isActive` is left out and will not appear in the rendered table</span>\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Jami&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Carney&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-fields-array.vue --&gt;</span></pre></div><h3 id="fields-as-an-array-of-objects" class="bv-no-focus-ring"><span class="bd-content-title">Fields as an array of objects<a class="anchorjs-link" href="#fields-as-an-array-of-objects" aria-labelledby="fields-as-an-array-of-objects"></a></span></h3> <p>Fields can be a an array of objects, providing additional control over the fields (such as sorting, formatting, etc.). Only columns (keys) that appear in the fields array will be shown:</p> <p><strong>Example: Using array of objects fields definition</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">striped</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-comment">// Note &#x27;isActive&#x27; is left out and will not appear in the rendered table</span>\n        <span class="hljs-attr">fields</span>: [\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;last_name&#x27;</span>,\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>\n          },\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;first_name&#x27;</span>,\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">false</span>\n          },\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;age&#x27;</span>,\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Person age&#x27;</span>,\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>,\n            <span class="hljs-comment">// Variant applies to the whole column, including the header and footer</span>\n            <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;danger&#x27;</span>\n          }\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Jami&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Carney&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-fields-array-of-objects.vue --&gt;</span></pre></div><h3 id="field-definition-reference" class="bv-no-focus-ring"><span class="bd-content-title">Field definition reference<a class="anchorjs-link" href="#field-definition-reference" aria-labelledby="field-definition-reference"></a></span></h3> <p>The following field properties are recognized:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">key</code></td> <td>String</td> <td>The key for selecting data from the record in the items array. Required when setting the <code class="text-nowrap" translate="no">fields</code> via an array of objects. The <code class="text-nowrap" translate="no">key</code> is also used for generating the <a href="#custom-data-rendering" class="font-weight-bold">custom data rendering</a> and <a href="#header-and-footer-custom-rendering-via-scoped-slots" class="font-weight-bold">custom header and footer</a> slot names.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">label</code></td> <td>String</td> <td>Appears in the columns table header (and footer if <code class="text-nowrap" translate="no">foot-clone</code> is set). Defaults to the field&#39;s key (in humanized format) if not provided. It&#39;s possible to use empty labels by assigning an empty string <code class="text-nowrap" translate="no">&quot;&quot;</code> but be sure you also set <code class="text-nowrap" translate="no">headerTitle</code> to provide non-sighted users a hint about the column contents.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">headerTitle</code></td> <td>String</td> <td>Text to place on the fields header <code class="text-nowrap" translate="no">&lt;th&gt;</code> attribute <code class="text-nowrap" translate="no">title</code>. Defaults to no <code class="text-nowrap" translate="no">title</code> attribute.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">headerAbbr</code></td> <td>String</td> <td>Text to place on the fields header <code class="text-nowrap" translate="no">&lt;th&gt;</code> attribute <code class="text-nowrap" translate="no">abbr</code>. Set this to the unabbreviated version of the label (or title) if label (or title) is an abbreviation. Defaults to no <code class="text-nowrap" translate="no">abbr</code> attribute.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">class</code></td> <td>String or Array</td> <td>Class name (or array of class names) to add to <code class="text-nowrap" translate="no">&lt;th&gt;</code> <strong>and</strong> <code class="text-nowrap" translate="no">&lt;td&gt;</code> in the column.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">formatter</code></td> <td>String or Function</td> <td>A formatter callback function or name of a method in your component, can be used instead of (or in conjunction with) scoped field slots. The formatter will be called with the syntax <code class="text-nowrap" translate="no">formatter(value, key, item)</code>. Refer to <a href="#custom-data-rendering" class="font-weight-bold">Custom Data Rendering</a> for more details.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">sortable</code></td> <td>Boolean</td> <td>Enable sorting on this column. Refer to the <a href="#sorting" class="font-weight-bold">Sorting</a> Section for more details.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">sortKey</code></td> <td>String</td> <td><span class="badge badge-secondary">v2.17.0+</span> Set the value of <code class="text-nowrap" translate="no">sortBy</code> for the column in the emitted context when <code class="text-nowrap" translate="no">no-local-sorting</code> is <code class="text-nowrap" translate="no">true</code>.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">sortDirection</code></td> <td>String</td> <td>Set the initial sort direction on this column when it becomes sorted. Refer to the <a href="#change-initial-sort-direction" class="font-weight-bold">Change initial sort direction</a> Section for more details.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">sortByFormatted</code></td> <td>Boolean or Function</td> <td>Sort the column by the result of the field&#39;s <code class="text-nowrap" translate="no">formatter</code> callback function when set to <code class="text-nowrap" translate="no">true</code>. Default is <code class="text-nowrap" translate="no">false</code>. Boolean has no effect if the field does not have a <code class="text-nowrap" translate="no">formatter</code>. Optionally accepts a formatter function <em>reference</em> to format the value for sorting purposes only. Refer to the <a href="#sorting" class="font-weight-bold">Sorting</a> Section for more details.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">filterByFormatted</code></td> <td>Boolean or Function</td> <td>Filter the column by the result of the field&#39;s <code class="text-nowrap" translate="no">formatter</code> callback function when set to <code class="text-nowrap" translate="no">true</code>. Default is <code class="text-nowrap" translate="no">false</code>. Boolean has no effect if the field does not have a <code class="text-nowrap" translate="no">formatter</code>. Optionally accepts a formatter function <em>reference</em> to format the value for filtering purposes only. Refer to the <a href="#filtering" class="font-weight-bold">Filtering</a> section for more details.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tdClass</code></td> <td>String or Array or Function</td> <td>Class name (or array of class names) to add to <code class="text-nowrap" translate="no">&lt;tbody&gt;</code> data <code class="text-nowrap" translate="no">&lt;td&gt;</code> cells in the column. If custom classes per cell are required, a callback function can be specified instead. The function will be called as <code class="text-nowrap" translate="no">tdClass(value, key, item)</code> and it must return an <code class="text-nowrap" translate="no">Array</code> or <code class="text-nowrap" translate="no">String</code>.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">thClass</code></td> <td>String or Array</td> <td>Class name (or array of class names) to add to this field&#39;s <code class="text-nowrap" translate="no">&lt;thead&gt;</code>/<code class="text-nowrap" translate="no">&lt;tfoot&gt;</code> heading <code class="text-nowrap" translate="no">&lt;th&gt;</code> cell.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">thStyle</code></td> <td>Object</td> <td>JavaScript object representing CSS styles you would like to apply to the table <code class="text-nowrap" translate="no">&lt;thead&gt;</code>/<code class="text-nowrap" translate="no">&lt;tfoot&gt;</code> field <code class="text-nowrap" translate="no">&lt;th&gt;</code>.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">variant</code></td> <td>String</td> <td>Apply contextual class to all the <code class="text-nowrap" translate="no">&lt;th&gt;</code> <strong>and</strong> <code class="text-nowrap" translate="no">&lt;td&gt;</code> in the column - <code class="text-nowrap" translate="no">active</code>, <code class="text-nowrap" translate="no">success</code>, <code class="text-nowrap" translate="no">info</code>, <code class="text-nowrap" translate="no">warning</code>, <code class="text-nowrap" translate="no">danger</code>. These variants map to classes <code class="text-nowrap" translate="no">thead-${variant}</code> (in the header), <code class="text-nowrap" translate="no">table-${variant}</code> (in the body), or <code class="text-nowrap" translate="no">bg-${variant}</code> (when the prop <code class="text-nowrap" translate="no">dark</code> is set).</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tdAttr</code></td> <td>Object or Function</td> <td>JavaScript object representing additional attributes to apply to the <code class="text-nowrap" translate="no">&lt;tbody&gt;</code> field <code class="text-nowrap" translate="no">&lt;td&gt;</code> cell. If custom attributes per cell are required, a callback function can be specified instead. The function will be called as <code class="text-nowrap" translate="no">tdAttr(value, key, item)</code> and it must return an <code class="text-nowrap" translate="no">Object</code>.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">thAttr</code></td> <td>Object or Function</td> <td>JavaScript object representing additional attributes to apply to the field&#39;s <code class="text-nowrap" translate="no">&lt;thead&gt;</code>/<code class="text-nowrap" translate="no">&lt;tfoot&gt;</code> heading <code class="text-nowrap" translate="no">&lt;th&gt;</code> cell. If the field&#39;s <code class="text-nowrap" translate="no">isRowHeader</code> is set to <code class="text-nowrap" translate="no">true</code>, the attributes will also apply to the <code class="text-nowrap" translate="no">&lt;tbody&gt;</code> field <code class="text-nowrap" translate="no">&lt;th&gt;</code> cell. If custom attributes per cell are required, a callback function can be specified instead. The function will be called as <code class="text-nowrap" translate="no">thAttr(value, key, item, type)</code> and it must return an <code class="text-nowrap" translate="no">Object</code>.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">isRowHeader</code></td> <td>Boolean</td> <td>When set to <code class="text-nowrap" translate="no">true</code>, the field&#39;s item data cell will be rendered with <code class="text-nowrap" translate="no">&lt;th&gt;</code> rather than the default of <code class="text-nowrap" translate="no">&lt;td&gt;</code>.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">stickyColumn</code></td> <td>Boolean</td> <td>When set to <code class="text-nowrap" translate="no">true</code>, and the table in <a href="#responsive-tables" class="font-weight-bold">responsive</a> mode or has <a href="#sticky-headers" class="font-weight-bold">sticky headers</a>, will cause the column to become fixed to the left when the table&#39;s horizontal scrollbar is scrolled. See <a href="#sticky-columns" class="font-weight-bold">Sticky columns</a> for more details</td> </tr> </tbody></table> </div><p><strong>Notes:</strong></p> <ul> <li>Field properties, if not present, default to <code class="text-nowrap" translate="no">null</code> (falsey) unless otherwise stated above.</li> <li><code class="text-nowrap" translate="no">class</code>, <code class="text-nowrap" translate="no">thClass</code>, <code class="text-nowrap" translate="no">tdClass</code> etc. will not work with classes that are defined in scoped CSS, unless you are using VueLoader&#39;s <a href="https://vue-loader.vuejs.org/guide/scoped-css.html#child-component-root-elements" target="_blank" rel="noopener">Deep selector</a>.</li> <li>For information on the syntax supported by <code class="text-nowrap" translate="no">thStyle</code>, see <a href="https://vuejs.org/v2/guide/class-and-style.html#Binding-Inline-Styles" target="_blank" rel="noopener">Class and Style Bindings</a> in the Vue.js guide.</li> <li>Any additional properties added to the field definition objects will be left intact - so you can access them via the named scoped slots for custom data, header, and footer rendering.</li> </ul> <p>For information and usage about scoped slots and formatters, refer to the <a href="#custom-data-rendering" class="font-weight-bold">Custom Data Rendering</a> section below.</p> <p>Feel free to mix and match simple array and object array together:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">const</span> fields = [\n  { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;First&#x27;</span> },\n  { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;last_name&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Last&#x27;</span> },\n  <span class="hljs-string">&#x27;age&#x27;</span>,\n  <span class="hljs-string">&#x27;sex&#x27;</span>\n]</pre></div><h2 id="primary-key" class="bv-no-focus-ring"><span class="bd-content-title">Primary key<a class="anchorjs-link" href="#primary-key" aria-labelledby="primary-key"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-table&gt;</code> provides an additional prop <code class="text-nowrap" translate="no">primary-key</code>, which you can use to identify the <em>name</em> of the field key that <em>uniquely</em> identifies the row.</p> <p>The value specified by the primary column key <strong>must be</strong> either a <code class="text-nowrap" translate="no">string</code> or <code class="text-nowrap" translate="no">number</code>, and <strong>must be unique</strong> across all rows in the table.</p> <p>The primary key column does not need to appear in the displayed fields.</p> <h3 id="table-row-id-generation" class="bv-no-focus-ring"><span class="bd-content-title">Table row ID generation<a class="anchorjs-link" href="#table-row-id-generation" aria-labelledby="table-row-id-generation"></a></span></h3> <p>When provided, the <code class="text-nowrap" translate="no">primary-key</code> will generate a unique ID for each item row <code class="text-nowrap" translate="no">&lt;tr&gt;</code> element. The ID will be in the format of <code class="text-nowrap" translate="no">{table-id}__row_{primary-key-value}</code>, where <code class="text-nowrap" translate="no">{table-id}</code> is the unique ID of the <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> and <code class="text-nowrap" translate="no">{primary-key-value}</code> is the value of the item&#39;s field value for the field specified by <code class="text-nowrap" translate="no">primary-key</code>.</p> <h3 id="table-render-and-transition-optimization" class="bv-no-focus-ring"><span class="bd-content-title">Table render and transition optimization<a class="anchorjs-link" href="#table-render-and-transition-optimization" aria-labelledby="table-render-and-transition-optimization"></a></span></h3> <p>The <code class="text-nowrap" translate="no">primary-key</code> is also used by <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> to help Vue optimize the rendering of table rows. Internally, the value of the field key specified by the <code class="text-nowrap" translate="no">primary-key</code> prop is used as the Vue <code class="text-nowrap" translate="no">:key</code> value for each rendered item row <code class="text-nowrap" translate="no">&lt;tr&gt;</code> element.</p> <p>If you are seeing rendering issue (i.e. tooltips hiding or unexpected subcomponent re-usage when item data changes or data is sorted/filtered/edited) or table row transitions are not working, setting the <code class="text-nowrap" translate="no">primary-key</code> prop (if you have a unique identifier per row) can alleviate these issues.</p> <p>Specifying the <code class="text-nowrap" translate="no">primary-key</code> column is handy if you are using 3rd party table transitions or drag and drop plugins, as they rely on having a consistent and unique per row <code class="text-nowrap" translate="no">:key</code> value.</p> <p>If <code class="text-nowrap" translate="no">primary-key</code> is not provided, <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> will auto-generate keys based on the displayed row&#39;s index number (i.e. position in the <em>displayed</em> table rows). This may cause GUI issues such as sub components/elements that are rendering with previous results (i.e. being re-used by Vue&#39;s render patch optimization routines). Specifying a <code class="text-nowrap" translate="no">primary-key</code> column can alleviate this issue (or you can place a unique <code class="text-nowrap" translate="no">:key</code> on your element/components in your custom formatted field slots).</p> <p>Refer to the <a href="#table-body-transition-support" class="font-weight-bold">Table body transition support</a> section for additional details.</p> <h2 id="table-style-options" class="bv-no-focus-ring"><span class="bd-content-title">Table style options<a class="anchorjs-link" href="#table-style-options" aria-labelledby="table-style-options"></a></span></h2> <h3 id="table-styling" class="bv-no-focus-ring"><span class="bd-content-title">Table styling<a class="anchorjs-link" href="#table-styling" aria-labelledby="table-styling"></a></span></h3> <p><code class="text-nowrap" translate="no">&lt;b-table&gt;</code> provides several props to alter the style of the table:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>prop</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">striped</code></td> <td>Boolean</td> <td>Add zebra-striping to the table rows within the <code class="text-nowrap" translate="no">&lt;tbody&gt;</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">bordered</code></td> <td>Boolean</td> <td>For borders on all sides of the table and cells.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">borderless</code></td> <td>Boolean</td> <td>removes inner borders from table.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">outlined</code></td> <td>Boolean</td> <td>For a thin border on all sides of the table. Has no effect if <code class="text-nowrap" translate="no">bordered</code> is set.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">small</code></td> <td>Boolean</td> <td>To make tables more compact by cutting cell padding in half.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">hover</code></td> <td>Boolean</td> <td>To enable a hover highlighting state on table rows within a <code class="text-nowrap" translate="no">&lt;tbody&gt;</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">dark</code></td> <td>Boolean</td> <td>Invert the colors — with light text on dark backgrounds (equivalent to Bootstrap v4 class <code class="text-nowrap" translate="no">.table-dark</code>)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">fixed</code></td> <td>Boolean</td> <td>Generate a table with equal fixed-width columns (<code class="text-nowrap" translate="no">table-layout: fixed;</code>)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">responsive</code></td> <td>Boolean or String</td> <td>Generate a responsive table to make it scroll horizontally. Set to <code class="text-nowrap" translate="no">true</code> for an always responsive table, or set it to one of the breakpoints <code class="text-nowrap" translate="no">&#39;sm&#39;</code>, <code class="text-nowrap" translate="no">&#39;md&#39;</code>, <code class="text-nowrap" translate="no">&#39;lg&#39;</code>, or <code class="text-nowrap" translate="no">&#39;xl&#39;</code> to make the table responsive (horizontally scroll) only on screens smaller than the breakpoint. See <a href="#responsive-tables" class="font-weight-bold">Responsive tables</a> below for details.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">sticky-header</code></td> <td>Boolean or String</td> <td>Generates a vertically scrollable table with sticky headers. Set to <code class="text-nowrap" translate="no">true</code> to enable sticky headers (default table max-height of <code class="text-nowrap" translate="no">300px</code>), or set it to a string containing a height (with CSS units) to specify a maximum height other than <code class="text-nowrap" translate="no">300px</code>. See the <a href="#sticky-headers" class="font-weight-bold">Sticky header</a> section below for details.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">stacked</code></td> <td>Boolean or String</td> <td>Generate a responsive stacked table. Set to <code class="text-nowrap" translate="no">true</code> for an always stacked table, or set it to one of the breakpoints <code class="text-nowrap" translate="no">&#39;sm&#39;</code>, <code class="text-nowrap" translate="no">&#39;md&#39;</code>, <code class="text-nowrap" translate="no">&#39;lg&#39;</code>, or <code class="text-nowrap" translate="no">&#39;xl&#39;</code> to make the table visually stacked only on screens smaller than the breakpoint. See <a href="#stacked-tables" class="font-weight-bold">Stacked tables</a> below for details.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">caption-top</code></td> <td>Boolean</td> <td>If the table has a caption, and this prop is set to <code class="text-nowrap" translate="no">true</code>, the caption will be visually placed above the table. If <code class="text-nowrap" translate="no">false</code> (the default), the caption will be visually placed below the table.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">table-variant</code></td> <td>String</td> <td>Give the table an overall theme color variant.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">head-variant</code></td> <td>String</td> <td>Use <code class="text-nowrap" translate="no">&#39;light&#39;</code> or <code class="text-nowrap" translate="no">&#39;dark&#39;</code> to make table header appear light or dark gray, respectively</td> </tr> <tr> <td><code class="text-nowrap" translate="no">foot-variant</code></td> <td>String</td> <td>Use <code class="text-nowrap" translate="no">&#39;light&#39;</code> or <code class="text-nowrap" translate="no">&#39;dark&#39;</code> to make table footer appear light or dark gray, respectively. If not set, <code class="text-nowrap" translate="no">head-variant</code> will be used. Has no effect if <code class="text-nowrap" translate="no">foot-clone</code> is not set</td> </tr> <tr> <td><code class="text-nowrap" translate="no">foot-clone</code></td> <td>Boolean</td> <td>Turns on the table footer, and defaults with the same contents a the table header</td> </tr> <tr> <td><code class="text-nowrap" translate="no">no-footer-sorting</code></td> <td>Boolean</td> <td>When <code class="text-nowrap" translate="no">foot-clone</code> is true and the table is sortable, disables the sorting icons and click behaviour on the footer heading cells. Refer to the <a href="#sorting" class="font-weight-bold">Sorting</a> section below for more details.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">no-border-collapse</code></td> <td>Boolean</td> <td>Disables the default of collapsing of the table borders. Mainly for use with <a href="#sticky-headers" class="font-weight-bold">sticky headers</a> and/or <a href="#sticky-columns" class="font-weight-bold">sticky columns</a>. Will cause the appearance of double borders in some situations.</td> </tr> </tbody></table> </div><p><strong>Note:</strong> The table style options <code class="text-nowrap" translate="no">fixed</code>, <code class="text-nowrap" translate="no">stacked</code>, <code class="text-nowrap" translate="no">caption-top</code>, <code class="text-nowrap" translate="no">no-border-collapse</code>, sticky headers, sticky columns and the table sorting feature, all require BootstrapVue&#39;s custom CSS.</p> <p><strong>Example: Basic table styles</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Table Options&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;striped&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Striped<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;bordered&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Bordered<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;borderless&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Borderless<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;outlined&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Outlined<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;small&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Small<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;hover&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Hover<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;dark&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Dark<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fixed&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Fixed<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;footClone&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Foot Clone<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;noCollapse&quot;</span> <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>No border collapse<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Head Variant&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;headVariant&quot;</span>\n        <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-lg-2&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;null&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>None<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Light<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dark&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Dark<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Table Variant&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;table-style-variant&quot;</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table-style-variant&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;tableVariant&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;tableVariants&quot;</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">first</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>-- None --<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">:striped</span>=<span class="hljs-string">&quot;striped&quot;</span>\n      <span class="hljs-attr">:bordered</span>=<span class="hljs-string">&quot;bordered&quot;</span>\n      <span class="hljs-attr">:borderless</span>=<span class="hljs-string">&quot;borderless&quot;</span>\n      <span class="hljs-attr">:outlined</span>=<span class="hljs-string">&quot;outlined&quot;</span>\n      <span class="hljs-attr">:small</span>=<span class="hljs-string">&quot;small&quot;</span>\n      <span class="hljs-attr">:hover</span>=<span class="hljs-string">&quot;hover&quot;</span>\n      <span class="hljs-attr">:dark</span>=<span class="hljs-string">&quot;dark&quot;</span>\n      <span class="hljs-attr">:fixed</span>=<span class="hljs-string">&quot;fixed&quot;</span>\n      <span class="hljs-attr">:foot-clone</span>=<span class="hljs-string">&quot;footClone&quot;</span>\n      <span class="hljs-attr">:no-border-collapse</span>=<span class="hljs-string">&quot;noCollapse&quot;</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>\n      <span class="hljs-attr">:head-variant</span>=<span class="hljs-string">&quot;headVariant&quot;</span>\n      <span class="hljs-attr">:table-variant</span>=<span class="hljs-string">&quot;tableVariant&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> }\n        ],\n        <span class="hljs-attr">tableVariants</span>: [\n          <span class="hljs-string">&#x27;primary&#x27;</span>,\n          <span class="hljs-string">&#x27;secondary&#x27;</span>,\n          <span class="hljs-string">&#x27;info&#x27;</span>,\n          <span class="hljs-string">&#x27;danger&#x27;</span>,\n          <span class="hljs-string">&#x27;warning&#x27;</span>,\n          <span class="hljs-string">&#x27;success&#x27;</span>,\n          <span class="hljs-string">&#x27;light&#x27;</span>,\n          <span class="hljs-string">&#x27;dark&#x27;</span>\n        ],\n        <span class="hljs-attr">striped</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">bordered</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">borderless</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">outlined</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">small</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">hover</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">dark</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">fixed</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">footClone</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">headVariant</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">tableVariant</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">noCollapse</span>: <span class="hljs-literal">false</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-bordered.vue --&gt;</span></pre></div><h3 id="row-styling-and-attributes" class="bv-no-focus-ring"><span class="bd-content-title">Row styling and attributes<a class="anchorjs-link" href="#row-styling-and-attributes" aria-labelledby="row-styling-and-attributes"></a></span></h3> <p>You can also style every row using the <code class="text-nowrap" translate="no">tbody-tr-class</code> prop, and optionally supply additional attributes via the <code class="text-nowrap" translate="no">tbody-tr-attr</code> prop:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">tbody-tr-class</code></td> <td>String, Array or Function</td> <td>Classes to be applied to every row on the table. If a function is given, it will be called as <code class="text-nowrap" translate="no">tbodyTrClass( item, type )</code> and it may return an <code class="text-nowrap" translate="no">Array</code>, <code class="text-nowrap" translate="no">Object</code> or <code class="text-nowrap" translate="no">String</code>.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tbody-tr-attr</code></td> <td>Object or Function</td> <td>Attributes to be applied to every row on the table. If a function is given, it will be called as <code class="text-nowrap" translate="no">tbodyTrAttr( item, type )</code> and it must return an <code class="text-nowrap" translate="no">Object</code>.</td> </tr> </tbody></table> </div><p>When passing a function reference to <code class="text-nowrap" translate="no">tbody-tr-class</code> or <code class="text-nowrap" translate="no">tbody-tr-attr</code>, the function&#39;s arguments will be as follows:</p> <ul> <li><code class="text-nowrap" translate="no">item</code> - The item record data associated with the row. For rows that are not associated with an item record, this value will be <code class="text-nowrap" translate="no">null</code> or <code class="text-nowrap" translate="no">undefined</code></li> <li><code class="text-nowrap" translate="no">type</code> - The type of row being rendered. <code class="text-nowrap" translate="no">&#39;row&#39;</code> for an item row, <code class="text-nowrap" translate="no">&#39;row-details&#39;</code> for an item details row, <code class="text-nowrap" translate="no">&#39;row-top&#39;</code> for the fixed row top slot, <code class="text-nowrap" translate="no">&#39;row-bottom&#39;</code> for the fixed row bottom slot, or <code class="text-nowrap" translate="no">&#39;table-busy&#39;</code> for the table busy slot.</li> </ul> <p><strong>Example: Basic row styles</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span> <span class="hljs-attr">:tbody-tr-class</span>=<span class="hljs-string">&quot;rowClass&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;awesome&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> }\n        ]\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">rowClass</span>(<span class="hljs-params">item, type</span>)</span> {\n        <span class="hljs-keyword">if</span> (!item || type !== <span class="hljs-string">&#x27;row&#x27;</span>) <span class="hljs-keyword">return</span>\n        <span class="hljs-keyword">if</span> (item.status === <span class="hljs-string">&#x27;awesome&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;table-success&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-styled-row.vue --&gt;</span></pre></div><h3 id="responsive-tables" class="bv-no-focus-ring"><span class="bd-content-title">Responsive tables<a class="anchorjs-link" href="#responsive-tables" aria-labelledby="responsive-tables"></a></span></h3> <p>Responsive tables allow tables to be scrolled horizontally with ease. Make any table responsive across all viewports by setting the prop <code class="text-nowrap" translate="no">responsive</code> to <code class="text-nowrap" translate="no">true</code>. Or, pick a maximum breakpoint with which to have a responsive table up to by setting the prop <code class="text-nowrap" translate="no">responsive</code> to one of the breakpoint values: <code class="text-nowrap" translate="no">sm</code>, <code class="text-nowrap" translate="no">md</code>, <code class="text-nowrap" translate="no">lg</code>, or <code class="text-nowrap" translate="no">xl</code>.</p> <p><strong>Example: Always responsive table</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">responsive</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          {\n            <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading4</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading5</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading6</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading7</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading8</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading9</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading10</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading11</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading12</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>\n          },\n          {\n            <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading4</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading5</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading6</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading7</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading8</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading9</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading10</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading11</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading12</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>\n          },\n          {\n            <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading4</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading5</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading6</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading7</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading8</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading9</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading10</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading11</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>,\n            <span class="hljs-attr">heading12</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>\n          }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-responsive.vue --&gt;</span></pre></div><p><strong>Responsive table notes:</strong></p> <ul> <li><em>Possible vertical clipping/truncation</em>. Responsive tables make use of <code class="text-nowrap" translate="no">overflow-y: hidden</code>, which clips off any content that goes beyond the bottom or top edges of the table. In particular, this may clip off dropdown menus and other third-party widgets.</li> <li>Using props <code class="text-nowrap" translate="no">responsive</code> and <code class="text-nowrap" translate="no">fixed</code> together will <strong>not</strong> work as expected. Fixed table layout uses the first row (table header in this case) to compute the width required by each column (and the overall table width) to fit within the width of the parent container &mdash; without taking cells in the <code class="text-nowrap" translate="no">&lt;tbody&gt;</code> into consideration &mdash; resulting in table that may not be responsive. To get around this limitation, you would need to specify widths for the columns (or certain columns) via one of the following methods:<ul> <li>Use <code class="text-nowrap" translate="no">&lt;col&gt;</code> elements within the <a href="#table-colgroup" class="font-weight-bold"><code class="text-nowrap" translate="no">table-colgroup</code> slot</a> that have widths set (e.g. <code class="text-nowrap" translate="no">&lt;col style=&quot;width: 20rem&quot;&gt;</code>), or</li> <li>Wrap header cells in <code class="text-nowrap" translate="no">&lt;div&gt;</code> elements, via the use of <a href="#header-and-footer-custom-rendering-via-scoped-slots" class="font-weight-bold">custom header rendering</a>, which have a minimum width set on them, or</li> <li>Use the <code class="text-nowrap" translate="no">thStyle</code> property of the <a href="#field-definition-reference" class="font-weight-bold">field definition object</a> to set a width for the column(s), or</li> <li>Use custom CSS to define classes to apply to the columns to set widths, via the <code class="text-nowrap" translate="no">thClass</code> or <code class="text-nowrap" translate="no">class</code> properties of the <a href="#field-definition-reference" class="font-weight-bold">field definition object</a>.</li> </ul> </li> </ul> <h3 id="stacked-tables" class="bv-no-focus-ring"><span class="bd-content-title">Stacked tables<a class="anchorjs-link" href="#stacked-tables" aria-labelledby="stacked-tables"></a></span></h3> <p>An alternative to responsive tables, BootstrapVue includes the stacked table option (using custom SCSS/CSS), which allow tables to be rendered in a visually stacked format. Make any table stacked across <em>all viewports</em> by setting the prop <code class="text-nowrap" translate="no">stacked</code> to <code class="text-nowrap" translate="no">true</code>. Or, alternatively, set a breakpoint at which the table will return to normal table format by setting the prop <code class="text-nowrap" translate="no">stacked</code> to one of the breakpoint values <code class="text-nowrap" translate="no">&#39;sm&#39;</code>, <code class="text-nowrap" translate="no">&#39;md&#39;</code>, <code class="text-nowrap" translate="no">&#39;lg&#39;</code>, or <code class="text-nowrap" translate="no">&#39;xl&#39;</code>.</p> <p>Column header labels will be rendered to the left of each field value using a CSS <code class="text-nowrap" translate="no">::before</code> pseudo element, with a width of 40%.</p> <p>The <code class="text-nowrap" translate="no">stacked</code> prop takes precedence over the <a href="#sticky-headers" class="font-weight-bold"><code class="text-nowrap" translate="no">sticky-header</code></a> prop and the <a href="#sticky-columns" class="font-weight-bold"><code class="text-nowrap" translate="no">stickyColumn</code></a> field definition property.</p> <p><strong>Example: Always stacked table</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">stacked</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-stacked.vue --&gt;</span></pre></div><p><strong>Note: When the table is visually stacked:</strong></p> <ul> <li>The table header (and table footer) will be hidden.</li> <li>Custom rendered header slots will not be shown, rather, the fields&#39; <code class="text-nowrap" translate="no">label</code> will be used.</li> <li>The table <strong>cannot</strong> be sorted by clicking the rendered field labels. You will need to provide an external control to select the field to sort by and the sort direction. See the <a href="#sorting" class="font-weight-bold">Sorting</a> section below for sorting control information, as well as the <a href="#complete-example" class="font-weight-bold">complete example</a> at the bottom of this page for an example of controlling sorting via the use of form controls.</li> <li>The slots <code class="text-nowrap" translate="no">top-row</code> and <code class="text-nowrap" translate="no">bottom-row</code> will be hidden when visually stacked.</li> <li>The table caption, if provided, will always appear at the top of the table when visually stacked.</li> <li>In an always stacked table, the table header and footer, and the fixed top and bottom row slots will not be rendered.</li> </ul> <p>BootstrapVue&#39;s custom CSS is required in order to support stacked tables.</p> <h3 id="table-caption" class="bv-no-focus-ring"><span class="bd-content-title">Table caption<a class="anchorjs-link" href="#table-caption" aria-labelledby="table-caption"></a></span></h3> <p>Add an optional caption to your table via the prop <code class="text-nowrap" translate="no">caption</code> or the named slot <code class="text-nowrap" translate="no">table-caption</code> (the slot takes precedence over the prop). The default Bootstrap v4 styling places the caption at the bottom of the table:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">table-caption</span>&gt;</span>This is a table caption.<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-caption.vue --&gt;</span></pre></div><p>You can have the caption placed at the top of the table by setting the <code class="text-nowrap" translate="no">caption-top</code> prop to <code class="text-nowrap" translate="no">true</code>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span> <span class="hljs-attr">caption-top</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">table-caption</span>&gt;</span>This is a table caption at the top.<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-caption-top.vue --&gt;</span></pre></div><p>You can also use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/caption-side" target="_blank" rel="noopener">custom CSS</a> to control the caption positioning.</p> <h3 id="table-colgroup" class="bv-no-focus-ring"><span class="bd-content-title">Table colgroup<a class="anchorjs-link" href="#table-colgroup" aria-labelledby="table-colgroup"></a></span></h3> <p>Use the named slot <code class="text-nowrap" translate="no">table-colgroup</code> to specify <code class="text-nowrap" translate="no">&lt;colgroup&gt;</code> and <code class="text-nowrap" translate="no">&lt;col&gt;</code> elements for optional grouping and styling of table columns. Note the styles available via <code class="text-nowrap" translate="no">&lt;col&gt;</code> elements are limited. Refer to <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup" target="_blank" rel="noopener">MDN</a> for details and usage of <code class="text-nowrap" translate="no">&lt;colgroup&gt;</code></p> <p>Slot <code class="text-nowrap" translate="no">table-colgroup</code> can be optionally scoped, receiving an object with the following properties:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">columns</code></td> <td>Number</td> <td>The number of columns in the rendered table</td> </tr> <tr> <td><code class="text-nowrap" translate="no">fields</code></td> <td>Array</td> <td>Array of field definition objects (normalized to the <a href="#fields-as-an-array-of-objects" class="font-weight-bold">array of objects</a> format)</td> </tr> </tbody></table> </div><p>When provided, the content of the <code class="text-nowrap" translate="no">table-colgroup</code> slot will be placed <em>inside</em> of a <code class="text-nowrap" translate="no">&lt;colgroup&gt;</code> element. there is no need to provide your own outer <code class="text-nowrap" translate="no">&lt;colgroup&gt;</code> element. When a series of table columns should be grouped for assistive technology reasons (for conveying logical column associations, use a <code class="text-nowrap" translate="no">&lt;col span=&quot;#&quot;&gt;</code> element (with <code class="text-nowrap" translate="no">#</code> replaced with the number of grouped columns) to group the series of columns.</p> <p><strong>Tip:</strong> In some situations when trying to set column widths via <code class="text-nowrap" translate="no">style</code> or <code class="text-nowrap" translate="no">class</code> on the <code class="text-nowrap" translate="no">&lt;col&gt;</code> element, you may find that placing the table in <code class="text-nowrap" translate="no">fixed</code> header width (table fixed layout mode) mode, combined with <code class="text-nowrap" translate="no">responsive</code> (horizontal scrolling) mode will help, although you will need to have explicit widths, or minimum widths, via a style or a class for each column&#39;s respective <code class="text-nowrap" translate="no">&lt;col&gt;</code> element. For example:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">fixed</span> <span class="hljs-attr">responsive</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span> <span class="hljs-attr">...</span> &gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">table-colgroup</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">col</span>\n      <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;field in scope.fields&quot;</span>\n      <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;field.key&quot;</span>\n      <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ width: field.key === &#x27;foo&#x27; ? &#x27;120px&#x27; : &#x27;180px&#x27; }&quot;</span>\n    &gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- additional table slots here if needed --&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span></pre></div><h3 id="table-busy-state" class="bv-no-focus-ring"><span class="bd-content-title">Table busy state<a class="anchorjs-link" href="#table-busy-state" aria-labelledby="table-busy-state"></a></span></h3> <p><code class="text-nowrap" translate="no">&lt;b-table&gt;</code> provides a <code class="text-nowrap" translate="no">busy</code> prop that will flag the table as busy, which you can set to <code class="text-nowrap" translate="no">true</code> just before you update your items, and then set it to <code class="text-nowrap" translate="no">false</code> once you have your items. When in the busy state, the table will have the attribute <code class="text-nowrap" translate="no">aria-busy=&quot;true&quot;</code>.</p> <p>During the busy state, the table will be rendered in a &quot;muted&quot; look (<code class="text-nowrap" translate="no">opacity: 0.6</code>), using the following custom CSS:</p> <div class="bd-code"><pre class="hljs css p-2" translate="no"><span class="hljs-comment">/* Busy table styling */</span>\n<span class="hljs-selector-tag">table</span><span class="hljs-selector-class">.b-table</span><span class="hljs-selector-attr">[aria-busy=<span class="hljs-string">&#x27;true&#x27;</span>]</span> {\n  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.6</span>;\n}</pre></div><p>You can override this styling using your own CSS.</p> <p>You may optionally provide a <code class="text-nowrap" translate="no">table-busy</code> slot to show a custom loading message or spinner whenever the table&#39;s busy state is <code class="text-nowrap" translate="no">true</code>. The slot will be placed in a <code class="text-nowrap" translate="no">&lt;tr&gt;</code> element with class <code class="text-nowrap" translate="no">b-table-busy-slot</code>, which has one single <code class="text-nowrap" translate="no">&lt;td&gt;</code> with a <code class="text-nowrap" translate="no">colspan</code> set to the number of fields.</p> <p><strong>Example of <code class="text-nowrap" translate="no">table-busy</code> slot usage:</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggleBusy&quot;</span>&gt;</span>Toggle Busy State<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">:busy</span>=<span class="hljs-string">&quot;isBusy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span> <span class="hljs-attr">outlined</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">table-busy</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center text-danger my-2&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-spinner</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-middle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-spinner</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">isBusy</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;MacDonald&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span> },\n          { <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> },\n          { <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span> },\n          { <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Jami&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Carney&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span> }\n        ]\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">toggleBusy</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.isBusy = !<span class="hljs-built_in">this</span>.isBusy\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-busy-slot.vue --&gt;</span></pre></div><p>Also see the <a href="#using-items-provider-functions" class="font-weight-bold">Using Items Provider Functions</a> below for additional information on the <code class="text-nowrap" translate="no">busy</code> state.</p> <p><strong>Notes:</strong></p> <ul> <li>All click related and hover events, and sort-changed events will <strong>not</strong> be emitted when the table is in the <code class="text-nowrap" translate="no">busy</code> state.</li> <li>Busy styling and slot are not available in the <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code> component.</li> </ul> <h2 id="custom-data-rendering" class="bv-no-focus-ring"><span class="bd-content-title">Custom data rendering<a class="anchorjs-link" href="#custom-data-rendering" aria-labelledby="custom-data-rendering"></a></span></h2> <p>Custom rendering for each data field in a row is possible using either <a href="https://vuejs.org/v2/guide/components.html#Scoped-Slots" target="_blank" rel="noopener">scoped slots</a> or a formatter callback function, or a combination of both.</p> <h3 id="scoped-field-slots" class="bv-no-focus-ring"><span class="bd-content-title">Scoped field slots<a class="anchorjs-link" href="#scoped-field-slots" aria-labelledby="scoped-field-slots"></a></span></h3> <p>Scoped field slots give you greater control over how the record data appears. You can use scoped slots to provided custom rendering for a particular field. If you want to add an extra field which does not exist in the records, just add it to the <a href="#fields-column-definitions" class="font-weight-bold"><code class="text-nowrap" translate="no">fields</code></a> array, and then reference the field(s) in the scoped slot(s). Scoped field slots use the following naming syntax: <code class="text-nowrap" translate="no">&#39;cell(&#39; + field key + &#39;)&#39;</code>.</p> <p>You can use the default <em>fall-back</em> scoped slot <code class="text-nowrap" translate="no">&#39;cell()&#39;</code> to format any cells that do not have an explicit scoped slot provided.</p> <p><strong>Example: Custom data rendering with scoped slots</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">small</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">responsive</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- A virtual column --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>(<span class="hljs-attr">index</span>)=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        {{ data.index + 1 }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- A custom formatted column --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>(<span class="hljs-attr">name</span>)=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-info&quot;</span>&gt;</span>{{ data.value.last.toUpperCase() }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{{ data.value.first }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- A virtual composite column --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>(<span class="hljs-attr">nameage</span>)=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        {{ data.item.name.first }} is {{ data.item.age }} years old\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- Optional default data cell scoped slot --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>()=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>{{ data.value }}<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [\n          <span class="hljs-comment">// A virtual column that doesn&#x27;t exist in items</span>\n          <span class="hljs-string">&#x27;index&#x27;</span>,\n          <span class="hljs-comment">// A column that needs custom formatting</span>\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Full Name&#x27;</span> },\n          <span class="hljs-comment">// A regular column</span>\n          <span class="hljs-string">&#x27;age&#x27;</span>,\n          <span class="hljs-comment">// A regular column</span>\n          <span class="hljs-string">&#x27;sex&#x27;</span>,\n          <span class="hljs-comment">// A virtual column made up from two fields</span>\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;nameage&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;First name and age&#x27;</span> }\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Doe&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;Male&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">42</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jane&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Doe&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;Female&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Rubin&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Kincade&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;Male&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">73</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Shirley&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Partridge&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;Female&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">62</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-data-slots.vue --&gt;</span></pre></div><p>The slot&#39;s scope variable (<code class="text-nowrap" translate="no">data</code> in the above sample) will have the following properties:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">index</code></td> <td>Number</td> <td>The row number (indexed from zero) relative to the <em>displayed</em> rows</td> </tr> <tr> <td><code class="text-nowrap" translate="no">item</code></td> <td>Object</td> <td>The entire raw record data (i.e. <code class="text-nowrap" translate="no">items[index]</code>) for this row (before any formatter is applied)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">value</code></td> <td>Any</td> <td>The value for this key in the record (<code class="text-nowrap" translate="no">null</code> or <code class="text-nowrap" translate="no">undefined</code> if a virtual column), or the output of the field&#39;s <a href="#formatter-callback" class="font-weight-bold"><code class="text-nowrap" translate="no">formatter</code> function</a></td> </tr> <tr> <td><code class="text-nowrap" translate="no">unformatted</code></td> <td>Any</td> <td>The raw value for this key in the item record (<code class="text-nowrap" translate="no">null</code> or <code class="text-nowrap" translate="no">undefined</code> if a virtual column), before being passed to the field&#39;s <a href="#formatter-callback" class="font-weight-bold"><code class="text-nowrap" translate="no">formatter</code> function</a></td> </tr> <tr> <td><code class="text-nowrap" translate="no">field</code></td> <td>Object</td> <td>The field&#39;s normalized field definition object</td> </tr> <tr> <td><code class="text-nowrap" translate="no">detailsShowing</code></td> <td>Boolean</td> <td>Will be <code class="text-nowrap" translate="no">true</code> if the row&#39;s <code class="text-nowrap" translate="no">row-details</code> scoped slot is visible. See section <a href="#row-details-support" class="font-weight-bold">Row details support</a> below for additional information</td> </tr> <tr> <td><code class="text-nowrap" translate="no">toggleDetails</code></td> <td>Function</td> <td>Can be called to toggle the visibility of the rows <code class="text-nowrap" translate="no">row-details</code> scoped slot. See section <a href="#row-details-support" class="font-weight-bold">Row details support</a> below for additional information</td> </tr> <tr> <td><code class="text-nowrap" translate="no">rowSelected</code></td> <td>Boolean</td> <td>Will be <code class="text-nowrap" translate="no">true</code> if the row has been selected. See section <a href="#row-select-support" class="font-weight-bold">Row select support</a> for additional information</td> </tr> <tr> <td><code class="text-nowrap" translate="no">selectRow</code></td> <td>Function</td> <td>When called, selects the current row. See section <a href="#row-select-support" class="font-weight-bold">Row select support</a> for additional information</td> </tr> <tr> <td><code class="text-nowrap" translate="no">unselectRow</code></td> <td>Function</td> <td>When called, unselects the current row. See section <a href="#row-select-support" class="font-weight-bold">Row select support</a> for additional information</td> </tr> </tbody></table> </div><p><strong>Notes:</strong></p> <ul> <li><code class="text-nowrap" translate="no">index</code> will not always be the actual row&#39;s index number, as it is computed after filtering, sorting and pagination have been applied to the original table data. The <code class="text-nowrap" translate="no">index</code> value will refer to the <strong>displayed row number</strong>. This number will align with the indexes from the optional <a href="#v-model-binding" class="font-weight-bold"><code class="text-nowrap" translate="no">v-model</code> bound</a> variable.</li> <li>When using the new Vue 2.6 <code class="text-nowrap" translate="no">v-slot</code> syntax, note that slot names <strong>cannot</strong> contain spaces, and when using in-browser DOM templates the slot names will <em>always</em> be lower cased. To get around this, you can pass the slot name using Vue&#39;s <a href="https://vuejs.org/v2/guide/components-slots.html#Dynamic-Slot-Names" target="_blank" rel="noopener">dynamic slot names</a></li> </ul> <h4 id="displaying-raw-html" class="bv-no-focus-ring"><span class="bd-content-title">Displaying raw HTML<a class="anchorjs-link" href="#displaying-raw-html" aria-labelledby="displaying-raw-html"></a></span></h4> <p>By default <code class="text-nowrap" translate="no">b-table</code> escapes HTML tags in items data and results of formatter functions, if you need to display raw HTML code in <code class="text-nowrap" translate="no">b-table</code>, you should use <code class="text-nowrap" translate="no">v-html</code> directive on an element in a in scoped field slot.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>(<span class="hljs-attr">html</span>)=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;data.value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="xml">\n  export default {\n    data() {\n      return {\n        items: [\n          {\n            text: &#x27;This is <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>escaped<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> content&#x27;,\n            html: &#x27;This is <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>raw <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#x27;\n          }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-html-data-slots.vue --&gt;</span></pre></div><p class="alert alert-danger"> <strong>Warning:</strong> Be cautious of using the <code class="notranslate" translate="no">v-html</code> method to display user supplied content, as it may make your application vulnerable to <a class="alert-link" href="https://en.wikipedia.org/wiki/Cross-site_scripting"> <abbr title="Cross Site Scripting Attacks">XSS attacks</abbr></a>, if you do not first <a class="alert-link" href="https://en.wikipedia.org/wiki/HTML_sanitization">sanitize</a> the user supplied string. </p> <h3 id="formatter-callback" class="bv-no-focus-ring"><span class="bd-content-title">Formatter callback<a class="anchorjs-link" href="#formatter-callback" aria-labelledby="formatter-callback"></a></span></h3> <p>Optionally, you can customize field output by using a formatter callback function. To enable this, the field&#39;s <code class="text-nowrap" translate="no">formatter</code> property is used. The value of this property may be String or function reference. In case of a String value, the function must be defined at the parent component&#39;s methods. When providing <code class="text-nowrap" translate="no">formatter</code> as a <code class="text-nowrap" translate="no">Function</code>, it must be declared at global scope (window or as global mixin at Vue, or as an anonymous function), unless it has been bound to a <code class="text-nowrap" translate="no">this</code> context.</p> <p>The callback function accepts three arguments - <code class="text-nowrap" translate="no">value</code>, <code class="text-nowrap" translate="no">key</code>, and <code class="text-nowrap" translate="no">item</code>, and should return the formatted value as a string (HTML strings are not supported)</p> <p><strong>Example: Custom data rendering with formatter callback function</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>(<span class="hljs-attr">name</span>)=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        <span class="hljs-comment">&lt;!-- `data.value` is the value after formatted by the Formatter --&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;`#${data.value.replace(/[^a-z]+/i,&#x27;-&#x27;).toLowerCase()}`&quot;</span>&gt;</span>{{ data.value }}<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [\n          {\n            <span class="hljs-comment">// A column that needs custom formatting,</span>\n            <span class="hljs-comment">// calling formatter &#x27;fullName&#x27; in this app</span>\n            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;name&#x27;</span>,\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Full Name&#x27;</span>,\n            <span class="hljs-attr">formatter</span>: <span class="hljs-string">&#x27;fullName&#x27;</span>\n          },\n          <span class="hljs-comment">// A regular column</span>\n          <span class="hljs-string">&#x27;age&#x27;</span>,\n          {\n            <span class="hljs-comment">// A regular column with custom formatter</span>\n            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;sex&#x27;</span>,\n            <span class="hljs-attr">formatter</span>: <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {\n              <span class="hljs-keyword">return</span> value.charAt(<span class="hljs-number">0</span>).toUpperCase()\n            }\n          },\n          {\n            <span class="hljs-comment">// A virtual column with custom formatter</span>\n            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;birthYear&#x27;</span>,\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Calculated Birth Year&#x27;</span>,\n            <span class="hljs-attr">formatter</span>: <span class="hljs-function">(<span class="hljs-params">value, key, item</span>) =&gt;</span> {\n              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear() - item.age\n            }\n          }\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Doe&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;Male&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">42</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jane&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Doe&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;Female&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Rubin&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Kincade&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">73</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Shirley&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Partridge&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">62</span> }\n        ]\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">fullName</span>(<span class="hljs-params">value</span>)</span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${value.first}</span> <span class="hljs-subst">${value.last}</span>`</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-data-formatter.vue --&gt;</span></pre></div><h2 id="header-and-footer-custom-rendering-via-scoped-slots" class="bv-no-focus-ring"><span class="bd-content-title">Header and Footer custom rendering via scoped slots<a class="anchorjs-link" href="#header-and-footer-custom-rendering-via-scoped-slots" aria-labelledby="header-and-footer-custom-rendering-via-scoped-slots"></a></span></h2> <p>It is also possible to provide custom rendering for the tables <code class="text-nowrap" translate="no">thead</code> and <code class="text-nowrap" translate="no">tfoot</code> elements. Note by default the table footer is not rendered unless <code class="text-nowrap" translate="no">foot-clone</code> is set to <code class="text-nowrap" translate="no">true</code>.</p> <p>Scoped slots for the header and footer cells uses a special naming convention of <code class="text-nowrap" translate="no">&#39;head(&lt;fieldkey&gt;)&#39;</code> and <code class="text-nowrap" translate="no">&#39;foot(&lt;fieldkey&gt;)&#39;</code> respectively. if a <code class="text-nowrap" translate="no">&#39;foot(...)&#39;</code> slot for a field is not provided, but a <code class="text-nowrap" translate="no">&#39;head(...)&#39;</code> slot is provided, then the footer will use the <code class="text-nowrap" translate="no">&#39;head(...)&#39;</code> slot content.</p> <p>You can use a default <em>fall-back</em> scoped slot <code class="text-nowrap" translate="no">&#39;head()&#39;</code> or <code class="text-nowrap" translate="no">&#39;foot()&#39;</code> to format any header or footer cells that do not have an explicit scoped slot provided.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">foot-clone</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- A custom formatted data column cell --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>(<span class="hljs-attr">name</span>)=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        {{ data.value.first }} {{ data.value.last }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- A custom formatted header cell for field &#x27;name&#x27; --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">head</span>(<span class="hljs-attr">name</span>)=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-info&quot;</span>&gt;</span>{{ data.label.toUpperCase() }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- A custom formatted footer cell for field &#x27;name&#x27; --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">foot</span>(<span class="hljs-attr">name</span>)=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span>&gt;</span>{{ data.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- Default fall-back custom formatted footer cell --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">foot</span>()=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>{{ data.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [\n          <span class="hljs-comment">// A column that needs custom formatting</span>\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Full Name&#x27;</span> },\n          <span class="hljs-comment">// A regular column</span>\n          <span class="hljs-string">&#x27;age&#x27;</span>,\n          <span class="hljs-comment">// A regular column</span>\n          <span class="hljs-string">&#x27;sex&#x27;</span>\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Doe&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;Male&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">42</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jane&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Doe&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;Female&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Rubin&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Kincade&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;Male&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">73</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Shirley&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Partridge&#x27;</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;Female&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">62</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-head-foot-slots.vue --&gt;</span></pre></div><p>The slots can be optionally scoped (<code class="text-nowrap" translate="no">data</code> in the above example), and will have the following properties:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">column</code></td> <td>String</td> <td>The fields&#39;s <code class="text-nowrap" translate="no">key</code> value</td> </tr> <tr> <td><code class="text-nowrap" translate="no">field</code></td> <td>Object</td> <td>the field&#39;s object (from the <code class="text-nowrap" translate="no">fields</code> prop)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">label</code></td> <td>String</td> <td>The fields label value (also available as <code class="text-nowrap" translate="no">data.field.label</code>)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">selectAllRows</code></td> <td>Method</td> <td>Select all rows (applicable if the table is in <a href="#row-select-support" class="font-weight-bold"><code class="text-nowrap" translate="no">selectable</code></a> mode</td> </tr> <tr> <td><code class="text-nowrap" translate="no">clearSelected</code></td> <td>Method</td> <td>Unselect all rows (applicable if the table is in <a href="#row-select-support" class="font-weight-bold"><code class="text-nowrap" translate="no">selectable</code></a> mode</td> </tr> </tbody></table> </div><p>When placing inputs, buttons, selects or links within a <code class="text-nowrap" translate="no">head(...)</code> or <code class="text-nowrap" translate="no">foot(...)</code> slot, note that <code class="text-nowrap" translate="no">head-clicked</code> event will not be emitted when the input, select, textarea is clicked (unless they are disabled). <code class="text-nowrap" translate="no">head-clicked</code> will never be emitted when clicking on links or buttons inside the scoped slots (even when disabled)</p> <p><strong>Notes:</strong></p> <ul> <li>When using the new Vue 2.6 <code class="text-nowrap" translate="no">v-slot</code> syntax, note that slot names <strong>cannot</strong> contain spaces, and when using in-browser DOM templates the slot names will <em>always</em> be lower cased. To get around this, you can pass the slot name using Vue&#39;s <a href="https://vuejs.org/v2/guide/components-slots.html#Dynamic-Slot-Names" target="_blank" rel="noopener">dynamic slot names</a></li> </ul> <h3 id="adding-additional-rows-to-the-header" class="bv-no-focus-ring"><span class="bd-content-title">Adding additional rows to the header<a class="anchorjs-link" href="#adding-additional-rows-to-the-header" aria-labelledby="adding-additional-rows-to-the-header"></a></span></h3> <p>If you wish to add additional rows to the header you may do so via the <code class="text-nowrap" translate="no">thead-top</code> slot. This slot is inserted before the header cells row, and is not automatically encapsulated by <code class="text-nowrap" translate="no">&lt;tr&gt;..&lt;/tr&gt;</code> tags. It is recommended to use the BootstrapVue <a href="#table-helper-components" class="font-weight-bold">table helper components</a>, rather than native browser table child elements.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>\n      <span class="hljs-attr">responsive</span>=<span class="hljs-string">&quot;sm&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">thead-top</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Name and ID<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;secondary&quot;</span>&gt;</span>Type 1<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>Type 2<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>Type 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Stephen Hawking&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">type1</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2a</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2b</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2c</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type3</span>: <span class="hljs-literal">false</span> },\n          { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Johnny Appleseed&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">type1</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2a</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2b</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2c</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type3</span>: <span class="hljs-literal">false</span> },\n          { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;George Washington&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">type1</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2a</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2b</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2c</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type3</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Albert Einstein&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">type1</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2a</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2b</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2c</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type3</span>: <span class="hljs-literal">false</span> },\n          { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Isaac Newton&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">type1</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2a</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2b</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2c</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type3</span>: <span class="hljs-literal">false</span> },\n        ],\n        <span class="hljs-attr">fields</span>: [\n          <span class="hljs-string">&#x27;name&#x27;</span>,\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;ID&#x27;</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;type1&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Type 1&#x27;</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;type2a&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Type 2A&#x27;</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;type2b&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Type 2B&#x27;</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;type2c&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Type 2C&#x27;</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;type3&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Type 3&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-thead-top-slot.vue --&gt;</span></pre></div><p>Slot <code class="text-nowrap" translate="no">thead-top</code> can be optionally scoped, receiving an object with the following properties:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">columns</code></td> <td>Number</td> <td>The number of columns in the rendered table</td> </tr> <tr> <td><code class="text-nowrap" translate="no">fields</code></td> <td>Array</td> <td>Array of field definition objects (normalized to the array of objects format)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">selectAllRows</code></td> <td>Method</td> <td>Select all rows (applicable if the table is in <a href="#row-select-support" class="font-weight-bold"><code class="text-nowrap" translate="no">selectable</code></a> mode</td> </tr> <tr> <td><code class="text-nowrap" translate="no">clearSelected</code></td> <td>Method</td> <td>Unselect all rows (applicable if the table is in <a href="#row-select-support" class="font-weight-bold"><code class="text-nowrap" translate="no">selectable</code></a> mode</td> </tr> </tbody></table> </div><h3 id="creating-a-custom-footer" class="bv-no-focus-ring"><span class="bd-content-title">Creating a custom footer<a class="anchorjs-link" href="#creating-a-custom-footer" aria-labelledby="creating-a-custom-footer"></a></span></h3> <p>If you need greater layout control of the content of the <code class="text-nowrap" translate="no">&lt;tfoot&gt;</code>, you can use the optionally scoped slot <code class="text-nowrap" translate="no">custom-foot</code> to provide your own rows and cells. Use BootstrapVue&#39;s <a href="#table-helper-components" class="font-weight-bold">table helper sub-components</a> <code class="text-nowrap" translate="no">&lt;b-tr&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-th&gt;</code>, and <code class="text-nowrap" translate="no">&lt;b-td&gt;</code> to generate your custom footer layout.</p> <p>Slot <code class="text-nowrap" translate="no">custom-foot</code> can be optionally scoped, receiving an object with the following properties:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">columns</code></td> <td>Number</td> <td>The number of columns in the rendered table</td> </tr> <tr> <td><code class="text-nowrap" translate="no">fields</code></td> <td>Array</td> <td>Array of field definition objects (normalized to the array of objects format)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">items</code></td> <td>Array</td> <td>Array of the currently <em>displayed</em> items records - after filtering, sorting and pagination</td> </tr> </tbody></table> </div><p><strong>Notes:</strong></p> <ul> <li>The <code class="text-nowrap" translate="no">custom-foot</code> slot will <strong>not</strong> be rendered if the <code class="text-nowrap" translate="no">foot-clone</code> prop has been set.</li> <li><code class="text-nowrap" translate="no">head-clicked</code> events are not be emitted when clicking on <code class="text-nowrap" translate="no">custom-foot</code> cells.</li> <li>Sorting and sorting icons are not available for cells in the <code class="text-nowrap" translate="no">custom-foot</code> slot.</li> <li>The custom footer will not be shown when the table is in visually stacked mode.</li> </ul> <h2 id="custom-empty-and-emptyfiltered-rendering-via-slots" class="bv-no-focus-ring"><span class="bd-content-title">Custom empty and emptyfiltered rendering via slots<a class="anchorjs-link" href="#custom-empty-and-emptyfiltered-rendering-via-slots" aria-labelledby="custom-empty-and-emptyfiltered-rendering-via-slots"></a></span></h2> <p>Aside from using <code class="text-nowrap" translate="no">empty-text</code>, <code class="text-nowrap" translate="no">empty-filtered-text</code>, <code class="text-nowrap" translate="no">empty-html</code>, and <code class="text-nowrap" translate="no">empty-filtered-html</code>, it is also possible to provide custom rendering for tables that have no data to display using named slots.</p> <p>In order for these slots to be shown, the <code class="text-nowrap" translate="no">show-empty</code> attribute must be set and <code class="text-nowrap" translate="no">items</code> must be either falsy or an array of length 0.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">show-empty</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">empty</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>{{ scope.emptyText }}<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">emptyfiltered</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>{{ scope.emptyFilteredText }}<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><p>The slot can optionally be scoped. The slot&#39;s scope (<code class="text-nowrap" translate="no">scope</code> in the above example) will have the following properties:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">emptyHtml</code></td> <td>String</td> <td>The <code class="text-nowrap" translate="no">empty-html</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">emptyText</code></td> <td>String</td> <td>The <code class="text-nowrap" translate="no">empty-text</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">emptyFilteredHtml</code></td> <td>String</td> <td>The <code class="text-nowrap" translate="no">empty-filtered-html</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">emptyFilteredText</code></td> <td>String</td> <td>The <code class="text-nowrap" translate="no">empty-filtered-text</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">fields</code></td> <td>Array</td> <td>The <code class="text-nowrap" translate="no">fields</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">items</code></td> <td>Array</td> <td>The <code class="text-nowrap" translate="no">items</code> prop. Exposed here to check null vs []</td> </tr> </tbody></table> </div><h2 id="advanced-features" class="bv-no-focus-ring"><span class="bd-content-title">Advanced features<a class="anchorjs-link" href="#advanced-features" aria-labelledby="advanced-features"></a></span></h2> <h3 id="sticky-headers" class="bv-no-focus-ring"><span class="bd-content-title">Sticky headers<a class="anchorjs-link" href="#sticky-headers" aria-labelledby="sticky-headers"></a></span></h3> <p>Use the <code class="text-nowrap" translate="no">sticky-header</code> prop to enable a vertically scrolling table with headers that remain fixed (sticky) as the table body scrolls. Setting the prop to <code class="text-nowrap" translate="no">true</code> (or no explicit value) will generate a table that has a maximum height of <code class="text-nowrap" translate="no">300px</code>. To specify a maximum height other than <code class="text-nowrap" translate="no">300px</code>, set the <code class="text-nowrap" translate="no">sticky-header</code> prop to a valid CSS height (including units), i.e. <code class="text-nowrap" translate="no">sticky-header=&quot;200px&quot;</code>. Tables with <code class="text-nowrap" translate="no">sticky-header</code> enabled will also automatically become always responsive horizontally, regardless of the <a href="#responsive-tables" class="font-weight-bold"><code class="text-nowrap" translate="no">responsive</code></a> prop setting, if the table is wider than the available horizontal space.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">sticky-header</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">head-variant</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> },\n          { <span class="hljs-attr">heading1</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading2</span>: <span class="hljs-string">&#x27;table cell&#x27;</span>, <span class="hljs-attr">heading3</span>: <span class="hljs-string">&#x27;table cell&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-sticky-header.vue --&gt;</span></pre></div><p><strong>Sticky header notes:</strong></p> <ul> <li>The <code class="text-nowrap" translate="no">sticky-header</code> prop has no effect if the table has the <a href="#stacked-tables" class="font-weight-bold"><code class="text-nowrap" translate="no">stacked</code></a> prop set.</li> <li>Sticky header tables are wrapped inside a vertically scrollable <code class="text-nowrap" translate="no">&lt;div&gt;</code> with a maximum height set.</li> <li>BootstrapVue&#39;s custom CSS is required in order to support <code class="text-nowrap" translate="no">sticky-header</code>.</li> <li>Bootstrap v4 uses the CSS style <code class="text-nowrap" translate="no">border-collapse: collapsed</code> on table elements. This prevents the borders on the sticky header from &quot;sticking&quot; to the header, and hence the borders will scroll when the body scrolls. To get around this issue, set the prop <code class="text-nowrap" translate="no">no-border-collapse</code> on the table (note that this may cause double width borders when using features such as <code class="text-nowrap" translate="no">bordered</code>, etc.).</li> <li>The sticky header feature uses CSS style <code class="text-nowrap" translate="no">position: sticky</code> to position the headings. Internet Explorer does not support <code class="text-nowrap" translate="no">position: sticky</code>, hence for IE 11 the table headings will scroll with the table body.</li> </ul> <h3 id="sticky-columns" class="bv-no-focus-ring"><span class="bd-content-title">Sticky columns<a class="anchorjs-link" href="#sticky-columns" aria-labelledby="sticky-columns"></a></span></h3> <p>Columns can be made sticky, where they stick to the left of the table when the table has a horizontal scrollbar. To make a column a sticky column, set the <code class="text-nowrap" translate="no">stickyColumn</code> prop in the <a href="#field-definition-reference" class="font-weight-bold">field&#39;s header definition</a>. Sticky columns will only work when the table has either the <code class="text-nowrap" translate="no">sticky-header</code> prop set and/or the <a href="#responsive-tables" class="font-weight-bold"><code class="text-nowrap" translate="no">responsive</code></a> prop is set.</p> <p><strong>Example: Sticky columns and headers</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;stickyHeader&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>Sticky header<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;noCollapse&quot;</span> <span class="hljs-attr">inline</span>&gt;</span>No border collapse<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">:sticky-header</span>=<span class="hljs-string">&quot;stickyHeader&quot;</span>\n      <span class="hljs-attr">:no-border-collapse</span>=<span class="hljs-string">&quot;noCollapse&quot;</span>\n      <span class="hljs-attr">responsive</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>\n    &gt;</span>\n      <span class="hljs-comment">&lt;!-- We are using utility class `text-nowrap` to help illustrate horizontal scrolling --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">head</span>(<span class="hljs-attr">id</span>)=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-nowrap&quot;</span>&gt;</span>Row ID<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">head</span>()=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-nowrap&quot;</span>&gt;</span>\n          Heading {{ scope.label }}\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">stickyHeader</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">noCollapse</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">fields</span>: [\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attr">stickyColumn</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">isRowHeader</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;primary&#x27;</span> },\n          <span class="hljs-string">&#x27;a&#x27;</span>,\n          <span class="hljs-string">&#x27;b&#x27;</span>,\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-attr">stickyColumn</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;info&#x27;</span> },\n          <span class="hljs-string">&#x27;d&#x27;</span>,\n          <span class="hljs-string">&#x27;e&#x27;</span>,\n          <span class="hljs-string">&#x27;f&#x27;</span>,\n          <span class="hljs-string">&#x27;g&#x27;</span>,\n          <span class="hljs-string">&#x27;h&#x27;</span>,\n          <span class="hljs-string">&#x27;i&#x27;</span>,\n          <span class="hljs-string">&#x27;j&#x27;</span>,\n          <span class="hljs-string">&#x27;k&#x27;</span>,\n          <span class="hljs-string">&#x27;l&#x27;</span>\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- table-sticky-columns.vue --&gt;</span></pre></div><p><strong>Sticky column notes:</strong></p> <ul> <li>Sticky columns has no effect if the table has the <a href="#stacked-tables" class="font-weight-bold"><code class="text-nowrap" translate="no">stacked</code></a> prop set.</li> <li>Sticky columns tables require either the <code class="text-nowrap" translate="no">sticky-header</code> and/or <code class="text-nowrap" translate="no">responsive</code> modes, and are wrapped inside a horizontally scrollable <code class="text-nowrap" translate="no">&lt;div&gt;</code>.</li> <li>When you have multiple columns that are set as <code class="text-nowrap" translate="no">stickyColumn</code>, the columns will stack over each other visually, and the left-most sticky columns may &quot;peek&quot; out from under the next sticky column. To get around this behaviour, make sure your latter sticky columns are the same width or wider than previous sticky columns.</li> <li>Bootstrap v4 uses the CSS style <code class="text-nowrap" translate="no">border-collapse: collapsed</code> on table elements. This prevents any borders on the sticky columns from &quot;sticking&quot; to the column, and hence those borders will scroll when the body scrolls. To get around this issue, set the prop <code class="text-nowrap" translate="no">no-border-collapse</code> on the table (note that this may cause double width borders when using features such as <code class="text-nowrap" translate="no">bordered</code>, etc.).</li> <li>BootstrapVue&#39;s custom CSS is required in order to support sticky columns.</li> <li>The sticky column feature uses CSS style <code class="text-nowrap" translate="no">position: sticky</code> to position the column cells. Internet Explorer does not support <code class="text-nowrap" translate="no">position: sticky</code>, hence for IE 11 the sticky column will scroll with the table body.</li> </ul> <h3 id="row-details-support" class="bv-no-focus-ring"><span class="bd-content-title">Row details support<a class="anchorjs-link" href="#row-details-support" aria-labelledby="row-details-support"></a></span></h3> <p>If you would optionally like to display additional record information (such as columns not specified in the fields definition array), you can use the scoped slot <code class="text-nowrap" translate="no">row-details</code>, in combination with the special item record Boolean property <code class="text-nowrap" translate="no">_showDetails</code>.</p> <p>If the record has its <code class="text-nowrap" translate="no">_showDetails</code> property set to <code class="text-nowrap" translate="no">true</code>, <strong>and</strong> a <code class="text-nowrap" translate="no">row-details</code> scoped slot exists, a new row will be shown just below the item, with the rendered contents of the <code class="text-nowrap" translate="no">row-details</code> scoped slot.</p> <p>In the scoped field slot, you can toggle the visibility of the row&#39;s <code class="text-nowrap" translate="no">row-details</code> scoped slot by calling the <code class="text-nowrap" translate="no">toggleDetails</code> function passed to the field&#39;s scoped slot variable. You can use the scoped fields slot variable <code class="text-nowrap" translate="no">detailsShowing</code> to determine the visibility of the <code class="text-nowrap" translate="no">row-details</code> slot.</p> <p><strong>Note:</strong> If manipulating the <code class="text-nowrap" translate="no">_showDetails</code> property directly on the item data (i.e. not via the <code class="text-nowrap" translate="no">toggleDetails</code> function reference), the <code class="text-nowrap" translate="no">_showDetails</code> properly <strong>must</strong> exist in the items data for proper reactive detection of changes to its value. Read more about <a href="https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats" target="_blank" rel="noopener">Vue&#39;s reactivity limitations</a>.</p> <p><strong>Available <code class="text-nowrap" translate="no">row-details</code> scoped variable properties:</strong></p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">item</code></td> <td>Object</td> <td>The entire row record data object</td> </tr> <tr> <td><code class="text-nowrap" translate="no">index</code></td> <td>Number</td> <td>The current visible row number</td> </tr> <tr> <td><code class="text-nowrap" translate="no">fields</code></td> <td>Array</td> <td>The normalized fields definition array (in the <em>array of objects</em> format)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">toggleDetails</code></td> <td>Function</td> <td>Function to toggle visibility of the row&#39;s details slot</td> </tr> <tr> <td><code class="text-nowrap" translate="no">rowSelected</code></td> <td>Boolean</td> <td>Will be <code class="text-nowrap" translate="no">true</code> if the row has been selected. See section <a href="#row-select-support" class="font-weight-bold">Row select support</a> for additional information</td> </tr> <tr> <td><code class="text-nowrap" translate="no">selectRow</code></td> <td>Function</td> <td>When called, selects the current row. See section <a href="#row-select-support" class="font-weight-bold">Row select support</a> for additional information</td> </tr> <tr> <td><code class="text-nowrap" translate="no">unselectRow</code></td> <td>Function</td> <td>When called, unselects the current row. See section <a href="#row-select-support" class="font-weight-bold">Row select support</a> for additional information</td> </tr> </tbody></table> </div><p>Note: the row select related scope properties are only available in <code class="text-nowrap" translate="no">&lt;b-table&gt;</code>.</p> <p>In the following example, we show two methods of toggling the visibility of the details: one via a button, and one via a checkbox. We also have the third row details defaulting to have details initially showing.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span> <span class="hljs-attr">striped</span> <span class="hljs-attr">responsive</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>(<span class="hljs-attr">show_details</span>)=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;row.toggleDetails&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-2&quot;</span>&gt;</span>\n          {{ row.detailsShowing ? &#x27;Hide&#x27; : &#x27;Show&#x27;}} Details\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n        <span class="hljs-comment">&lt;!-- As `row.showDetails` is one-way, we call the toggleDetails function on @change --&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;row.detailsShowing&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;row.toggleDetails&quot;</span>&gt;</span>\n          Details via check\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">row-details</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-sm-right&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Age:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>{{ row.item.age }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-sm-right&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Is Active:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>{{ row.item.isActive }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;row.toggleDetails&quot;</span>&gt;</span>Hide Details<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>, <span class="hljs-string">&#x27;show_details&#x27;</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          {\n            <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>,\n            <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>,\n            <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>,\n            <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span>,\n            <span class="hljs-attr">_showDetails</span>: <span class="hljs-literal">true</span>\n          },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Jami&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Carney&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-details.vue --&gt;</span></pre></div><h3 id="row-select-support" class="bv-no-focus-ring"><span class="bd-content-title">Row select support<a class="anchorjs-link" href="#row-select-support" aria-labelledby="row-select-support"></a></span></h3> <p>You can make rows selectable, by using the <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> prop <code class="text-nowrap" translate="no">selectable</code>.</p> <p>Users can easily change the selecting mode by setting the <code class="text-nowrap" translate="no">select-mode</code> prop.</p> <ul> <li><code class="text-nowrap" translate="no">&#39;multi&#39;</code>: Each click will select/deselect the row (default mode)</li> <li><code class="text-nowrap" translate="no">&#39;single&#39;</code>: Only a single row can be selected at one time</li> <li><code class="text-nowrap" translate="no">&#39;range&#39;</code>: Any row clicked is selected, any other deselected. <kbd class="notranslate" translate="no">Shift</kbd> + click selects a range of rows, and <kbd class="notranslate" translate="no">Ctrl</kbd> (or <kbd class="notranslate" translate="no">Cmd</kbd>) + click will toggle the selected row.</li> </ul> <p>When a table is <code class="text-nowrap" translate="no">selectable</code> and the user clicks on a row, <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> will emit the <code class="text-nowrap" translate="no">row-selected</code> event, passing a single argument which is the complete list of selected items. <strong>Treat this argument as read-only.</strong></p> <p>Rows can also be programmatically selected and unselected via the following exposed methods on the <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> instance (i.e. via a reference to the table instance via <code class="text-nowrap" translate="no">this.$refs</code>):</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Method</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">selectRow(index)</code></td> <td>Selects a row with the given <code class="text-nowrap" translate="no">index</code> number.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">unselectRow(index)</code></td> <td>Unselects a row with the given <code class="text-nowrap" translate="no">index</code> number.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">selectAllRows()</code></td> <td>Selects all rows in the table, except in <code class="text-nowrap" translate="no">single</code> mode in which case only the first row is selected.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">clearSelected()</code></td> <td>Unselects all rows.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">isRowSelected(index)</code></td> <td>Returns <code class="text-nowrap" translate="no">true</code> if the row with the given <code class="text-nowrap" translate="no">index</code> is selected, otherwise it returns <code class="text-nowrap" translate="no">false</code>.</td> </tr> </tbody></table> </div><p><strong>Programmatic row selection notes:</strong></p> <ul> <li><code class="text-nowrap" translate="no">index</code> is the zero-based index of the table&#39;s <strong>visible rows</strong>, after filtering, sorting, and pagination have been applied.</li> <li>In <code class="text-nowrap" translate="no">single</code> mode, <code class="text-nowrap" translate="no">selectRow(index)</code> will unselect any previous selected row.</li> <li>Attempting to <code class="text-nowrap" translate="no">selectRow(index)</code> or <code class="text-nowrap" translate="no">unselectRow(index)</code> on a non-existent row will be ignored.</li> <li>The table must be <code class="text-nowrap" translate="no">selectable</code> for any of these methods to have effect.</li> <li>You can disable selection of rows via click events by setting the <code class="text-nowrap" translate="no">no-select-on-click</code> prop. Rows will then only be selectable programmatically.</li> </ul> <p><strong>Row select notes:</strong></p> <ul> <li><a href="#sorting" class="font-weight-bold">Sorting</a>, <a href="#filtering" class="font-weight-bold">filtering</a>, or <a href="#pagination" class="font-weight-bold">paginating</a> the table will <strong>clear the active selection</strong>. The <code class="text-nowrap" translate="no">row-selected</code> event will be emitted with an empty array (<code class="text-nowrap" translate="no">[]</code>) if needed.</li> <li>When the table is in <code class="text-nowrap" translate="no">selectable</code> mode, all data item <code class="text-nowrap" translate="no">&lt;tr&gt;</code> elements will be in the document tab sequence (<code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code>) for <a href="#accessibility" class="font-weight-bold">accessibility</a> reasons, and will have the attribute <code class="text-nowrap" translate="no">aria-selected</code> set to either <code class="text-nowrap" translate="no">&#39;true&#39;</code> or <code class="text-nowrap" translate="no">&#39;false&#39;</code> depending on the selected state of the row.</li> <li>When a table is <code class="text-nowrap" translate="no">selectable</code>, the table will have the attribute <code class="text-nowrap" translate="no">aria-multiselect</code> set to either <code class="text-nowrap" translate="no">&#39;false&#39;</code> for <code class="text-nowrap" translate="no">single</code> mode, and <code class="text-nowrap" translate="no">&#39;true&#39;</code> for either <code class="text-nowrap" translate="no">multi</code> or <code class="text-nowrap" translate="no">range</code> modes.</li> </ul> <p>When a <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> is selectable, it will have class <code class="text-nowrap" translate="no">b-table-selectable</code> and one of the following three classes (depending on which mode is in use) on the <code class="text-nowrap" translate="no">&lt;table&gt;</code> element:</p> <ul> <li><code class="text-nowrap" translate="no">b-table-select-single</code></li> <li><code class="text-nowrap" translate="no">b-table-select-multi</code></li> <li><code class="text-nowrap" translate="no">b-table-select-range</code></li> </ul> <p>When at least one row is selected, the class <code class="text-nowrap" translate="no">b-table-selecting</code> will be active on the <code class="text-nowrap" translate="no">&lt;table&gt;</code> element. Rows that are selected rows will have a class of <code class="text-nowrap" translate="no">b-table-row-selected</code> applied to the <code class="text-nowrap" translate="no">&lt;tr&gt;</code> element.</p> <p>Use the prop <code class="text-nowrap" translate="no">selected-variant</code> to apply a Bootstrap theme color to the selected row(s). Note, due to the order that the table variants are defined in Bootstrap&#39;s CSS, any row-variant <em>might</em> take precedence over the <code class="text-nowrap" translate="no">selected-variant</code>. You can set <code class="text-nowrap" translate="no">selected-variant</code> to an empty string if you will be using other means to convey that a row is selected (such as a scoped field slot in the below example).</p> <p>The <code class="text-nowrap" translate="no">selected-variant</code> can be any of the <a href="/docs/reference/color-variants" class="font-weight-bold">standard (or custom) Bootstrap base color variants</a>, or the special <a href="/docs/reference/color-variants#table-variants" class="font-weight-bold">table <code class="text-nowrap" translate="no">active</code> variant</a> (the default) which takes precedence over any specific row or cell variants.</p> <p>For accessibility reasons (specifically for color blind users, or users with color contrast issues), it is highly recommended to always provide some other visual means of conveying that a row is selected, such as a virtual column as shown in the example below.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Selection mode:&quot;</span>\n      <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;table-select-mode-select&quot;</span>\n      <span class="hljs-attr">label-cols-md</span>=<span class="hljs-string">&quot;4&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table-select-mode-select&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectMode&quot;</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;modes&quot;</span>\n        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>\n      <span class="hljs-attr">:select-mode</span>=<span class="hljs-string">&quot;selectMode&quot;</span>\n      <span class="hljs-attr">responsive</span>=<span class="hljs-string">&quot;sm&quot;</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;selectableTable&quot;</span>\n      <span class="hljs-attr">selectable</span>\n      @<span class="hljs-attr">row-selected</span>=<span class="hljs-string">&quot;onRowSelected&quot;</span>\n    &gt;</span>\n      <span class="hljs-comment">&lt;!-- Example scoped slot for select state illustrative purposes --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>(<span class="hljs-attr">selected</span>)=<span class="hljs-string">&quot;{ rowSelected }&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;rowSelected&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-symbol">&amp;check;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Selected<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Not selected<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;selectAllRows&quot;</span>&gt;</span>Select all<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clearSelected&quot;</span>&gt;</span>Clear selected<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;selectThirdRow&quot;</span>&gt;</span>Select 3rd row<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;unselectThirdRow&quot;</span>&gt;</span>Unselect 3rd row<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n      Selected Rows:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n      {{ selected }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">modes</span>: [<span class="hljs-string">&#x27;multi&#x27;</span>, <span class="hljs-string">&#x27;single&#x27;</span>, <span class="hljs-string">&#x27;range&#x27;</span>],\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">&#x27;selected&#x27;</span>, <span class="hljs-string">&#x27;isActive&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Jami&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Carney&#x27;</span> }\n        ],\n        <span class="hljs-attr">selectMode</span>: <span class="hljs-string">&#x27;multi&#x27;</span>,\n        <span class="hljs-attr">selected</span>: []\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onRowSelected</span>(<span class="hljs-params">items</span>)</span> {\n        <span class="hljs-built_in">this</span>.selected = items\n      },\n      <span class="hljs-function"><span class="hljs-title">selectAllRows</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.selectableTable.selectAllRows()\n      },\n      <span class="hljs-function"><span class="hljs-title">clearSelected</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs.selectableTable.clearSelected()\n      },\n      <span class="hljs-function"><span class="hljs-title">selectThirdRow</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Rows are indexed from 0, so the third row is index 2</span>\n        <span class="hljs-built_in">this</span>.$refs.selectableTable.selectRow(<span class="hljs-number">2</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">unselectThirdRow</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Rows are indexed from 0, so the third row is index 2</span>\n        <span class="hljs-built_in">this</span>.$refs.selectableTable.unselectRow(<span class="hljs-number">2</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-selectable.vue --&gt;</span></pre></div><h3 id="table-body-transition-support" class="bv-no-focus-ring"><span class="bd-content-title">Table body transition support<a class="anchorjs-link" href="#table-body-transition-support" aria-labelledby="table-body-transition-support"></a></span></h3> <p>Vue transitions and animations are optionally supported on the <code class="text-nowrap" translate="no">&lt;tbody&gt;</code> element via the use of Vue&#39;s <code class="text-nowrap" translate="no">&lt;transition-group&gt;</code> component internally. Three props are available for transitions support (all three default to undefined):</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Prop</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">tbody-transition-props</code></td> <td>Object</td> <td>Object of transition-group properties</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tbody-transition-handlers</code></td> <td>Object</td> <td>Object of transition-group event handlers</td> </tr> <tr> <td><code class="text-nowrap" translate="no">primary-key</code></td> <td>String</td> <td>String specifying the field to use as a unique row key (required)</td> </tr> </tbody></table> </div><p>To enable transitions you need to specify <code class="text-nowrap" translate="no">tbody-transition-props</code> and/or <code class="text-nowrap" translate="no">tbody-transition-handlers</code>, and must specify which field key to use as a unique key via the <code class="text-nowrap" translate="no">primary-key</code> prop. Your data <strong>must have</strong> a column (specified by setting the <code class="text-nowrap" translate="no">primary-key</code> prop to the <em>name</em> of the field) that has a <strong>unique value per row</strong> in order for transitions to work properly. The <code class="text-nowrap" translate="no">primary-key</code> field&#39;s <em>value</em> can either be a unique string or number. The field specified does not need to appear in the rendered table output, but it <strong>must</strong> exist in each row of your items data.</p> <p>You must also provide CSS to handle your transitions (if using CSS transitions) in your project.</p> <p>For more information of Vue&#39;s list rendering transitions, see the <a href="https://vuejs.org/v2/guide/transitions.html#List-Move-Transitions" target="_blank" rel="noopener">Vue JS official docs</a>.</p> <p>In the example below, we have used the following custom CSS:</p> <div class="bd-code"><pre class="hljs css p-2" translate="no"><span class="hljs-selector-tag">table</span><span class="hljs-selector-id">#table-transition-example</span> <span class="hljs-selector-class">.flip-list-move</span> {\n  <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">1s</span>;\n}</pre></div><div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table-transition-example&quot;</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>\n      <span class="hljs-attr">striped</span>\n      <span class="hljs-attr">small</span>\n      <span class="hljs-attr">primary-key</span>=<span class="hljs-string">&quot;a&quot;</span>\n      <span class="hljs-attr">:tbody-transition-props</span>=<span class="hljs-string">&quot;transProps&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">transProps</span>: {\n          <span class="hljs-comment">// Transition name</span>\n          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;flip-list&#x27;</span>\n        },\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;Two&#x27;</span>, <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;Moose&#x27;</span> },\n          { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;Three&#x27;</span>, <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;Dog&#x27;</span> },\n          { <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;Four&#x27;</span>, <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;Cat&#x27;</span> },\n          { <span class="hljs-attr">a</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;One&#x27;</span>, <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;Mouse&#x27;</span> }\n        ],\n        <span class="hljs-attr">fields</span>: [\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-transitions.vue --&gt;</span></pre></div><h3 id="v-model-binding" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">v-model</code> binding<a class="anchorjs-link" href="#v-model-binding" aria-labelledby="v-model-binding"></a></span></h3> <p>If you bind a variable to the <code class="text-nowrap" translate="no">v-model</code> prop, the contents of this variable will be the currently displayed item records (zero based index, up to <code class="text-nowrap" translate="no">page-size</code> - 1). This variable (the <code class="text-nowrap" translate="no">value</code> prop) should usually be treated as <em>readonly</em>.</p> <p>The records within the <code class="text-nowrap" translate="no">v-model</code> are a filtered/paginated <em>shallow copy</em> of <code class="text-nowrap" translate="no">items</code>, and hence any changes to a record&#39;s properties in the <code class="text-nowrap" translate="no">v-model</code> will be reflected in the original <code class="text-nowrap" translate="no">items</code> array (except when <code class="text-nowrap" translate="no">items</code> is set to a provider function). Deleting a record from the <code class="text-nowrap" translate="no">v-model</code> array will <strong>not</strong> remove the record from the original items array nor will it remove it from the displayed rows.</p> <p><strong>Note:</strong> Do not bind any value directly to the <code class="text-nowrap" translate="no">value</code> prop. Use the <code class="text-nowrap" translate="no">v-model</code> binding.</p> <h2 id="sorting" class="bv-no-focus-ring"><span class="bd-content-title">Sorting<a class="anchorjs-link" href="#sorting" aria-labelledby="sorting"></a></span></h2> <p>As mentioned in the <a href="#fields-column-definitions" class="font-weight-bold">Fields</a> section above, you can make columns sortable in <code class="text-nowrap" translate="no">&lt;b-table&gt;</code>. Clicking on a sortable column header will sort the column in ascending direction (smallest first), while clicking on it again will switch the direction of sorting to descending (largest first). Clicking on a non-sortable column will clear the sorting (the prop <code class="text-nowrap" translate="no">no-sort-reset</code> can be used to disable this feature).</p> <p>You can control which column is pre-sorted and the order of sorting (ascending or descending). To pre-specify the column to be sorted, set the <code class="text-nowrap" translate="no">sort-by</code> prop to the field&#39;s key. Set the sort direction by setting <code class="text-nowrap" translate="no">sort-desc</code> to either <code class="text-nowrap" translate="no">true</code> (for descending) or <code class="text-nowrap" translate="no">false</code> (for ascending, the default).</p> <ul> <li><strong>Ascending</strong>: Items are sorted lowest to highest (i.e. <code class="text-nowrap" translate="no">A</code> to <code class="text-nowrap" translate="no">Z</code>) and will be displayed with the lowest value in the first row with progressively higher values in the following rows.</li> <li><strong>Descending</strong>: Items are sorted highest to lowest (i.e. <code class="text-nowrap" translate="no">Z</code> to <code class="text-nowrap" translate="no">A</code>) and will be displayed with the highest value in the first row with progressively lower values in the following rows.</li> </ul> <p>The props <code class="text-nowrap" translate="no">sort-by</code> and <code class="text-nowrap" translate="no">sort-desc</code> can be turned into <em>two-way</em> (syncable) props by adding the <code class="text-nowrap" translate="no">.sync</code> modifier. Your bound variables will then be updated accordingly based on the current sort criteria. See the <a href="https://vuejs.org/v2/guide/components.html#sync-Modifier" target="_blank" rel="noopener">Vue docs</a> for details on the <code class="text-nowrap" translate="no">.sync</code> prop modifier.</p> <p>Setting <code class="text-nowrap" translate="no">sort-by</code> to a column that is not defined in the fields as <code class="text-nowrap" translate="no">sortable</code> will result in the table not being sorted.</p> <p>When the prop <code class="text-nowrap" translate="no">foot-clone</code> is set, the footer headings will also allow sorting by clicking, even if you have custom formatted footer field headers. To disable the sort icons and sorting via heading clicks in the footer, set the <code class="text-nowrap" translate="no">no-footer-sorting</code> prop to true.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>\n      <span class="hljs-attr">:sort-by.sync</span>=<span class="hljs-string">&quot;sortBy&quot;</span>\n      <span class="hljs-attr">:sort-desc.sync</span>=<span class="hljs-string">&quot;sortDesc&quot;</span>\n      <span class="hljs-attr">responsive</span>=<span class="hljs-string">&quot;sm&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      Sorting By: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{{ sortBy }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>, Sort Direction:\n      <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{{ sortDesc ? &#x27;Descending&#x27; : &#x27;Ascending&#x27; }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">sortBy</span>: <span class="hljs-string">&#x27;age&#x27;</span>,\n        <span class="hljs-attr">sortDesc</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">fields</span>: [\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;last_name&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;isActive&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">false</span> }\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Jami&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Carney&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-sorting.vue --&gt;</span></pre></div><h3 id="sort-icon-alignment" class="bv-no-focus-ring"><span class="bd-content-title">Sort icon alignment<a class="anchorjs-link" href="#sort-icon-alignment" aria-labelledby="sort-icon-alignment"></a></span></h3> <p>By default the sorting icons appear right aligned in the header cell. You can change the icons to be left aligned by setting the prop <code class="text-nowrap" translate="no">sort-icon-left</code> on <code class="text-nowrap" translate="no">&lt;b-table&gt;</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>\n      <span class="hljs-attr">:sort-by.sync</span>=<span class="hljs-string">&quot;sortBy&quot;</span>\n      <span class="hljs-attr">:sort-desc.sync</span>=<span class="hljs-string">&quot;sortDesc&quot;</span>\n      <span class="hljs-attr">sort-icon-left</span>\n      <span class="hljs-attr">responsive</span>=<span class="hljs-string">&quot;sm&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      Sorting By: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{{ sortBy }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>, Sort Direction:\n      <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{{ sortDesc ? &#x27;Descending&#x27; : &#x27;Ascending&#x27; }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">sortBy</span>: <span class="hljs-string">&#x27;age&#x27;</span>,\n        <span class="hljs-attr">sortDesc</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">fields</span>: [\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;last_name&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;isActive&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">false</span> }\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Jami&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Carney&#x27;</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-sorting-left.vue --&gt;</span></pre></div><h3 id="customizing-the-sort-icons" class="bv-no-focus-ring"><span class="bd-content-title">Customizing the sort icons<a class="anchorjs-link" href="#customizing-the-sort-icons" aria-labelledby="customizing-the-sort-icons"></a></span></h3> <p>The sorting icons are generated via the use of SVG background images. The icons can be altered by updating BootstrapVue&#39;s SASS/SCSS variables and recompiling the SCSS source code. Refer to the <a href="/docs/reference/theming" class="font-weight-bold">theming</a> section for details on customizing Bootstrap and BootstrapVue&#39;s generated CSS.</p> <h3 id="sort-compare-routine" class="bv-no-focus-ring"><span class="bd-content-title">Sort-compare routine<a class="anchorjs-link" href="#sort-compare-routine" aria-labelledby="sort-compare-routine"></a></span></h3> <p>The internal built-in default <code class="text-nowrap" translate="no">sort-compare</code> function sorts the specified field <code class="text-nowrap" translate="no">key</code> based on the data in the underlying record object (or by formatted value if a field has a formatter function, and the field has its <code class="text-nowrap" translate="no">sortByFormatted</code> property is set to <code class="text-nowrap" translate="no">true</code>). The field value is first stringified if it is an object and then sorted.</p> <p><strong>Notes:</strong></p> <ul> <li>The built-in <code class="text-nowrap" translate="no">sort-compare</code> routine <strong>cannot</strong> sort based on the custom rendering of the field data: scoped slots are used only for <em>presentation only</em>, and do not affect the underlying data.</li> <li>Fields that have a <a href="#formatter-callback" class="font-weight-bold"><code class="text-nowrap" translate="no">formatter</code> function</a> (virtual field or regular field) can be sorted by the value returned via the formatter function if the <a href="#field-definition-reference" class="font-weight-bold">field</a> property <code class="text-nowrap" translate="no">sortByFormatted</code> is set to <code class="text-nowrap" translate="no">true</code>. Optionally you can pass a formatter function reference to <code class="text-nowrap" translate="no">sortByFormatted</code> to format the value before sorting. The default is <code class="text-nowrap" translate="no">false</code> which will sort by the original field value. This is only applicable for the built-in sort-compare routine.</li> <li>By default, the internal sorting routine will sort <code class="text-nowrap" translate="no">null</code>, <code class="text-nowrap" translate="no">undefined</code>, or empty string values first (less than any other values). To sort so that <code class="text-nowrap" translate="no">null</code>, <code class="text-nowrap" translate="no">undefined</code> or empty string values appear last (greater than any other value), set the <code class="text-nowrap" translate="no">sort-null-last</code> prop to <code class="text-nowrap" translate="no">true</code>.</li> </ul> <p>For customizing the sort-compare handling, refer to the <a href="#custom-sort-compare-routine" class="font-weight-bold">Custom sort-compare routine</a> section below.</p> <h3 id="internal-sorting-and-locale-handling" class="bv-no-focus-ring"><span class="bd-content-title">Internal sorting and locale handling<a class="anchorjs-link" href="#internal-sorting-and-locale-handling" aria-labelledby="internal-sorting-and-locale-handling"></a></span></h3> <p>The internal sort-compare routine uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">String.prototype.localeCompare()</code></a> for comparing the stringified column value (if values being compared are not both <code class="text-nowrap" translate="no">Number</code> or both <code class="text-nowrap" translate="no">Date</code> types). The browser native <code class="text-nowrap" translate="no">localeCompare()</code> method accepts a <code class="text-nowrap" translate="no">locale</code> string (or array of locale strings) and an <code class="text-nowrap" translate="no">options</code> object for controlling how strings are sorted. The default options are <code class="text-nowrap" translate="no">{ numeric: true }</code>, and the locale is <code class="text-nowrap" translate="no">undefined</code> (which uses the browser default locale).</p> <p>You can change the locale (or locales) via the <code class="text-nowrap" translate="no">sort-compare-locale</code> prop to set the locale(s) for sorting, as well as pass sort options via the <code class="text-nowrap" translate="no">sort-compare-options</code> prop.</p> <p>The <code class="text-nowrap" translate="no">sort-compare-locale</code> prop defaults to <code class="text-nowrap" translate="no">undefined</code>, which uses the browser (or Node.js runtime) default locale. The prop <code class="text-nowrap" translate="no">sort-compare-locale</code> can either accept a <a href="https://tools.ietf.org/html/rfc5646" target="_blank" rel="noopener">BCP 47 language tag</a> string or an <em>array</em> of such tags. For more details on locales, please see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation" target="_blank" rel="noopener">Locale identification and negotiation</a> on MDN.</p> <p>The <code class="text-nowrap" translate="no">sort-compare-options</code> prop accepts an object containing any of the following properties:</p> <ul> <li><code class="text-nowrap" translate="no">localeMatcher</code>: The locale matching algorithm to use. Possible values are <code class="text-nowrap" translate="no">&#39;lookup&#39;</code> and <code class="text-nowrap" translate="no">&#39;best fit&#39;</code>. The default is <code class="text-nowrap" translate="no">&#39;best fit&#39;</code>. For information about this option, see the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation" target="_blank" rel="noopener">MDN Intl page</a> for details.</li> <li><code class="text-nowrap" translate="no">sensitivity</code>: Which differences in the strings should lead to <em>non-zero</em> compare result values. Possible values are:<ul> <li><code class="text-nowrap" translate="no">&#39;base&#39;</code>: Only strings that differ in base letters compare as unequal. Examples: <code class="text-nowrap" translate="no">a ≠ b</code>, <code class="text-nowrap" translate="no">a = á</code>, <code class="text-nowrap" translate="no">a = A</code>.</li> <li><code class="text-nowrap" translate="no">&#39;accent&#39;</code>: Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: <code class="text-nowrap" translate="no">a ≠ b</code>, <code class="text-nowrap" translate="no">a ≠ á</code>, <code class="text-nowrap" translate="no">a = A</code>.</li> <li><code class="text-nowrap" translate="no">&#39;case&#39;</code>: Only strings that differ in base letters or case compare as unequal. Examples: <code class="text-nowrap" translate="no">a ≠ b</code>, <code class="text-nowrap" translate="no">a = á</code>, <code class="text-nowrap" translate="no">a ≠ A</code>.</li> <li><code class="text-nowrap" translate="no">&#39;variant&#39;</code>: <strong>(default)</strong> Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences <em>may also</em> be taken into consideration. Examples: <code class="text-nowrap" translate="no">a ≠ b</code>, <code class="text-nowrap" translate="no">a ≠ á</code>, <code class="text-nowrap" translate="no">a ≠ A</code>.</li> </ul> </li> <li><code class="text-nowrap" translate="no">ignorePunctuation</code>: Whether punctuation should be ignored. Possible values are <code class="text-nowrap" translate="no">true</code> and <code class="text-nowrap" translate="no">false</code>. The default is <code class="text-nowrap" translate="no">false</code>.</li> <li><code class="text-nowrap" translate="no">numeric</code>: Whether numeric collation should be used, such that <code class="text-nowrap" translate="no">&#39;1&#39; &lt; &#39;2&#39; &lt; &#39;10&#39;</code>. Possible values are <code class="text-nowrap" translate="no">true</code> and <code class="text-nowrap" translate="no">false</code>. The default is <code class="text-nowrap" translate="no">false</code>. Note that implementations (browsers, runtimes) are not required to support this property, and therefore it might be ignored.</li> <li><code class="text-nowrap" translate="no">caseFirst</code>: Whether upper case or lower case should sort first. Possible values are <code class="text-nowrap" translate="no">&#39;upper&#39;</code>, <code class="text-nowrap" translate="no">&#39;lower&#39;</code>, or <code class="text-nowrap" translate="no">&#39;false&#39;</code> (use the locale&#39;s default). The default is <code class="text-nowrap" translate="no">&#39;false&#39;</code>. Implementations are not required to support this property.</li> <li><code class="text-nowrap" translate="no">&#39;usage&#39;</code>: <strong>Always</strong> set to <code class="text-nowrap" translate="no">&#39;sort&#39;</code> by <code class="text-nowrap" translate="no">&lt;b-table&gt;</code></li> </ul> <p><strong>Example 1:</strong> If you want to sort German words, set <code class="text-nowrap" translate="no">sort-compare-locale=&quot;de&quot;</code> (in German, <code class="text-nowrap" translate="no">ä</code> sorts <em>before</em> <code class="text-nowrap" translate="no">z</code>) or Swedish set <code class="text-nowrap" translate="no">sort-compare-locale=&quot;sv&quot;</code> (in Swedish, <code class="text-nowrap" translate="no">ä</code> sorts <em>after</em> <code class="text-nowrap" translate="no">z</code>)</p> <p><strong>Example 2:</strong> To compare numbers that are strings numerically, and to ignore case and accents:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:sort-compare-options</span>=<span class="hljs-string">&quot;{ numeric: true, sensitivity: &#x27;base&#x27; }&quot;</span> <span class="hljs-attr">...</span>&gt;</span></pre></div><p><strong>Notes:</strong></p> <ul> <li>Refer to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noopener">MDN <code class="text-nowrap" translate="no">String.prototype.localeCompare()</code> documentation</a> for details on the options object property values.</li> <li>Refer to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument" target="_blank" rel="noopener">MDN locales documentation</a> for details on locale values.</li> <li>Not all browsers (or Node.js) support the <code class="text-nowrap" translate="no">locale</code> and <code class="text-nowrap" translate="no">options</code> with <code class="text-nowrap" translate="no">String.prototype.localeCompare()</code>. Refer to <a href="https://caniuse.com/localecompare" target="_blank" rel="noopener">Can I use</a> for browser support. For Node.js, you may need to add in <a href="https://nodejs.org/api/intl.html" target="_blank" rel="noopener">Intl support</a> for handling locales, other than the default, to prevent <a href="https://ssr.vuejs.org/guide/hydration.html" target="_blank" rel="noopener">SSR hydration mismatch errors</a>.</li> </ul> <h3 id="custom-sort-compare-routine" class="bv-no-focus-ring"><span class="bd-content-title">Custom sort-compare routine<a class="anchorjs-link" href="#custom-sort-compare-routine" aria-labelledby="custom-sort-compare-routine"></a></span></h3> <p>You can provide your own custom sort compare routine by passing a function reference to the prop <code class="text-nowrap" translate="no">sort-compare</code>. The <code class="text-nowrap" translate="no">sort-compare</code> routine is passed seven (7) arguments, of which the last 4 are optional:</p> <ul> <li>the first two arguments (<code class="text-nowrap" translate="no">a</code> and <code class="text-nowrap" translate="no">b</code>) are the <em>record objects</em> for the rows being compared</li> <li>the third argument is the field <code class="text-nowrap" translate="no">key</code> being sorted on (<code class="text-nowrap" translate="no">sortBy</code>)</li> <li>the fourth argument (<code class="text-nowrap" translate="no">sortDesc</code>) is the order <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> will be displaying the records (<code class="text-nowrap" translate="no">true</code> for descending, <code class="text-nowrap" translate="no">false</code> for ascending)</li> <li>the fifth argument is a reference to the field&#39;s <a href="#formatter-callback" class="font-weight-bold">formatter function</a> or the field&#39;s <code class="text-nowrap" translate="no">filterByFormatted</code> value if it is a function reference. If not formatter is found this value will be <code class="text-nowrap" translate="no">undefined</code>. You will need to call this method to get the formatted field value: <code class="text-nowrap" translate="no">valA = formatter(a[key], key, a)</code> and <code class="text-nowrap" translate="no">valB = formatter(b[key], key, b)</code>, if you need to sort by the formatted value. This will be <code class="text-nowrap" translate="no">undefined</code> if the field&#39;s <code class="text-nowrap" translate="no">sortByFormatted</code> property is not <code class="text-nowrap" translate="no">true</code> or is not a formatter function <em>reference</em>, or the fields formatter function cannot be found.</li> <li>the sixth argument is the value of the <code class="text-nowrap" translate="no">sort-compare-options</code> prop (default is <code class="text-nowrap" translate="no">{ numeric: true }</code>)</li> <li>the seventh argument is the value of the <code class="text-nowrap" translate="no">sort-compare-locale</code> prop (default is <code class="text-nowrap" translate="no">undefined</code>)</li> </ul> <p>The sixth and seventh arguments can be used if you are using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">String.prototype.localeCompare()</code></a> method to compare strings.</p> <p>In most typical situations, you only need to use the first three arguments. The fourth argument - sorting direction - should not normally be used, as <code class="text-nowrap" translate="no">b-table</code> will handle the direction, and this value is typically only needed when special handling of how <code class="text-nowrap" translate="no">null</code> and/or <code class="text-nowrap" translate="no">undefined</code> values are sorted (i.e. sorting <code class="text-nowrap" translate="no">null</code>/<code class="text-nowrap" translate="no">undefined</code> first or last).</p> <p>The routine should return either <code class="text-nowrap" translate="no">-1</code> (or a negative value) for <code class="text-nowrap" translate="no">a[key] &lt; b[key]</code> , <code class="text-nowrap" translate="no">0</code> for <code class="text-nowrap" translate="no">a[key] === b[key]</code>, or <code class="text-nowrap" translate="no">1</code> (or a positive value) for <code class="text-nowrap" translate="no">a[key] &gt; b[key]</code>.</p> <p>Your custom sort-compare routine can also return <code class="text-nowrap" translate="no">null</code> or <code class="text-nowrap" translate="no">false</code>, to fall back to the <em>built-in sort-compare routine</em> for the particular <code class="text-nowrap" translate="no">key</code>. You can use this feature (i.e. by returning <code class="text-nowrap" translate="no">null</code>) to have your custom sort-compare routine handle <em>only</em> certain fields (keys) such as the special case of virtual (scoped slot) columns, and have the internal (built in) sort-compare handle all <em>other</em> fields.</p> <p>The default sort-compare routine works similar to the following. Note the fourth argument (sorting direction) is <strong>not</strong> used in the sort comparison:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortCompare</span>(<span class="hljs-params">aRow, bRow, key, sortDesc, formatter, compareOptions, compareLocale</span>) </span>{\n  <span class="hljs-keyword">const</span> a = aRow[key] <span class="hljs-comment">// or use Lodash `_.get()`</span>\n  <span class="hljs-keyword">const</span> b = bRow[key]\n  <span class="hljs-keyword">if</span> (\n    (<span class="hljs-keyword">typeof</span> a === <span class="hljs-string">&#x27;number&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> b === <span class="hljs-string">&#x27;number&#x27;</span>) ||\n    (a <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span> &amp;&amp; b <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span>)\n  ) {\n    <span class="hljs-comment">// If both compared fields are native numbers or both are native dates</span>\n    <span class="hljs-keyword">return</span> a &lt; b ? -<span class="hljs-number">1</span> : a &gt; b ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-comment">// Otherwise stringify the field data and use String.prototype.localeCompare</span>\n    <span class="hljs-keyword">return</span> toString(a).localeCompare(toString(b), compareLocale, compareOptions)\n  }\n}\n\n<span class="hljs-comment">// Helper function to stringify the values of an Object</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toString</span>(<span class="hljs-params">value</span>) </span>{\n  <span class="hljs-keyword">if</span> (value === <span class="hljs-literal">null</span> || <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;undefined&#x27;</span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(value)\n      .sort()\n      .map(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> toString(value[key]))\n      .join(<span class="hljs-string">&#x27; &#x27;</span>)\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>(value)\n  }\n}</pre></div><h3 id="disable-local-sorting" class="bv-no-focus-ring"><span class="bd-content-title">Disable local sorting<a class="anchorjs-link" href="#disable-local-sorting" aria-labelledby="disable-local-sorting"></a></span></h3> <p>If you want to handle sorting entirely in your app, you can disable the local sorting in <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> by setting the prop <code class="text-nowrap" translate="no">no-local-sorting</code> to <code class="text-nowrap" translate="no">true</code>, while still maintaining the sortable header functionality (via <code class="text-nowrap" translate="no">sort-changed</code> or <code class="text-nowrap" translate="no">context-changed</code> events as well as syncable props).</p> <p>You can use the syncable props <code class="text-nowrap" translate="no">sort-by.sync</code> and <code class="text-nowrap" translate="no">sort-desc.sync</code> to detect changes in sorting column and direction.</p> <p>Also, When a sortable column header (or footer) is clicked, the event <code class="text-nowrap" translate="no">sort-changed</code> will be emitted with a single argument containing the context object of <code class="text-nowrap" translate="no">&lt;b-table&gt;</code>. See the <a href="#detection-of-sorting-change" class="font-weight-bold">Detection of sorting change</a> section below for details about the sort-changed event and the context object.</p> <p>When <code class="text-nowrap" translate="no">no-local-sorting</code> is <code class="text-nowrap" translate="no">true</code>, the <code class="text-nowrap" translate="no">sort-compare</code> prop has no effect.</p> <h3 id="change-initial-sort-direction" class="bv-no-focus-ring"><span class="bd-content-title">Change initial sort direction<a class="anchorjs-link" href="#change-initial-sort-direction" aria-labelledby="change-initial-sort-direction"></a></span></h3> <p>Control the order in which ascending and descending sorting is applied when a sortable column header is clicked, by using the <code class="text-nowrap" translate="no">sort-direction</code> prop. The default value <code class="text-nowrap" translate="no">&#39;asc&#39;</code> applies ascending sort first (when a column is not currently sorted). To reverse the behavior and sort in descending direction first, set it to <code class="text-nowrap" translate="no">&#39;desc&#39;</code>.</p> <p>If you don&#39;t want the current sorting direction to change when clicking another sortable column header, set <code class="text-nowrap" translate="no">sort-direction</code> to <code class="text-nowrap" translate="no">&#39;last&#39;</code>. This will maintain the sorting direction of the previously sorted column.</p> <p>For individual column initial sort direction (which applies when the column transitions from unsorted to sorted), specify the property <code class="text-nowrap" translate="no">sortDirection</code> in <code class="text-nowrap" translate="no">fields</code>. See the <a href="#complete-example" class="font-weight-bold">Complete Example</a> below for an example of using this feature.</p> <h2 id="filtering" class="bv-no-focus-ring"><span class="bd-content-title">Filtering<a class="anchorjs-link" href="#filtering" aria-labelledby="filtering"></a></span></h2> <p>Filtering, when used, is applied by default to the <strong>original items</strong> array data. <code class="text-nowrap" translate="no">b-table</code> provides several options for how data is filtered.</p> <p>It is currently not possible to filter based on result of formatting via <a href="#scoped-field-slots" class="font-weight-bold">scoped field slots</a>.</p> <h3 id="built-in-filtering" class="bv-no-focus-ring"><span class="bd-content-title">Built in filtering<a class="anchorjs-link" href="#built-in-filtering" aria-labelledby="built-in-filtering"></a></span></h3> <p>The item&#39;s row data values are stringified (see the sorting section above for how stringification is done) and the filter searches that stringified data (excluding any of the special properties that begin with an underscore <code class="text-nowrap" translate="no">&#39;_&#39;</code>). The stringification also, by default, includes any data not shown in the presented columns.</p> <p>With the default built-in filter function, the <code class="text-nowrap" translate="no">filter</code> prop value can either be a string or a <code class="text-nowrap" translate="no">RegExp</code> object (regular expressions should <em>not</em> have the <code class="text-nowrap" translate="no">/g</code> global flag set).</p> <p>If the stringified row contains the provided string value or matches the RegExp expression then it is included in the displayed results.</p> <p>Set the <code class="text-nowrap" translate="no">filter</code> prop to <code class="text-nowrap" translate="no">null</code> or an empty string to clear the current filter.</p> <h3 id="built-in-filtering-options" class="bv-no-focus-ring"><span class="bd-content-title">Built in filtering options<a class="anchorjs-link" href="#built-in-filtering-options" aria-labelledby="built-in-filtering-options"></a></span></h3> <p>There are several options for controlling what data the filter is applied against.</p> <ul> <li>The <code class="text-nowrap" translate="no">filter-ignored-fields</code> prop accepts an array of <em>top-level</em> (immediate properties of the row data) field keys that should be ignored when filtering.</li> <li>The <code class="text-nowrap" translate="no">filter-included-fields</code> prop accepts an array of <em>top-level</em> (immediate properties of the row data) field keys that should used when filtering. All other field keys not included in this array will be ignored. This feature can be handy when you want to filter on specific columns. If the specified array is empty, then <em>all</em> fields are included, except those specified via the prop <code class="text-nowrap" translate="no">filter-ignored-fields</code>. If a field key is specified in both <code class="text-nowrap" translate="no">filter-ignored-fields</code> and <code class="text-nowrap" translate="no">filter-included-fields</code>, then <code class="text-nowrap" translate="no">filter-included-fields</code> takes precedence.</li> <li>Normally, <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> filters based on the stringified record data. If the field has a <code class="text-nowrap" translate="no">formatter</code> function specified, you can optionally filter based on the result of the formatter by setting the <a href="#field-definition-reference" class="font-weight-bold">field definition property</a> <code class="text-nowrap" translate="no">filterByFormatted</code> to <code class="text-nowrap" translate="no">true</code>. If the field does not have a formatter function, this option is ignored. You can optionally pass a formatter function <em>reference</em>, to be used for filtering only, to the field definition property <code class="text-nowrap" translate="no">filterByFormatted</code>.</li> </ul> <p>The props <code class="text-nowrap" translate="no">filter-ignored-fields</code> and <code class="text-nowrap" translate="no">filter-included-fields</code>, and the field definition property <code class="text-nowrap" translate="no">filterByFormatted</code> have no effect when using a <a href="#custom-filter-function" class="font-weight-bold">custom filter function</a>, or <a href="#using-items-provider-functions" class="font-weight-bold">items provider</a> based filtering.</p> <h3 id="custom-filter-function" class="bv-no-focus-ring"><span class="bd-content-title">Custom filter function<a class="anchorjs-link" href="#custom-filter-function" aria-labelledby="custom-filter-function"></a></span></h3> <p>You can also use a custom filter function, by setting the prop <code class="text-nowrap" translate="no">filter-function</code> to a reference of custom filter test function. The filter function will be passed two arguments:</p> <ul> <li>the original item row record data object. <strong>Treat this argument as read-only.</strong></li> <li>the content of the <code class="text-nowrap" translate="no">filter</code> prop (could be a string, RegExp, array, or object)</li> </ul> <p>The function should return <code class="text-nowrap" translate="no">true</code> if the record matches your criteria or <code class="text-nowrap" translate="no">false</code> if the record is to be filtered out.</p> <p>For proper reactive updates to the displayed data, when not filtering you should set the <code class="text-nowrap" translate="no">filter</code> prop to <code class="text-nowrap" translate="no">null</code> or an empty string (and not an empty object or array). The filter function will not be called when the <code class="text-nowrap" translate="no">filter</code> prop is a falsey value.</p> <p>The display of the <code class="text-nowrap" translate="no">empty-filter-text</code> relies on the truthiness of the <code class="text-nowrap" translate="no">filter</code> prop.</p> <h3 id="filter-events" class="bv-no-focus-ring"><span class="bd-content-title">Filter events<a class="anchorjs-link" href="#filter-events" aria-labelledby="filter-events"></a></span></h3> <p>When local filtering is applied, and the resultant number of items change, <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> will emit the <code class="text-nowrap" translate="no">filtered</code> event with a two arguments:</p> <ul> <li>an array reference which is the complete list of items passing the filter routine. <strong>Treat this argument as read-only.</strong></li> <li>the number of records that passed the filter test (the length of the first argument)</li> </ul> <p>Setting the prop <code class="text-nowrap" translate="no">filter</code> to null or an empty string will clear local items filtering.</p> <h3 id="debouncing-filter-criteria-changes" class="bv-no-focus-ring"><span class="bd-content-title">Debouncing filter criteria changes<a class="anchorjs-link" href="#debouncing-filter-criteria-changes" aria-labelledby="debouncing-filter-criteria-changes"></a></span></h3> <p><span class="badge badge-warning small">deprecated in v2.1.0</span> Use the <code class="text-nowrap" translate="no">debounce</code> feature of <a href="/docs/components/form-input#debounce-support" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code></a> instead.</p> <p>If you have a text input tied to the <code class="text-nowrap" translate="no">filter</code> prop of <code class="text-nowrap" translate="no">&lt;b-table&gt;</code>, the filtering process will occur for each character typed by the user. With large items datasets, this process can take a while and may cause the text input to appear sluggish.</p> <p>To help alleviate this type of situation, <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> accepts a debounce timeout value (in milliseconds) via the <code class="text-nowrap" translate="no">filter-debounce</code> prop. The default is <code class="text-nowrap" translate="no">0</code> (milliseconds). When a value greater than <code class="text-nowrap" translate="no">0</code> is provided, the filter will wait for that time before updating the table results. If the value of the <code class="text-nowrap" translate="no">filter</code> prop changes before this timeout expires, the filtering will be once again delayed until the debounce timeout expires.</p> <p>When used, the suggested value of <code class="text-nowrap" translate="no">filter-debounce</code> should be in the range of <code class="text-nowrap" translate="no">100</code> to <code class="text-nowrap" translate="no">200</code> milliseconds, but other values may be more suitable for your use case.</p> <p>The use of this prop can be beneficial when using provider filtering with <a href="#using-items-provider-functions" class="font-weight-bold">items provider functions</a>, to help reduce the number of calls to your back end API.</p> <h3 id="filtering-notes" class="bv-no-focus-ring"><span class="bd-content-title">Filtering notes<a class="anchorjs-link" href="#filtering-notes" aria-labelledby="filtering-notes"></a></span></h3> <p>See the <a href="#complete-example" class="font-weight-bold">Complete Example</a> below for an example of using the <code class="text-nowrap" translate="no">filter</code> feature.</p> <h2 id="pagination" class="bv-no-focus-ring"><span class="bd-content-title">Pagination<a class="anchorjs-link" href="#pagination" aria-labelledby="pagination"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-table&gt;</code> supports built in pagination of item data. You can control how many rows are displayed at a time by setting the <code class="text-nowrap" translate="no">per-page</code> prop to the maximum number of rows you would like displayed, and use the <code class="text-nowrap" translate="no">current-page</code> prop to specify which page to display (starting from page <code class="text-nowrap" translate="no">1</code>). If you set <code class="text-nowrap" translate="no">current-page</code> to a value larger than the computed number of pages, then no rows will be shown.</p> <p>You can use the <a href="/docs/components/pagination" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-pagination&gt;</code></a> component in conjunction with <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> for providing control over pagination.</p> <p>Setting <code class="text-nowrap" translate="no">per-page</code> to <code class="text-nowrap" translate="no">0</code> (default) will disable the local items pagination feature.</p> <h2 id="using-items-provider-functions" class="bv-no-focus-ring"><span class="bd-content-title">Using items provider functions<a class="anchorjs-link" href="#using-items-provider-functions" aria-labelledby="using-items-provider-functions"></a></span></h2> <p>As mentioned under the <a href="#items-record-data" class="font-weight-bold">Items</a> prop section, it is possible to use a function to provide the row data (items), by specifying a function reference via the <code class="text-nowrap" translate="no">items</code> prop.</p> <p>The provider function is called with the following signature:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no">provider(ctx, [callback])</pre></div><p>The <code class="text-nowrap" translate="no">ctx</code> is the context object associated with the table state, and contains the following properties:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">currentPage</code></td> <td>Number</td> <td>The current page number (starting from 1, the value of the <code class="text-nowrap" translate="no">current-page</code> prop)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">perPage</code></td> <td>Number</td> <td>The maximum number of rows per page to display (the value of the <code class="text-nowrap" translate="no">per-page</code> prop)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">filter</code></td> <td>String or RegExp or Object</td> <td>The value of the <code class="text-nowrap" translate="no">filter</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">sortBy</code></td> <td>String</td> <td>The current column key being sorted, or an empty string if not sorting</td> </tr> <tr> <td><code class="text-nowrap" translate="no">sortDesc</code></td> <td>Boolean</td> <td>The current sort direction (<code class="text-nowrap" translate="no">true</code> for descending, <code class="text-nowrap" translate="no">false</code> for ascending)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">apiUrl</code></td> <td>String</td> <td>The value provided to the <code class="text-nowrap" translate="no">api-url</code> prop. <code class="text-nowrap" translate="no">null</code> if none provided.</td> </tr> </tbody></table> </div><p>The second argument <code class="text-nowrap" translate="no">callback</code> is an optional parameter for when using the callback asynchronous method.</p> <p><strong>Example: returning an array of data (synchronous):</strong></p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myProvider</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">let</span> items = []\n\n  <span class="hljs-comment">// Perform any items processing needed</span>\n\n  <span class="hljs-comment">// Must return an array</span>\n  <span class="hljs-keyword">return</span> items || []\n}</pre></div><p><strong>Example: Using callback to return data (asynchronous):</strong></p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myProvider</span>(<span class="hljs-params">ctx, callback</span>) </span>{\n  <span class="hljs-keyword">const</span> params = <span class="hljs-string">&#x27;?page=&#x27;</span> + ctx.currentPage + <span class="hljs-string">&#x27;&amp;size=&#x27;</span> + ctx.perPage\n\n  <span class="hljs-built_in">this</span>.fetchData(<span class="hljs-string">&#x27;/some/url&#x27;</span> + params)\n    .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> {\n      <span class="hljs-comment">// Pluck the array of items off our axios response</span>\n      <span class="hljs-keyword">const</span> items = data.items\n      <span class="hljs-comment">// Provide the array of items to the callback</span>\n      callback(items)\n    })\n    .catch(<span class="hljs-function">() =&gt;</span> {\n      callback([])\n    })\n\n  <span class="hljs-comment">// Must return null or undefined to signal b-table that callback is being used</span>\n  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>\n}</pre></div><p><strong>Example: Using a Promise to return data (asynchronous):</strong></p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myProvider</span>(<span class="hljs-params">ctx</span>) </span>{\n  <span class="hljs-keyword">const</span> promise = axios.get(<span class="hljs-string">&#x27;/some/url?page=&#x27;</span> + ctx.currentPage + <span class="hljs-string">&#x27;&amp;size=&#x27;</span> + ctx.perPage)\n\n  <span class="hljs-comment">// Must return a promise that resolves to an array of items</span>\n  <span class="hljs-keyword">return</span> promise.then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> {\n    <span class="hljs-comment">// Pluck the array of items off our axios response</span>\n    <span class="hljs-keyword">const</span> items = data.items\n    <span class="hljs-comment">// Must return an array of items or an empty array if an error occurred</span>\n    <span class="hljs-keyword">return</span> items || []\n  })\n}</pre></div><p><strong>Example: Using an async function (semi-synchronous):</strong></p> <p>Using an async method to return an items array is possible:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myProvider</span>(<span class="hljs-params">ctx</span>) </span>{\n  <span class="hljs-keyword">try</span> {\n    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">`/some/url?page=<span class="hljs-subst">${ctx.currentPage}</span>&amp;size=<span class="hljs-subst">${ctx.perPage}</span>`</span>)\n    <span class="hljs-keyword">return</span> response.items\n  } <span class="hljs-keyword">catch</span> (error) {\n    <span class="hljs-keyword">return</span> []\n  }\n}</pre></div><p>Note that not all browsers support <code class="text-nowrap" translate="no">async/await</code> natively. For browsers that do not support <code class="text-nowrap" translate="no">async</code> methods, you will need to transpile your code.</p> <h3 id="automated-table-busy-state" class="bv-no-focus-ring"><span class="bd-content-title">Automated table busy state<a class="anchorjs-link" href="#automated-table-busy-state" aria-labelledby="automated-table-busy-state"></a></span></h3> <p><code class="text-nowrap" translate="no">&lt;b-table&gt;</code> automatically tracks/controls its <code class="text-nowrap" translate="no">busy</code> state when items provider functions are used, however it also provides a <code class="text-nowrap" translate="no">busy</code> prop that can be used either to override the inner <code class="text-nowrap" translate="no">busy</code> state, or to monitor <code class="text-nowrap" translate="no">&lt;b-pagination&gt;</code>&#39;s current busy state in your application using the 2-way <code class="text-nowrap" translate="no">.sync</code> modifier.</p> <p><strong>Note:</strong> in order to allow <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> fully track its <code class="text-nowrap" translate="no">busy</code> state, the custom items provider function should handle errors from data sources and return an empty array to <code class="text-nowrap" translate="no">&lt;b-table&gt;</code>.</p> <p><strong>Example: usage of busy state</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-table&quot;</span>\n      <span class="hljs-attr">:busy.sync</span>=<span class="hljs-string">&quot;isBusy&quot;</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;myProvider&quot;</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>\n      <span class="hljs-attr">...</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data () {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">isBusy</span>: <span class="hljs-literal">false</span>\n      }\n    }\n    <span class="hljs-attr">methods</span>: {\n      myProvider () {\n        <span class="hljs-comment">// Here we don&#x27;t set isBusy prop, so busy state will be</span>\n        <span class="hljs-comment">// handled by table itself</span>\n        <span class="hljs-comment">// this.isBusy = true</span>\n        <span class="hljs-keyword">let</span> promise = axios.get(<span class="hljs-string">&#x27;/some/url&#x27;</span>)\n\n        <span class="hljs-keyword">return</span> promise.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n          <span class="hljs-keyword">const</span> items = data.items\n          <span class="hljs-comment">// Here we could override the busy state, setting isBusy to false</span>\n          <span class="hljs-comment">// this.isBusy = false</span>\n          <span class="hljs-keyword">return</span>(items)\n        }).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> {\n          <span class="hljs-comment">// Here we could override the busy state, setting isBusy to false</span>\n          <span class="hljs-comment">// this.isBusy = false</span>\n          <span class="hljs-comment">// Returning an empty array, allows table to correctly handle</span>\n          <span class="hljs-comment">// internal busy state in case of error</span>\n          <span class="hljs-keyword">return</span> []\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><p>If using an <code class="text-nowrap" translate="no">async/await</code> provider:</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myProvider</span>(<span class="hljs-params">ctx</span>) </span>{\n  <span class="hljs-built_in">this</span>.isBusy = <span class="hljs-literal">true</span>\n  <span class="hljs-keyword">try</span> {\n    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">`/some/url?page=<span class="hljs-subst">${ctx.currentPage}</span>&amp;size=<span class="hljs-subst">${ctx.perPage}</span>`</span>)\n    <span class="hljs-built_in">this</span>.isBusy = <span class="hljs-literal">false</span>\n    <span class="hljs-keyword">return</span> response.items\n  } <span class="hljs-keyword">catch</span> (error) {\n    <span class="hljs-built_in">this</span>.isBusy = <span class="hljs-literal">false</span>\n    <span class="hljs-keyword">return</span> []\n  }\n}</pre></div><p><strong>Notes:</strong></p> <ul> <li>If you manually place the table in the <code class="text-nowrap" translate="no">busy</code> state, the items provider will <strong>not</strong> be called/refreshed until the <code class="text-nowrap" translate="no">busy</code> state has been set to <code class="text-nowrap" translate="no">false</code>.</li> <li>All click related and hover events, and sort-changed events will <strong>not</strong> be emitted when in the <code class="text-nowrap" translate="no">busy</code> state (either set automatically during provider update, or when manually set).</li> </ul> <h3 id="provider-paging-filtering-and-sorting" class="bv-no-focus-ring"><span class="bd-content-title">Provider paging, filtering, and sorting<a class="anchorjs-link" href="#provider-paging-filtering-and-sorting" aria-labelledby="provider-paging-filtering-and-sorting"></a></span></h3> <p>By default, the items provider function is responsible for <strong>all paging, filtering, and sorting</strong> of the data, before passing it to <code class="text-nowrap" translate="no">b-table</code> for display.</p> <p>You can disable provider paging, filtering, and sorting (individually) by setting the following <code class="text-nowrap" translate="no">b-table</code> prop(s) to <code class="text-nowrap" translate="no">true</code>:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Prop</th> <th>Type</th> <th>Default</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">no-provider-paging</code></td> <td>Boolean</td> <td><code class="text-nowrap" translate="no">false</code></td> <td>When <code class="text-nowrap" translate="no">true</code> enables the use of <code class="text-nowrap" translate="no">b-table</code> local data pagination</td> </tr> <tr> <td><code class="text-nowrap" translate="no">no-provider-sorting</code></td> <td>Boolean</td> <td><code class="text-nowrap" translate="no">false</code></td> <td>When <code class="text-nowrap" translate="no">true</code> enables the use of <code class="text-nowrap" translate="no">b-table</code> local sorting</td> </tr> <tr> <td><code class="text-nowrap" translate="no">no-provider-filtering</code></td> <td>Boolean</td> <td><code class="text-nowrap" translate="no">false</code></td> <td>When <code class="text-nowrap" translate="no">true</code> enables the use of <code class="text-nowrap" translate="no">b-table</code> local filtering</td> </tr> </tbody></table> </div><p>When <code class="text-nowrap" translate="no">no-provider-paging</code> is <code class="text-nowrap" translate="no">false</code> (default), you should only return at maximum, <code class="text-nowrap" translate="no">perPage</code> number of records.</p> <p><strong>Notes:</strong></p> <ul> <li><code class="text-nowrap" translate="no">&lt;b-table&gt;</code> needs reference to your pagination and filtering values in order to trigger the calling of the provider function. So be sure to bind to the <code class="text-nowrap" translate="no">per-page</code>, <code class="text-nowrap" translate="no">current-page</code> and <code class="text-nowrap" translate="no">filter</code> props on <code class="text-nowrap" translate="no">b-table</code> to trigger the provider update function call (unless you have the respective <code class="text-nowrap" translate="no">no-provider-*</code> prop set to <code class="text-nowrap" translate="no">true</code>).</li> <li>The <code class="text-nowrap" translate="no">no-local-sorting</code> prop has no effect when <code class="text-nowrap" translate="no">items</code> is a provider function.</li> <li>When using provider filtering, you may find that setting the <a href="/docs/components/form-input#debounce-support" class="font-weight-bold"><code class="text-nowrap" translate="no">debounce</code> prop on <code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code></a> to a value greater than <code class="text-nowrap" translate="no">100</code> ms will help minimize the number of calls to your back end API as the user types in the criteria.</li> </ul> <h3 id="force-refreshing-of-table-data" class="bv-no-focus-ring"><span class="bd-content-title">Force refreshing of table data<a class="anchorjs-link" href="#force-refreshing-of-table-data" aria-labelledby="force-refreshing-of-table-data"></a></span></h3> <p>You may also trigger the refresh of the provider function by emitting the event <code class="text-nowrap" translate="no">refresh::table</code> on <code class="text-nowrap" translate="no">$root</code> with the single argument being the <code class="text-nowrap" translate="no">id</code> of your <code class="text-nowrap" translate="no">b-table</code>. You must have a unique ID on your table for this to work.</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::refresh::table&#x27;</span>, <span class="hljs-string">&#x27;my-table&#x27;</span>)</pre></div><p>Or by calling the <code class="text-nowrap" translate="no">refresh()</code> method on the table reference</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-attr">...</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-built_in">this</span>.$refs.table.refresh()</pre></div><p><strong>Note:</strong> If the table is in the <code class="text-nowrap" translate="no">busy</code> state (i.e. a provider update is currently running), the refresh will wait until the current update is completed. If there is currently a refresh pending and a new refresh is requested, then only one refresh will occur.</p> <h3 id="detection-of-sorting-change" class="bv-no-focus-ring"><span class="bd-content-title">Detection of sorting change<a class="anchorjs-link" href="#detection-of-sorting-change" aria-labelledby="detection-of-sorting-change"></a></span></h3> <p>By listening on <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> <code class="text-nowrap" translate="no">sort-changed</code> event, you can detect when the sorting key and direction have changed.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> @<span class="hljs-attr">sort-changed</span>=<span class="hljs-string">&quot;sortingChanged&quot;</span> <span class="hljs-attr">...</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><p>The <code class="text-nowrap" translate="no">sort-changed</code> event provides a single argument of the table&#39;s current state context object. This context object has the same format as used by items provider functions.</p> <div class="bd-code"><pre class="hljs js p-2" translate="no"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">sortingChanged</span>(<span class="hljs-params">ctx</span>)</span> {\n      <span class="hljs-comment">// ctx.sortBy   ==&gt; Field key for sorting by (or null for no sorting)</span>\n      <span class="hljs-comment">// ctx.sortDesc ==&gt; true if sorting descending, false otherwise</span>\n    }\n  }\n}</pre></div><p>You can also obtain the current sortBy and sortDesc values by using the <code class="text-nowrap" translate="no">:sort-by.sync</code> and <code class="text-nowrap" translate="no">:sort-desc.sync</code> two-way props respectively (see section <a href="#sorting" class="font-weight-bold">Sorting</a> above for details).</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:sort-by.sync</span>=<span class="hljs-string">&quot;mySortBy&quot;</span> <span class="hljs-attr">:sort-desc.sync</span>=<span class="hljs-string">&quot;mySortDesc&quot;</span> <span class="hljs-attr">...</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><h3 id="server-side-rendering" class="bv-no-focus-ring"><span class="bd-content-title">Server side rendering<a class="anchorjs-link" href="#server-side-rendering" aria-labelledby="server-side-rendering"></a></span></h3> <p>Special care must be taken when using server side rendering (SSR) and an <code class="text-nowrap" translate="no">items</code> provider function. Make sure you handle any special situations that may be needed server side when fetching your data!</p> <p>When <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> is mounted in the document, it will automatically trigger a provider update call.</p> <h2 id="light-weight-tables" class="bv-no-focus-ring"><span class="bd-content-title">Light-weight tables<a class="anchorjs-link" href="#light-weight-tables" aria-labelledby="light-weight-tables"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code> provides a great alternative to <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> if you just need simple display of tabular data. The <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code> component provides all of the styling and formatting features of <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> (including row details and stacked support), while <strong>excluding</strong> the following features:</p> <ul> <li>Filtering</li> <li>Sorting</li> <li>Pagination</li> <li>Items provider support</li> <li>Selectable rows</li> <li>Busy table state and styling</li> <li>Fixed top and bottom rows</li> <li>Empty row support</li> </ul> <h3 id="table-lite-as-a-plugin" class="bv-no-focus-ring"><span class="bd-content-title">Table lite as a plugin<a class="anchorjs-link" href="#table-lite-as-a-plugin" aria-labelledby="table-lite-as-a-plugin"></a></span></h3> <p>The <code class="text-nowrap" translate="no">TablePlugin</code> includes <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code>. For convenience, BootstrapVue also provides a <code class="text-nowrap" translate="no">TableLitePlugin</code> which installs only <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code>. <code class="text-nowrap" translate="no">TableLitePlugin</code> is available as a top level named export.</p> <h2 id="simple-tables" class="bv-no-focus-ring"><span class="bd-content-title">Simple tables<a class="anchorjs-link" href="#simple-tables" aria-labelledby="simple-tables"></a></span></h2> <p>The <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> component gives the user complete control over the rendering of the table content, while providing basic Bootstrap v4 table styling. <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> is a wrapper component around the <code class="text-nowrap" translate="no">&lt;table&gt;</code> element. Inside the component, via the <code class="text-nowrap" translate="no">default</code> slot, you can use any or all of the BootstrapVue <a href="#table-helper-components" class="font-weight-bold">table helper components</a>: <code class="text-nowrap" translate="no">&lt;b-thead&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-tfoot&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-tbody&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-tr&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-th&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-td&gt;</code>, and the HTML5 elements <code class="text-nowrap" translate="no">&lt;caption&gt;</code>, <code class="text-nowrap" translate="no">&lt;colgroup&gt;</code> and <code class="text-nowrap" translate="no">&lt;col&gt;</code>. Contrary to the component&#39;s name, one can create simple or complex table layouts with <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code>.</p> <p><code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> provides basic styling options via props: <code class="text-nowrap" translate="no">striped</code>, <code class="text-nowrap" translate="no">bordered</code>, <code class="text-nowrap" translate="no">borderless</code>, <code class="text-nowrap" translate="no">outlined</code>, <code class="text-nowrap" translate="no">small</code>, <code class="text-nowrap" translate="no">hover</code>, <code class="text-nowrap" translate="no">dark</code>, <code class="text-nowrap" translate="no">fixed</code>, <code class="text-nowrap" translate="no">responsive</code> and <code class="text-nowrap" translate="no">sticky-header</code>. Note that <code class="text-nowrap" translate="no">stacked</code> mode is available but requires some additional markup to generate the cell headings, as described in the <a href="#simple-tables-and-stacked-mode" class="font-weight-bold">Simple tables and stacked mode</a> section below. Sticky columns are also supported, but also require a bit of additional markup to specify which columns are to be sticky. See below for more information on using <a href="#simple-tables-and-sticky-columns" class="font-weight-bold">sticky columns</a>.</p> <p>Since <code class="text-nowrap" translate="no">b-table-simple</code> is just a wrapper component, of which you will need to render content inside, it does not provide any of the advanced features of <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> (i.e. row events, head events, sorting, pagination, filtering, foot-clone, items, fields, etc.).</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table-simple</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">small</span> <span class="hljs-attr">caption-top</span> <span class="hljs-attr">responsive</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>Items sold in August, grouped by Country and City:<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-thead</span> <span class="hljs-attr">head-variant</span>=<span class="hljs-string">&quot;dark&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Region<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>Clothes<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Accessories<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Country<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>City<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Trousers<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Skirts<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Dresses<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Bracelets<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Rings<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-thead</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tbody</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>Belgium<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>Antwerp<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>56<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>43<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>72<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>Gent<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>46<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>50<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>Brussels<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>51<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>27<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>28<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>The Netherlands<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>Amsterdam<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>89<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>34<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>85<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>Utrecht<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>43<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>36<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>19<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tbody</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tfoot</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;secondary&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>\n          Total Rows: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tfoot</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-table-simple</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-simple.vue --&gt;</span></pre></div><p>When in <code class="text-nowrap" translate="no">responsive</code> or <code class="text-nowrap" translate="no">sticky-header</code> mode, the <code class="text-nowrap" translate="no">&lt;table&gt;</code> element is wrapped inside a <code class="text-nowrap" translate="no">&lt;div&gt;</code> element. If you need to apply additional classes to the <code class="text-nowrap" translate="no">&lt;table&gt;</code> element, use the <code class="text-nowrap" translate="no">table-classes</code> prop.</p> <p>Any additional attributes given to <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> will always be applied to the <code class="text-nowrap" translate="no">&lt;table&gt;</code> element.</p> <h3 id="simple-tables-and-stacked-mode" class="bv-no-focus-ring"><span class="bd-content-title">Simple tables and stacked mode<a class="anchorjs-link" href="#simple-tables-and-stacked-mode" aria-labelledby="simple-tables-and-stacked-mode"></a></span></h3> <p>A bit of additional markup is required on your <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> body cells when the table is in stacked mode. Specifically, BootstrapVue uses a special data attribute to create the cell&#39;s heading, of which you can supply to <code class="text-nowrap" translate="no">&lt;b-td&gt;</code> or <code class="text-nowrap" translate="no">&lt;b-th&gt;</code> via the <code class="text-nowrap" translate="no">stacked-heading</code> prop. Only plain strings are supported (not HTML markup), as we use the pseudo element <code class="text-nowrap" translate="no">::before</code> and css <code class="text-nowrap" translate="no">content</code> property.</p> <p>Here is the same table as above, set to be always stacked, which has the extra markup to handle stacked mode (specifically for generating the cell headings):</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table-simple</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">small</span> <span class="hljs-attr">caption-top</span> <span class="hljs-attr">stacked</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>Items sold in August, grouped by Country and City:<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-thead</span> <span class="hljs-attr">head-variant</span>=<span class="hljs-string">&quot;dark&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Region<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>Clothes<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Accessories<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Country<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>City<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Trousers<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Skirts<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Dresses<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Bracelets<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Rings<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-thead</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tbody</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>Belgium (3 Cities)<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;City&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-left&quot;</span>&gt;</span>Antwerp<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Trousers&quot;</span>&gt;</span>56<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Skirts&quot;</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Dresses&quot;</span>&gt;</span>43<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Accessories: Bracelets&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>72<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Accessories: Rings&quot;</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;City&quot;</span>&gt;</span>Gent<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Trousers&quot;</span>&gt;</span>46<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Skirts&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Dresses&quot;</span>&gt;</span>50<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Accessories: Bracelets&quot;</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Accessories: Rings&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;City&quot;</span>&gt;</span>Brussels<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Trousers&quot;</span>&gt;</span>51<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Skirts&quot;</span>&gt;</span>27<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Dresses&quot;</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Accessories: Bracelets&quot;</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Accessories: Rings&quot;</span>&gt;</span>28<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>The Netherlands (2 Cities)<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;City&quot;</span>&gt;</span>Amsterdam<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Trousers&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>89<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Skirts&quot;</span>&gt;</span>34<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Dresses&quot;</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Accessories: Bracelets&quot;</span>&gt;</span>85<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Accessories: Rings&quot;</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;City&quot;</span>&gt;</span>Utrecht<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Trousers&quot;</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Skirts&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Clothes: Dresses&quot;</span>&gt;</span>43<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Accessories: Bracelets&quot;</span>&gt;</span>36<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">&quot;Accessories: Rings&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>19<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tbody</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tfoot</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;secondary&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>\n          Total Rows: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tfoot</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-table-simple</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-simple-stacked.vue --&gt;</span></pre></div><p>Like <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code>, table headers (<code class="text-nowrap" translate="no">&lt;thead&gt;</code>) and footers (<code class="text-nowrap" translate="no">&lt;tfoot&gt;</code>) are visually hidden when the table is visually stacked. If you need a header or footer, you can do so by creating an extra <code class="text-nowrap" translate="no">&lt;b-tr&gt;</code> inside of the <code class="text-nowrap" translate="no">&lt;b-tbody&gt;</code> component (or in a second <code class="text-nowrap" translate="no">&lt;b-tbody&gt;</code> component), and set a role of <code class="text-nowrap" translate="no">columnheader</code> on the child <code class="text-nowrap" translate="no">&lt;b-th&gt;</code> cells, and use Bootstrap v4 <a href="/docs/reference/utility-classes" class="font-weight-bold">responsive display utility classes</a> to hide the extra row (or <code class="text-nowrap" translate="no">&lt;b-tbody&gt;</code>) above a certain breakpoint when the table is no longer visually stacked (the breakpoint should match the stacked table breakpoint you have set), i.e. <code class="text-nowrap" translate="no">&lt;b-tr class=&quot;d-md-none&quot;&gt;</code> would hide the row on medium and wider screens, while <code class="text-nowrap" translate="no">&lt;b-tbody class=&quot;d-md-none&quot;&gt;</code> would hide the row group on medium and wider screens.</p> <p><strong>Note:</strong> stacked mode with <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> requires that you use the BootstrapVue <a href="#table-helper-components" class="font-weight-bold">table helper components</a>. Use of the regular <code class="text-nowrap" translate="no">&lt;tbody&gt;</code>, <code class="text-nowrap" translate="no">&lt;tr&gt;</code>, <code class="text-nowrap" translate="no">&lt;td&gt;</code> and <code class="text-nowrap" translate="no">&lt;th&gt;</code> element tags will not work as expected, nor will they automatically apply any of the required accessibility attributes.</p> <h3 id="simple-tables-and-sticky-columns" class="bv-no-focus-ring"><span class="bd-content-title">Simple tables and sticky columns<a class="anchorjs-link" href="#simple-tables-and-sticky-columns" aria-labelledby="simple-tables-and-sticky-columns"></a></span></h3> <p>Sticky columns are supported with <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code>, but you will need to set the <code class="text-nowrap" translate="no">sticky-column</code> prop on each table cell (in the <code class="text-nowrap" translate="no">thead</code>, <code class="text-nowrap" translate="no">tbody</code>, and <code class="text-nowrap" translate="no">tfoot</code> row groups) in the column that is to be sticky. For example:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-table-simple</span> <span class="hljs-attr">responsive</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-thead</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">sticky-column</span>&gt;</span>Sticky Column Header<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 1<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 2<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 4<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-thead</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tbody</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">sticky-column</span>&gt;</span>Sticky Column Row Header<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">sticky-column</span>&gt;</span>Sticky Column Row Header<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-tbody</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tfoot</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">sticky-column</span>&gt;</span>Sticky Column Footer<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 1<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 2<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 4<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-tfoot</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-table-responsive</span>&gt;</span></pre></div><p>As with <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code>, sticky columns are not supported when the <code class="text-nowrap" translate="no">stacked</code> prop is set on <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code>.</p> <h3 id="table-simple-as-a-plugin" class="bv-no-focus-ring"><span class="bd-content-title">Table simple as a plugin<a class="anchorjs-link" href="#table-simple-as-a-plugin" aria-labelledby="table-simple-as-a-plugin"></a></span></h3> <p>The <code class="text-nowrap" translate="no">TablePlugin</code> includes <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> and all of the helper components. For convenience, BootstrapVue also provides a <code class="text-nowrap" translate="no">TableSimplePlugin</code> which installs <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> and all of the helper components. <code class="text-nowrap" translate="no">TableSimplePlugin</code> is available as a top level named export.</p> <h2 id="table-helper-components" class="bv-no-focus-ring"><span class="bd-content-title">Table helper components<a class="anchorjs-link" href="#table-helper-components" aria-labelledby="table-helper-components"></a></span></h2> <p>BootstrapVue provides additional helper child components when using <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code>, or the named slots <code class="text-nowrap" translate="no">top-row</code>, <code class="text-nowrap" translate="no">bottom-row</code>, <code class="text-nowrap" translate="no">thead-top</code>, and <code class="text-nowrap" translate="no">custom-foot</code> (all of which accept table child elements). The helper components are as follows:</p> <ul> <li><code class="text-nowrap" translate="no">b-tbody</code> (<code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> only)</li> <li><code class="text-nowrap" translate="no">b-thead</code> (<code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> only)</li> <li><code class="text-nowrap" translate="no">b-tfoot</code> (<code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> only)</li> <li><code class="text-nowrap" translate="no">b-tr</code></li> <li><code class="text-nowrap" translate="no">b-td</code></li> <li><code class="text-nowrap" translate="no">b-th</code></li> </ul> <p>These components are optimized to handle converting variants to the appropriate classes (such as handling table <code class="text-nowrap" translate="no">dark</code> mode), and automatically applying certain accessibility attributes (i.e. <code class="text-nowrap" translate="no">role</code>s and <code class="text-nowrap" translate="no">scope</code>s). They also can generate the stacked table, and sticky header and column, markup. Components <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code> use these helper components internally.</p> <p>In the <a href="#simple-tables" class="font-weight-bold">Simple tables</a> example, we are using the helper components <code class="text-nowrap" translate="no">&lt;b-thead&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-tbody&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-tr&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-th&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-td&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-tfoot&gt;</code>. While you can use regular table child elements (i.e. <code class="text-nowrap" translate="no">&lt;tbody&gt;</code>, <code class="text-nowrap" translate="no">&lt;tr&gt;</code>, <code class="text-nowrap" translate="no">&lt;td&gt;</code>, etc.) within <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code>, and the named slots <code class="text-nowrap" translate="no">top-row</code>, <code class="text-nowrap" translate="no">bottom-row</code>, and <code class="text-nowrap" translate="no">thead-top</code>, it is recommended to use these BootstrapVue table <code class="text-nowrap" translate="no">&lt;b-t*&gt;</code> helper components. Note that there are no helper components for <code class="text-nowrap" translate="no">&lt;caption&gt;</code>, <code class="text-nowrap" translate="no">&lt;colgroup&gt;</code> or <code class="text-nowrap" translate="no">&lt;col&gt;</code>, so you may use these three HTML5 elements directly in <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code>.</p> <ul> <li>Table helper components <code class="text-nowrap" translate="no">&lt;b-tr&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-td&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-th&gt;</code> all accept a <code class="text-nowrap" translate="no">variant</code> prop, which will apply one of the Bootstrap theme colors (custom theme colors are supported via <a href="/docs/reference/theming" class="font-weight-bold">theming</a>.) and will automatically adjust to use the correct variant class based on the table&#39;s <code class="text-nowrap" translate="no">dark</code> mode.</li> <li>The helper components <code class="text-nowrap" translate="no">&lt;b-thead&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-tfoot&gt;</code> accept a <code class="text-nowrap" translate="no">head-variant</code> and <code class="text-nowrap" translate="no">foot-variant</code> prop respectively. Supported values are <code class="text-nowrap" translate="no">&#39;dark&#39;</code>, <code class="text-nowrap" translate="no">&#39;light&#39;</code> or <code class="text-nowrap" translate="no">null</code> (<code class="text-nowrap" translate="no">null</code> uses the default table background). These variants also control the text color (light text for <code class="text-nowrap" translate="no">&#39;dark&#39;</code> variant, and dark text for the <code class="text-nowrap" translate="no">&#39;light&#39;</code> variant).</li> <li>Accessibility attributes <code class="text-nowrap" translate="no">role</code> and <code class="text-nowrap" translate="no">scope</code> are automatically set on <code class="text-nowrap" translate="no">&lt;b-th&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-td&gt;</code> components based on their location (thead, tbody, or tfoot) and their <code class="text-nowrap" translate="no">rowspan</code> or <code class="text-nowrap" translate="no">colspan</code> props. You can override the automatic <code class="text-nowrap" translate="no">scope</code> and <code class="text-nowrap" translate="no">role</code> values by setting the appropriate attribute on the helper component.</li> <li>For <code class="text-nowrap" translate="no">&lt;b-tbody&gt;</code>, <code class="text-nowrap" translate="no">&lt;b-thead&gt;</code>, and <code class="text-nowrap" translate="no">&lt;b-tfoot&gt;</code> helper components, the appropriate default <code class="text-nowrap" translate="no">role</code> of <code class="text-nowrap" translate="no">&#39;rowgroup&#39;</code> will be applied, unless you override the role by supplying a <code class="text-nowrap" translate="no">role</code> attribute.</li> <li>For the <code class="text-nowrap" translate="no">&lt;b-tr&gt;</code> helper component, the appropriate default <code class="text-nowrap" translate="no">role</code> of <code class="text-nowrap" translate="no">&#39;row&#39;</code> will be applied, unless you override the role by supplying a <code class="text-nowrap" translate="no">role</code> attribute. <code class="text-nowrap" translate="no">&lt;b-tr&gt;</code> does not add a <code class="text-nowrap" translate="no">scope</code>.</li> <li>The <code class="text-nowrap" translate="no">&lt;b-tbody&gt;</code> element supports rendering a Vue <code class="text-nowrap" translate="no">&lt;transition-group&gt;</code> when either, or both, of the <code class="text-nowrap" translate="no">tbody-transition-props</code> and <code class="text-nowrap" translate="no">tbody-transition-handlers</code> props are used. See the <a href="#table-body-transition-support" class="font-weight-bold">Table body transition support</a> section for more details.</li> </ul> <h2 id="accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-labelledby="accessibility"></a></span></h2> <p>The <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code> components, when using specific features, will attempt to provide the best accessibility markup possible.</p> <p>When using <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> with the helper table components, elements will have the appropriate roles applied by default, of which you can optionally override. When using click handlers on the <code class="text-nowrap" translate="no">&lt;b-table-simple&gt;</code> helper components, you will need to apply appropriate <code class="text-nowrap" translate="no">aria-*</code> attributes, and set <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code> to make the click actions accessible to screen reader and keyboard-only users. You should also listen for <code class="text-nowrap" translate="no">@keydown.enter.prevent</code> to handle users pressing <kbd class="notranslate" translate="no">Enter</kbd> to trigger your click on cells or rows (required for accessibility for keyboard-only users).</p> <h3 id="heading-accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Heading accessibility<a class="anchorjs-link" href="#heading-accessibility" aria-labelledby="heading-accessibility"></a></span></h3> <p>When a column (field) is sortable (<code class="text-nowrap" translate="no">&lt;b-table&gt;</code> only) or there is a <code class="text-nowrap" translate="no">head-clicked</code> listener registered (<code class="text-nowrap" translate="no">&lt;b-table&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code>), the header (and footer) <code class="text-nowrap" translate="no">&lt;th&gt;</code> cells will be placed into the document tab sequence (via <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code>) for accessibility by keyboard-only and screen reader users, so that the user may trigger a click (by pressing <kbd class="notranslate" translate="no">Enter</kbd> on the header cells.</p> <h3 id="data-row-accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Data row accessibility<a class="anchorjs-link" href="#data-row-accessibility" aria-labelledby="data-row-accessibility"></a></span></h3> <p>When the table is in <code class="text-nowrap" translate="no">selectable</code> mode (<code class="text-nowrap" translate="no">&lt;b-table&gt;</code> only, and prop <code class="text-nowrap" translate="no">no-select-on-click</code> is not set), or if there is a <code class="text-nowrap" translate="no">row-clicked</code> event listener registered (<code class="text-nowrap" translate="no">&lt;b-table&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code>), all data item rows (<code class="text-nowrap" translate="no">&lt;tr&gt;</code> elements) will be placed into the document tab sequence (via <code class="text-nowrap" translate="no">tabindex=&quot;0&quot;</code>) to allow keyboard-only and screen reader users the ability to click the rows by pressing <kbd class="notranslate" translate="no">Enter</kbd> or <kbd class="notranslate" translate="no">Space</kbd>.</p> <p>When the table items rows are placed in the document tab sequence (<code class="text-nowrap" translate="no">&lt;b-table&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code>), they will also support basic keyboard navigation when focused:</p> <ul> <li><kbd class="notranslate" translate="no">Down</kbd> will move to the next row</li> <li><kbd class="notranslate" translate="no">Up</kbd> will move to the previous row</li> <li><kbd class="notranslate" translate="no">End</kbd> or <kbd class="notranslate" translate="no">Down</kbd>+<kbd class="notranslate" translate="no">Shift</kbd> will move to the last row</li> <li><kbd class="notranslate" translate="no">Home</kbd> or <kbd class="notranslate" translate="no">Up</kbd>+<kbd class="notranslate" translate="no">Shift</kbd> will move to the first row</li> <li><kbd class="notranslate" translate="no">Enter</kbd> or <kbd class="notranslate" translate="no">Space</kbd> to click the row.</li> </ul> <h3 id="row-event-accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Row event accessibility<a class="anchorjs-link" href="#row-event-accessibility" aria-labelledby="row-event-accessibility"></a></span></h3> <p>Note the following row based events/actions (available with <code class="text-nowrap" translate="no">&lt;b-table&gt;</code> and <code class="text-nowrap" translate="no">&lt;b-table-lite&gt;</code>) are not considered accessible, and should only be used if the functionality is non critical or can be provided via other means:</p> <ul> <li><code class="text-nowrap" translate="no">row-dblclicked</code></li> <li><code class="text-nowrap" translate="no">row-contextmenu</code></li> <li><code class="text-nowrap" translate="no">row-hovered</code></li> <li><code class="text-nowrap" translate="no">row-unhovered</code></li> <li><code class="text-nowrap" translate="no">row-middle-clicked</code></li> </ul> <p>Note that the <code class="text-nowrap" translate="no">row-middle-clicked</code> event is not supported in all browsers (i.e. IE, Safari and most mobile browsers). When listening for <code class="text-nowrap" translate="no">row-middle-clicked</code> events originating on elements that do not support input or navigation, you will often want to explicitly prevent other default actions mapped to the down action of the middle mouse button. On Windows this is usually autoscroll, and on macOS and Linux this is usually clipboard paste. This can be done by preventing the default behaviour of the <code class="text-nowrap" translate="no">mousedown</code> or <code class="text-nowrap" translate="no">pointerdown</code> event.</p> <p>Additionally, you may need to avoid opening a default system or browser context menu after a right click. Due to timing differences between operating systems, this too is not a preventable default behaviour of <code class="text-nowrap" translate="no">row-middle-clicked</code>. Instead, this can be done by preventing the default behaviour of the <code class="text-nowrap" translate="no">row-contextmenu</code> event.</p> <p>It is recommended you test your app in as many browser and device variants as possible to ensure your app handles the various inconsistencies with events.</p> <h2 id="complete-example" class="bv-no-focus-ring"><span class="bd-content-title">Complete example<a class="anchorjs-link" href="#complete-example" aria-labelledby="complete-example"></a></span></h2> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- User Interface controls --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Sort&quot;</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;sort-by-select&quot;</span>\n          <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;3&quot;</span>\n          <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">&quot;right&quot;</span>\n          <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n          <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sort-by-select&quot;</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sortBy&quot;</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;sortOptions&quot;</span>\n              <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-75&quot;</span>\n            &gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">first</span>&gt;</span>\n                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>-- none --<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n              <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sortDesc&quot;</span>\n              <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;!sortBy&quot;</span>\n              <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n              <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-25&quot;</span>\n            &gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>Asc<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>Desc<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Initial sort&quot;</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;initial-sort-select&quot;</span>\n          <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;3&quot;</span>\n          <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">&quot;right&quot;</span>\n          <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;initial-sort-select&quot;</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sortDirection&quot;</span>\n            <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;[&#x27;asc&#x27;, &#x27;desc&#x27;, &#x27;last&#x27;]&quot;</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Filter&quot;</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;filter-input&quot;</span>\n          <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;3&quot;</span>\n          <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">&quot;right&quot;</span>\n          <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n              <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;filter-input&quot;</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;filter&quot;</span>\n              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span>\n              <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Type to Search&quot;</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;!filter&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;filter = &#x27;&#x27;&quot;</span>&gt;</span>Clear<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sortDirection&quot;</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Filter On&quot;</span>\n          <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Leave all unchecked to filter on all data&quot;</span>\n          <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;3&quot;</span>\n          <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">&quot;right&quot;</span>\n          <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n          <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ ariaDescribedby }&quot;</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;filterOn&quot;</span>\n            <span class="hljs-attr">:aria-describedby</span>=<span class="hljs-string">&quot;ariaDescribedby&quot;</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-1&quot;</span>\n          &gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;isActive&quot;</span>&gt;</span>Active<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Per page&quot;</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;per-page-select&quot;</span>\n          <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;6&quot;</span>\n          <span class="hljs-attr">label-cols-md</span>=<span class="hljs-string">&quot;4&quot;</span>\n          <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">&quot;3&quot;</span>\n          <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">&quot;right&quot;</span>\n          <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;per-page-select&quot;</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;perPage&quot;</span>\n            <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;pageOptions&quot;</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-pagination</span>\n          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;currentPage&quot;</span>\n          <span class="hljs-attr">:total-rows</span>=<span class="hljs-string">&quot;totalRows&quot;</span>\n          <span class="hljs-attr">:per-page</span>=<span class="hljs-string">&quot;perPage&quot;</span>\n          <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;fill&quot;</span>\n          <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-0&quot;</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-pagination</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Main table element --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;items&quot;</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;fields&quot;</span>\n      <span class="hljs-attr">:current-page</span>=<span class="hljs-string">&quot;currentPage&quot;</span>\n      <span class="hljs-attr">:per-page</span>=<span class="hljs-string">&quot;perPage&quot;</span>\n      <span class="hljs-attr">:filter</span>=<span class="hljs-string">&quot;filter&quot;</span>\n      <span class="hljs-attr">:filter-included-fields</span>=<span class="hljs-string">&quot;filterOn&quot;</span>\n      <span class="hljs-attr">:sort-by.sync</span>=<span class="hljs-string">&quot;sortBy&quot;</span>\n      <span class="hljs-attr">:sort-desc.sync</span>=<span class="hljs-string">&quot;sortDesc&quot;</span>\n      <span class="hljs-attr">:sort-direction</span>=<span class="hljs-string">&quot;sortDirection&quot;</span>\n      <span class="hljs-attr">stacked</span>=<span class="hljs-string">&quot;md&quot;</span>\n      <span class="hljs-attr">show-empty</span>\n      <span class="hljs-attr">small</span>\n      @<span class="hljs-attr">filtered</span>=<span class="hljs-string">&quot;onFiltered&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>(<span class="hljs-attr">name</span>)=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>\n        {{ row.value.first }} {{ row.value.last }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">cell</span>(<span class="hljs-attr">actions</span>)=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;info(row.item, row.index, $event.target)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-1&quot;</span>&gt;</span>\n          Info modal\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;row.toggleDetails&quot;</span>&gt;</span>\n          {{ row.detailsShowing ? &#x27;Hide&#x27; : &#x27;Show&#x27; }} Details\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">row-details</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, key) in row.item&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span>{{ key }}: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Info modal --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;infoModal.id&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;infoModal.title&quot;</span> <span class="hljs-attr">ok-only</span> @<span class="hljs-attr">hide</span>=<span class="hljs-string">&quot;resetInfoModal&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>{{ infoModal.content }}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Dickerson&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> } },\n          {\n            <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>,\n            <span class="hljs-attr">age</span>: <span class="hljs-number">9</span>,\n            <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Mini&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Navarro&#x27;</span> },\n            <span class="hljs-attr">_rowVariant</span>: <span class="hljs-string">&#x27;success&#x27;</span>\n          },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Geneva&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jami&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Carney&#x27;</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Essie&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Dunlap&#x27;</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Thor&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Macdonald&#x27;</span> } },\n          {\n            <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,\n            <span class="hljs-attr">age</span>: <span class="hljs-number">87</span>,\n            <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Larsen&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Shaw&#x27;</span> },\n            <span class="hljs-attr">_cellVariants</span>: { <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;danger&#x27;</span>, <span class="hljs-attr">isActive</span>: <span class="hljs-string">&#x27;warning&#x27;</span> }\n          },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">26</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Mitzi&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Navarro&#x27;</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Genevieve&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Wilson&#x27;</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Carney&#x27;</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Dick&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Dunlap&#x27;</span> } }\n        ],\n        <span class="hljs-attr">fields</span>: [\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Person full name&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">sortDirection</span>: <span class="hljs-string">&#x27;desc&#x27;</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Person age&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;text-center&#x27;</span> },\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;isActive&#x27;</span>,\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Is Active&#x27;</span>,\n            <span class="hljs-attr">formatter</span>: <span class="hljs-function">(<span class="hljs-params">value, key, item</span>) =&gt;</span> {\n              <span class="hljs-keyword">return</span> value ? <span class="hljs-string">&#x27;Yes&#x27;</span> : <span class="hljs-string">&#x27;No&#x27;</span>\n            },\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>,\n            <span class="hljs-attr">sortByFormatted</span>: <span class="hljs-literal">true</span>,\n            <span class="hljs-attr">filterByFormatted</span>: <span class="hljs-literal">true</span>\n          },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;actions&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Actions&#x27;</span> }\n        ],\n        <span class="hljs-attr">totalRows</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">currentPage</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">perPage</span>: <span class="hljs-number">5</span>,\n        <span class="hljs-attr">pageOptions</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, { <span class="hljs-attr">value</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;Show a lot&quot;</span> }],\n        <span class="hljs-attr">sortBy</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">sortDesc</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">sortDirection</span>: <span class="hljs-string">&#x27;asc&#x27;</span>,\n        <span class="hljs-attr">filter</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">filterOn</span>: [],\n        <span class="hljs-attr">infoModal</span>: {\n          <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;info-modal&#x27;</span>,\n          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n          <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;&#x27;</span>\n        }\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">sortOptions</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Create an options list from our fields</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.fields\n          .filter(<span class="hljs-function"><span class="hljs-params">f</span> =&gt;</span> f.sortable)\n          .map(<span class="hljs-function"><span class="hljs-params">f</span> =&gt;</span> {\n            <span class="hljs-keyword">return</span> { <span class="hljs-attr">text</span>: f.label, <span class="hljs-attr">value</span>: f.key }\n          })\n      }\n    },\n    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-comment">// Set the initial number of items</span>\n      <span class="hljs-built_in">this</span>.totalRows = <span class="hljs-built_in">this</span>.items.length\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">info</span>(<span class="hljs-params">item, index, button</span>)</span> {\n        <span class="hljs-built_in">this</span>.infoModal.title = <span class="hljs-string">`Row index: <span class="hljs-subst">${index}</span>`</span>\n        <span class="hljs-built_in">this</span>.infoModal.content = <span class="hljs-built_in">JSON</span>.stringify(item, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>)\n        <span class="hljs-built_in">this</span>.$root.$emit(<span class="hljs-string">&#x27;bv::show::modal&#x27;</span>, <span class="hljs-built_in">this</span>.infoModal.id, button)\n      },\n      <span class="hljs-function"><span class="hljs-title">resetInfoModal</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.infoModal.title = <span class="hljs-string">&#x27;&#x27;</span>\n        <span class="hljs-built_in">this</span>.infoModal.content = <span class="hljs-string">&#x27;&#x27;</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">onFiltered</span>(<span class="hljs-params">filteredItems</span>)</span> {\n        <span class="hljs-comment">// Trigger pagination to update the number of buttons/pages due to filtering</span>\n        <span class="hljs-built_in">this</span>.totalRows = filteredItems.length\n        <span class="hljs-built_in">this</span>.currentPage = <span class="hljs-number">1</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-complete.vue --&gt;</span></pre></div>'}}}]);