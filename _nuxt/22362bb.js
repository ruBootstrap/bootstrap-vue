(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{609:function(n,l){n.exports={baseTOC:{top:"#видимость",title:"Видимость",toc:[{href:"#обзор",label:"Обзор"},{href:"#синтаксис-и-использование-директив",label:"Синтаксис и использование директив",toc:[{href:"#примеры-использования-синтаксиса",label:"Примеры использования синтаксиса"}]},{href:"#живые-примеры",label:"Живые примеры",toc:[{href:"#видимость-прокручиваемого-контента",label:"Видимость прокручиваемого контента"},{href:"#определение-видимости-отображения-css",label:"Определение видимости отображения CSS"}]},{href:"#смотрите-также",label:"Смотрите также"}]},titleLead:'<h1 id="видимость" class="bv-no-focus-ring"><span class="bd-content-title">Видимость</span></h1> <p class="bd-lead"><code class="text-nowrap" translate="no">v-b-visible</code> — это упрощенная директива, которая позволяет вам реагировать, когда элемент становится видимым в области просмотра и/или когда он выходит из области просмотра (или больше не виден).</p>',body:'<h2 id="обзор" class="bv-no-focus-ring"><span class="bd-content-title">Обзор<a class="anchorjs-link" href="#обзор" aria-labelledby="обзор"></a></span></h2> <ul> <li><code class="text-nowrap" translate="no">v-b-visible</code> вызовет ваш метод обратного вызова с логическим значением, указывающим, является ли элемент видимым (пересекающимся с окном просмотра) или нет.</li> <li>Директиву можно разместить практически на любом элементе или компоненте.</li> <li>Изменения в видимости также могут быть обнаружены (например, <code class="text-nowrap" translate="no">display: none</code>), если элемент находится внутри (или частично) области просмотра или в пределах необязательного смещения. Примечание: переход в невидимое состояние из-за <code class="text-nowrap" translate="no">v-if=&quot;false&quot;</code> <em>не может</em> быть обнаружен.</li> <li>Внутри BootstrapVue использует эту директиву в нескольких компонентах, таких как <code class="text-nowrap" translate="no">&lt;b-img-lazy&gt;</code>.</li> <li>Директива <code class="text-nowrap" translate="no">v-b-visible</code> требует поддержки браузера <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">IntersectionObserver</code></a>. Для старых браузеров, которые не поддерживают <code class="text-nowrap" translate="no">IntersectionObserver</code>, вам нужно будет использовать <a href="/docs/#js" class="font-weight-bold">polyfill</a>.</li> <li>Если поддержка <code class="text-nowrap" translate="no">IntersectionObserver</code> не обнаружена, тогда <code class="text-nowrap" translate="no">v-b-visible</code> будет считать, что элемент <em>всегда виден</em>, и вызовет обратный вызов один раз с аргументом, установленным в <code class="text-nowrap" translate="no">true</code>.</li> </ul> <h2 id="синтаксис-и-использование-директив" class="bv-no-focus-ring"><span class="bd-content-title">Синтаксис и использование директив<a class="anchorjs-link" href="#синтаксис-и-использование-директив" aria-labelledby="синтаксис-и-использование-директив"></a></span></h2> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.</span>[<span class="hljs-attr">mod1</span>]<span class="hljs-attr">.</span>[<span class="hljs-attr">mod2</span>]=<span class="hljs-string">&quot;callback&quot;</span>&gt;</span>контент<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><p>Где требуется <code class="text-nowrap" translate="no">callback</code>:</p> <ul> <li>Ссылка на функцию, которая будет вызываться при изменении видимости. Обратному вызову передается один логический аргумент. <code class="text-nowrap" translate="no">true</code> указывает, что элемент пересекается (частично или полностью виден) в окне просмотра, или <code class="text-nowrap" translate="no">false</code>, если элемент не виден/пересекается с окном просмотра. Обратный вызов будет вызываться каждый раз, когда изменяется видимость элемента (за исключением случаев, когда используется модификатор <code class="text-nowrap" translate="no">once</code>. Подробнее смотрите ниже)</li> </ul> <p>Где <code class="text-nowrap" translate="no">[mod1]</code> или <code class="text-nowrap" translate="no">[mod2]</code> могут быть (все необязательные):</p> <ul> <li>Положительное целое число, представляющее смещение (поле) в пикселях <em>в стороне</em> от края <em>просмотра</em> для определения того, когда элемент рассматривается (или почти находится) в окне просмотра. Значение добавляет поле вокруг области просмотра. Значение по умолчанию — <code class="text-nowrap" translate="no">0</code>.</li> <li>Ключевое слово <code class="text-nowrap" translate="no">once</code>. Когда этот модификатор присутствует, обратный вызов будет вызываться только один раз, когда элемент становится видимым в первый раз (с аргументом <code class="text-nowrap" translate="no">true</code>, указывающим, что элемент пересекается/видим). Обратите внимание, что обратный вызов <em>может</em> быть вызван до этого с аргументом <code class="text-nowrap" translate="no">false</code>, означающим, что элемент не пересекается/не виден.</li> </ul> <p>Порядок модификаторов не важен.</p> <h3 id="примеры-использования-синтаксиса" class="bv-no-focus-ring"><span class="bd-content-title">Примеры использования синтаксиса<a class="anchorjs-link" href="#примеры-использования-синтаксиса" aria-labelledby="примеры-использования-синтаксиса"></a></span></h3> <p>Во всех случаях использования требуется функция обратного вызова.</p> <h4 id="базовый-без-модификаторов" class="bv-no-focus-ring"><span class="bd-content-title">Базовый (без модификаторов)<a class="anchorjs-link" href="#базовый-без-модификаторов" aria-labelledby="базовый-без-модификаторов"></a></span></h4> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible</span>=<span class="hljs-string">&quot;visibleHandler&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">visibleHandler</span>(<span class="hljs-params">isVisible</span>)</span> {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// Do something</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// Do something else</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><h4 id="с-модификатором-смещения-окна-просмотра" class="bv-no-focus-ring"><span class="bd-content-title">С модификатором смещения окна просмотра<a class="anchorjs-link" href="#с-модификатором-смещения-окна-просмотра" aria-labelledby="с-модификатором-смещения-окна-просмотра"></a></span></h4> <p>В этом примере значение модификатора составляет 350 пикселей (если элемент находится за пределами физического окна просмотра не менее чем на 350 пикселей, то он будет считаться &quot;visible&quot;):</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.350</span>=<span class="hljs-string">&quot;visibleHandler&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">visibleHandler</span>(<span class="hljs-params">isVisible</span>)</span> {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// Do something</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// Do something else</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><h4 id="с-модификатором-once" class="bv-no-focus-ring"><span class="bd-content-title">С модификатором <code class="text-nowrap" translate="no">once</code><a class="anchorjs-link" href="#с-модификатором-once" aria-labelledby="с-модификатором-once"></a></span></h4> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.once</span>=<span class="hljs-string">&quot;visibleHandler&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">visibleHandler</span>(<span class="hljs-params">isVisible</span>)</span> {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// This will only ever happen once, when the</span>\n        <span class="hljs-comment">// element has become visible for the first time</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// This may happen zero or more times before</span>\n        <span class="hljs-comment">// the element becomes visible, but will never</span>\n        <span class="hljs-comment">// happen after the element has become visible</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><h4 id="с-модификаторами-once-и-offset" class="bv-no-focus-ring"><span class="bd-content-title">С модификаторами <code class="text-nowrap" translate="no">once</code> и <code class="text-nowrap" translate="no">offset</code><a class="anchorjs-link" href="#с-модификаторами-once-и-offset" aria-labelledby="с-модификаторами-once-и-offset"></a></span></h4> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.once.350</span>=<span class="hljs-string">&quot;visibleHandler&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">visibleHandler</span>(<span class="hljs-params">isVisible</span>)</span> {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// This will only ever happen once, when the</span>\n        <span class="hljs-comment">// element is outside of the physical viewport</span>\n        <span class="hljs-comment">// by at least 350px for the first time</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// This may happen zero or more times before</span>\n        <span class="hljs-comment">// the element becomes visible, but will never</span>\n        <span class="hljs-comment">// happen after the element has become visible</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><h2 id="живые-примеры" class="bv-no-focus-ring"><span class="bd-content-title">Живые примеры<a class="anchorjs-link" href="#живые-примеры" aria-labelledby="живые-примеры"></a></span></h2> <p>Вот два живых примера, демонстрирующих два распространенных варианта использования.</p> <h3 id="видимость-прокручиваемого-контента" class="bv-no-focus-ring"><span class="bd-content-title">Видимость прокручиваемого контента<a class="anchorjs-link" href="#видимость-прокручиваемого-контента" aria-labelledby="видимость-прокручиваемого-контента"></a></span></h3> <p>Прокрутите контейнер, чтобы увидеть реакцию, когда <code class="text-nowrap" translate="no">&lt;b-badge&gt;</code> появится в поле зрения. Обратите внимание, что состояние видимости также изменится, если элемент прокручивается за пределы области просмотра.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>\n      <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[isVisible ? &#x27;bg-info&#x27; : &#x27;bg-light&#x27;, &#x27;border&#x27;, &#x27;p-2&#x27;, &#x27;text-center&#x27;]&quot;</span>\n      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 85px; overflow-y: scroll;&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-badge</span> <span class="hljs-attr">v-b-visible</span>=<span class="hljs-string">&quot;handleVisibility&quot;</span>&gt;</span>Element with v-b-visible directive<span class="hljs-tag">&lt;/<span class="hljs-name">b-badge</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n      Visible: {{ isVisible }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">isVisible</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">text</span>: <span class="hljs-string">`\n          Quis magna Lorem anim amet ipsum do mollit sit cillum voluptate ex nulla\n          tempor. Laborum consequat non elit enim exercitation cillum aliqua\n          consequat id aliqua. Esse ex consectetur mollit voluptate est in duis\n          laboris ad sit ipsum anim Lorem. Incididunt veniam velit elit elit veniam\n          Lorem aliqua quis ullamco deserunt sit enim elit aliqua esse irure. Laborum\n          nisi sit est tempor laborum mollit labore officia laborum excepteur commodo\n          non commodo dolor excepteur commodo. Ipsum fugiat ex est consectetur ipsum\n          commodo tempor sunt in proident. Non elixir food exorcism nacho tequila tasty.\n        `</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">handleVisibility</span>(<span class="hljs-params">isVisible</span>)</span> {\n        <span class="hljs-built_in">this</span>.isVisible = isVisible\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- v-b-visible-scroll.vue --&gt;</span></pre></div><p>Один из вариантов использования для этого, в сочетании с модификатором <code class="text-nowrap" translate="no">once</code>, состоит в том, чтобы увидеть, прокручивал ли пользователь страницу или прокручиваемый элемент div до конца (т. е. &quot;read&quot; все условия обслуживания).</p> <h3 id="определение-видимости-отображения-css" class="bv-no-focus-ring"><span class="bd-content-title">Определение видимости отображения CSS<a class="anchorjs-link" href="#определение-видимости-отображения-css" aria-labelledby="определение-видимости-отображения-css"></a></span></h3> <p>Нажмите кнопку, чтобы изменить состояние видимости <code class="text-nowrap" translate="no">&lt;div&gt;</code>. Обратите внимание, что состояние видимости также изменится, если элемент прокручивается за пределы области просмотра.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Toggle display<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Visible: {{ isVisible }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;border p-3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 6em;&quot;</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- We use Vue&#x27;s `v-show` directive to control the CSS `display` of the div --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-info p-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-badge</span> <span class="hljs-attr">v-b-visible</span>=<span class="hljs-string">&quot;handleVisibility&quot;</span>&gt;</span>Element with v-b-visible directive<span class="hljs-tag">&lt;/<span class="hljs-name">b-badge</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">isVisible</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">handleVisibility</span>(<span class="hljs-params">isVisible</span>)</span> {\n        <span class="hljs-built_in">this</span>.isVisible = isVisible\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- v-b-visible-display.vue --&gt;</span></pre></div><h2 id="смотрите-также" class="bv-no-focus-ring"><span class="bd-content-title">Смотрите также<a class="anchorjs-link" href="#смотрите-также" aria-labelledby="смотрите-также"></a></span></h2> <p>Дополнительные сведения об IntersectionObserver см. в <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener">документации MDN</a></p>'}}}]);