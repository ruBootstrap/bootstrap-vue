(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{571:function(n,e){n.exports={baseTOC:{top:"#visible",title:"Visible",toc:[{href:"#overview",label:"Overview"},{href:"#directive-syntax-and-usage",label:"Directive syntax and usage",toc:[{href:"#usage-syntax-examples",label:"Usage syntax examples"}]},{href:"#live-examples",label:"Live examples",toc:[{href:"#visibility-of-scrolled-content",label:"Visibility of scrolled content"},{href:"#css-display-visibility-detection",label:"CSS display visibility detection"}]},{href:"#see-also",label:"See also"}]},titleLead:'<h1 id="visible" class="bv-no-focus-ring"><span class="bd-content-title">Visible</span></h1> <p class="bd-lead"><code class="text-nowrap" translate="no">v-b-visible</code> is a lightweight directive that allows you to react when an element becomes visible in the viewport and/or when it moves out of the viewport (or is no longer visible).</p>',body:'<h2 id="overview" class="bv-no-focus-ring"><span class="bd-content-title">Overview<a class="anchorjs-link" href="#overview" aria-labelledby="overview"></a></span></h2> <ul> <li><code class="text-nowrap" translate="no">v-b-visible</code> will call your callback method with a boolean value indicating if the element is visible (intersecting with the viewport) or not.</li> <li>The directive can be placed on almost any element or component.</li> <li>Changes in visibility can also be detected (such as <code class="text-nowrap" translate="no">display: none</code>), as long as the element is within (or partially within) the viewport, or within the optional offset. Note: transitioning to a non-visible state due to <code class="text-nowrap" translate="no">v-if=&quot;false&quot;</code> <em>cannot</em> be detected.</li> <li>Internally, BootstrapVue uses this directive in several components, such as <code class="text-nowrap" translate="no">&lt;b-img-lazy&gt;</code>.</li> <li>The <code class="text-nowrap" translate="no">v-b-visible</code> directive requires browser support of <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">IntersectionObserver</code></a>. For older browsers that do not support <code class="text-nowrap" translate="no">IntersectionObserver</code>, you will need to use a <a href="/docs/#js" class="font-weight-bold">polyfill</a>.</li> <li>If <code class="text-nowrap" translate="no">IntersectionObserver</code> support is not detected, then <code class="text-nowrap" translate="no">v-b-visible</code> will assume the element is <em>always visible</em>, and will call the callback once with the argument set to <code class="text-nowrap" translate="no">true</code>.</li> </ul> <h2 id="directive-syntax-and-usage" class="bv-no-focus-ring"><span class="bd-content-title">Directive syntax and usage<a class="anchorjs-link" href="#directive-syntax-and-usage" aria-labelledby="directive-syntax-and-usage"></a></span></h2> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.</span>[<span class="hljs-attr">mod1</span>]<span class="hljs-attr">.</span>[<span class="hljs-attr">mod2</span>]=<span class="hljs-string">&quot;callback&quot;</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><p>Where <code class="text-nowrap" translate="no">callback</code> is required:</p> <ul> <li>A function reference that will be called whenever visibility changes. The callback is passed a single boolean argument. <code class="text-nowrap" translate="no">true</code> indicates that the element is intersecting (partially or entirely visible) in the viewport, or <code class="text-nowrap" translate="no">false</code> if the element is not visible/intersecting with the viewport. The callback will be called each time the element&#39;s visibility changes (except when the <code class="text-nowrap" translate="no">once</code> modifier is used. See below for details)</li> </ul> <p>Where <code class="text-nowrap" translate="no">[mod1]</code> or <code class="text-nowrap" translate="no">[mod2]</code> can be (all optional):</p> <ul> <li>A positive integer number representing the offset (margin) in pixels <em>away</em> from the edge of the <em>viewport</em> to determine when the element is considered in (or just about to be in) the viewport. The value adds a margin around the viewport. The default value is <code class="text-nowrap" translate="no">0</code>.</li> <li>The keyword <code class="text-nowrap" translate="no">once</code>. When this modifier is present, the callback will be called only once the first time the element is visible (with the argument of <code class="text-nowrap" translate="no">true</code> indicating the element is intersecting/visible). Note the callback <em>may be</em> called prior to this with an argument of <code class="text-nowrap" translate="no">false</code> signifying the element is not intersecting/visible.</li> </ul> <p>The order of the modifiers is not important.</p> <h3 id="usage-syntax-examples" class="bv-no-focus-ring"><span class="bd-content-title">Usage syntax examples<a class="anchorjs-link" href="#usage-syntax-examples" aria-labelledby="usage-syntax-examples"></a></span></h3> <p>In all use cases, the callback function is required.</p> <h4 id="basic-no-modifiers" class="bv-no-focus-ring"><span class="bd-content-title">Basic (no modifiers)<a class="anchorjs-link" href="#basic-no-modifiers" aria-labelledby="basic-no-modifiers"></a></span></h4> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible</span>=<span class="hljs-string">&quot;visibleHandler&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">visibleHandler</span>(<span class="hljs-params">isVisible</span>)</span> {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// Do something</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// Do something else</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><h4 id="with-viewport-offset-modifier" class="bv-no-focus-ring"><span class="bd-content-title">With viewport offset modifier<a class="anchorjs-link" href="#with-viewport-offset-modifier" aria-labelledby="with-viewport-offset-modifier"></a></span></h4> <p>In this example, the modifier value represents 350px (if the element is outside of the physical viewport by at least 350px, then it will be considered &quot;visible&quot;):</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.350</span>=<span class="hljs-string">&quot;visibleHandler&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">visibleHandler</span>(<span class="hljs-params">isVisible</span>)</span> {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// Do something</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// Do something else</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><h4 id="with-the-once-modifier" class="bv-no-focus-ring"><span class="bd-content-title">With the <code class="text-nowrap" translate="no">once</code> modifier<a class="anchorjs-link" href="#with-the-once-modifier" aria-labelledby="with-the-once-modifier"></a></span></h4> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.once</span>=<span class="hljs-string">&quot;visibleHandler&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">visibleHandler</span>(<span class="hljs-params">isVisible</span>)</span> {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// This will only ever happen once, when the</span>\n        <span class="hljs-comment">// element has become visible for the first time</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// This may happen zero or more times before</span>\n        <span class="hljs-comment">// the element becomes visible, but will never</span>\n        <span class="hljs-comment">// happen after the element has become visible</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><h4 id="with-both-once-and-offset-modifiers" class="bv-no-focus-ring"><span class="bd-content-title">With both <code class="text-nowrap" translate="no">once</code> and offset modifiers<a class="anchorjs-link" href="#with-both-once-and-offset-modifiers" aria-labelledby="with-both-once-and-offset-modifiers"></a></span></h4> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.once.350</span>=<span class="hljs-string">&quot;visibleHandler&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">visibleHandler</span>(<span class="hljs-params">isVisible</span>)</span> {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// This will only ever happen once, when the</span>\n        <span class="hljs-comment">// element is outside of the physical viewport</span>\n        <span class="hljs-comment">// by at least 350px for the first time</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// This may happen zero or more times before</span>\n        <span class="hljs-comment">// the element becomes visible, but will never</span>\n        <span class="hljs-comment">// happen after the element has become visible</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><h2 id="live-examples" class="bv-no-focus-ring"><span class="bd-content-title">Live examples<a class="anchorjs-link" href="#live-examples" aria-labelledby="live-examples"></a></span></h2> <p>Here are two live examples showing two common use cases.</p> <h3 id="visibility-of-scrolled-content" class="bv-no-focus-ring"><span class="bd-content-title">Visibility of scrolled content<a class="anchorjs-link" href="#visibility-of-scrolled-content" aria-labelledby="visibility-of-scrolled-content"></a></span></h3> <p>Scroll the container to see the reaction when the <code class="text-nowrap" translate="no">&lt;b-badge&gt;</code> scrolls into view. Note that visibility state will also change if the element is scrolled out of the viewport.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>\n      <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[isVisible ? &#x27;bg-info&#x27; : &#x27;bg-light&#x27;, &#x27;border&#x27;, &#x27;p-2&#x27;, &#x27;text-center&#x27;]&quot;</span>\n      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 85px; overflow-y: scroll;&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-badge</span> <span class="hljs-attr">v-b-visible</span>=<span class="hljs-string">&quot;handleVisibility&quot;</span>&gt;</span>Element with v-b-visible directive<span class="hljs-tag">&lt;/<span class="hljs-name">b-badge</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n      Visible: {{ isVisible }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">isVisible</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">text</span>: <span class="hljs-string">`\n          Quis magna Lorem anim amet ipsum do mollit sit cillum voluptate ex nulla\n          tempor. Laborum consequat non elit enim exercitation cillum aliqua\n          consequat id aliqua. Esse ex consectetur mollit voluptate est in duis\n          laboris ad sit ipsum anim Lorem. Incididunt veniam velit elit elit veniam\n          Lorem aliqua quis ullamco deserunt sit enim elit aliqua esse irure. Laborum\n          nisi sit est tempor laborum mollit labore officia laborum excepteur commodo\n          non commodo dolor excepteur commodo. Ipsum fugiat ex est consectetur ipsum\n          commodo tempor sunt in proident. Non elixir food exorcism nacho tequila tasty.\n        `</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">handleVisibility</span>(<span class="hljs-params">isVisible</span>)</span> {\n        <span class="hljs-built_in">this</span>.isVisible = isVisible\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- v-b-visible-scroll.vue --&gt;</span></pre></div><p>One use case for this, when combined with the <code class="text-nowrap" translate="no">once</code> modifier, is to see if a user has scrolled to the bottom of a page or scrollable div (i.e. has &quot;read&quot; the entire terms of service).</p> <h3 id="css-display-visibility-detection" class="bv-no-focus-ring"><span class="bd-content-title">CSS display visibility detection<a class="anchorjs-link" href="#css-display-visibility-detection" aria-labelledby="css-display-visibility-detection"></a></span></h3> <p>Click the button to change the <code class="text-nowrap" translate="no">&lt;div&gt;</code> visibility state. Note that visibility state will also change if the element is scrolled out of the viewport.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Toggle display<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Visible: {{ isVisible }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;border p-3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 6em;&quot;</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- We use Vue&#x27;s `v-show` directive to control the CSS `display` of the div --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-info p-3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-badge</span> <span class="hljs-attr">v-b-visible</span>=<span class="hljs-string">&quot;handleVisibility&quot;</span>&gt;</span>Element with v-b-visible directive<span class="hljs-tag">&lt;/<span class="hljs-name">b-badge</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">isVisible</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">handleVisibility</span>(<span class="hljs-params">isVisible</span>)</span> {\n        <span class="hljs-built_in">this</span>.isVisible = isVisible\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- v-b-visible-display.vue --&gt;</span></pre></div><h2 id="see-also" class="bv-no-focus-ring"><span class="bd-content-title">See also<a class="anchorjs-link" href="#see-also" aria-labelledby="see-also"></a></span></h2> <p>For more details on <code class="text-nowrap" translate="no">IntersectionObserver</code>, refer to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener">MDN documentation</a></p>'}}}]);