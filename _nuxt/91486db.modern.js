(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{484:function(t,n){t.exports={baseTOC:{top:"#тост",title:"Тост",toc:[{href:"#обзор",label:"Обзор",toc:[{href:"#функции-всплывающих-уведомлений-и-заметки",label:"Функции всплывающих уведомлений и заметки"}]},{href:"#тосты-по-требованию",label:"Тосты по требованию"},{href:"#опции",label:"Опции",toc:[{href:"#заголовок",label:"Заголовок"},{href:"#прозрачность",label:"Прозрачность"},{href:"#варианты",label:"Варианты"},{href:"#цель-тостера",label:"Цель тостера"},{href:"#подготовка-и-добавление",label:"Подготовка и добавление"},{href:"#авто-скрытие",label:"Авто-скрытие"},{href:"#кнопка-закрытия",label:"Кнопка закрытия"},{href:"#роли-тостов",label:"Роли тостов"},{href:"#ссылки",label:"Ссылки"}]},{href:"#компонент-b-toast",label:"Компонент &lt;b-toast&gt;",toc:[{href:"#слоты",label:"Слоты"}]},{href:"#целевой-компонент-b-toaster",label:"Целевой компонент &lt;b-toaster&gt;"},{href:"#расширенное-использование",label:"Расширенное использование"},{href:"#оповещения-против-тостов",label:"Оповещения против тостов"},{href:"#доступность",label:"Доступность",toc:[{href:"#советы-по-доступности",label:"Советы по доступности"},{href:"#поддержка-программы-чтения-с-экрана-internet-explorer",label:"Поддержка программы чтения с экрана Internet Explorer"}]}]},titleLead:'<h1 id="тост" class="bv-no-focus-ring"><span class="bd-content-title">Тост</span></h1> <p class="bd-lead">Отправляйте своим посетителям push-уведомления с помощью <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> и <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code>, легких компонентов, которые легко настраиваются для создания предупреждающих сообщений.</p>',body:'<p>Тосты — это легкие уведомления, имитирующие push-уведомления, популярные в мобильных и настольных операционных системах.</p> <p>Тосты предназначены для небольшого прерывания ваших посетителей или пользователей и поэтому должны содержать минимум неинтерактивного контента по существу. Обратитесь к разделу <a href="#accessibility-tips" class="font-weight-bold">Советы по специальным возможностям</a> ниже для получения <strong>важной</strong> информации об использовании.</p> <h2 id="обзор" class="bv-no-focus-ring"><span class="bd-content-title">Обзор<a class="anchorjs-link" href="#обзор" aria-labelledby="обзор"></a></span></h2> <p>Чтобы поощрять расширяемые и предсказуемые всплывающие уведомления, мы рекомендуем предоставить заголовок (название) и тело. Заголовки всплывающих сообщений используют стиль <code class="text-nowrap" translate="no">&#39;display: flex&#39;</code>, что позволяет легко выравнивать содержимое благодаря <a href="/docs/reference/utility-classes" class="font-weight-bold">служебным классам маржин и флексбокс Bootstrap</a>.</p> <p>Тосты также слегка полупрозрачны, поэтому они сливаются с тем, на чем могут появиться. Браузеры, поддерживающие CSS-свойство <code class="text-nowrap" translate="no">backdrop-filter</code>, также пытаются размыть элементы всплывающего уведомления.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-3 bg-secondary progress-bar-striped&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;min-height: 170px;&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$bvToast.show(&#x27;example-toast&#x27;)&quot;</span>&gt;</span>\n      Показать тост\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-toast</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-toast&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;BootstrapVue&quot;</span> <span class="hljs-attr">static</span> <span class="hljs-attr">no-auto-hide</span>&gt;</span>\n      Привет, мир! Это тост-сообщение.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-toast</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toast-intro.vue --&gt;</span></pre></div><p><strong>Примечание:</strong> мы используем свойство <code class="text-nowrap" translate="no">static</code> в приведенном выше примере для рендеринга всплывающего уведомления на месте в документе, а не для его транспортировки в целевой контейнер <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code>. И мы добавили классы <code class="text-nowrap" translate="no">bg-secondary</code> и <code class="text-nowrap" translate="no">progress-bar-striped</code> к внешнему <code class="text-nowrap" translate="no">&lt;div&gt;</code> только для иллюстративных целей прозрачности тостов.</p> <h3 id="функции-всплывающих-уведомлений-и-заметки" class="bv-no-focus-ring"><span class="bd-content-title">Функции всплывающих уведомлений и заметки<a class="anchorjs-link" href="#функции-всплывающих-уведомлений-и-заметки" aria-labelledby="функции-всплывающих-уведомлений-и-заметки"></a></span></h3> <ul> <li>Тосты могут генерироваться по запросу с помощью объекта внедрения <code class="text-nowrap" translate="no">this.$bvToast</code> или создаваться вручную с помощью компонента <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code>.</li> <li>Заголовки необязательны, но должны быть включены, заголовки отображаются внутри элемента <code class="text-nowrap" translate="no">&lt;strong&gt;</code>, если только не используется слот <code class="text-nowrap" translate="no">toast-title</code>.</li> <li>Кнопку закрытия в правом верхнем углу всплывающего уведомления можно удалить с помощью параметра <code class="text-nowrap" translate="no">no-close-button</code>.</li> <li>Отображается строка заголовка, если вы не укажете заголовок и не установите свойство <code class="text-nowrap" translate="no">no-close-button</code>.</li> <li>Автоматическое скрытие происходит через 5000 мс, что можно изменить с помощью параметра <code class="text-nowrap" translate="no">auto-hide-delay</code> или отключить с помощью параметра <code class="text-nowrap" translate="no">no-auto-hide</code>.</li> <li>Когда автоматическое скрытие включено, пока вы наводите курсор на всплывающее уведомление, обратный отсчет автоматического скрытия будет приостановлен. Вы можете отключить эту функцию, установив для параметра <code class="text-nowrap" translate="no">no-hover-pause</code> значение <code class="text-nowrap" translate="no">true</code>.</li> <li>Если вы отключите функцию автоматического скрытия, не скрывайте кнопку закрытия, а если вы скрываете кнопку закрытия, обязательно разрешите автоматическое закрытие всплывающего уведомления. Обратитесь к разделу <a href="#accessibility-tips" class="font-weight-bold">Советы по специальным возможностям</a> ниже для получения <strong>важной</strong> информации об использовании.</li> <li>Прозрачность тостов можно отключить, установив для параметра <code class="text-nowrap" translate="no">solid</code> значение <code class="text-nowrap" translate="no">true</code>.</li> <li>Тосты будут отображаться внутри целевого компонента с именем <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code>. BootstrapVue поставляется с несколькими предопределенными целями тостера. Тосты будут проверять наличие именованного тостера в документе, прежде чем они будут показаны, и динамически создавать именованный целевой тостер, если он не найден.</li> <li>Цели тостера полностью определены с помощью CSS для управления позиционированием содержащихся компонентов <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code>.</li> <li>Тосты могут быть нацелены на любой названный тостер.</li> <li>Тосты заключены в <code class="text-nowrap" translate="no">&lt;div&gt;</code> с классом <code class="text-nowrap" translate="no">b-toast</code>, чтобы обеспечить поддержку перехода списка Vue при отображении в компоненте тостера.</li> </ul> <p>BootstrapVue использует <a href="https://portal-vue.linusb.org/" target="_blank" rel="noopener">PortalVue</a> для переноса тостов в тостеры.</p> <h2 id="тосты-по-требованию" class="bv-no-focus-ring"><span class="bd-content-title">Тосты по требованию<a class="anchorjs-link" href="#тосты-по-требованию" aria-labelledby="тосты-по-требованию"></a></span></h2> <p>Создавайте динамические всплывающие уведомления из любого места вашего приложения с помощью внедрения <em>инстанса</em> компонента Vue <code class="text-nowrap" translate="no">this.$bvToast</code> без необходимости размещать в приложении компонент <a href="#b-toast-component" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-toast&gt;</code></a>.</p> <p>Используйте метод <code class="text-nowrap" translate="no">this.$bvToast.toast()</code> для создания тостов по запросу. Метод принимает два аргумента:</p> <ul> <li><code class="text-nowrap" translate="no">message</code>: содержимое тела всплывающего уведомления (либо строка, либо массив <code class="text-nowrap" translate="no">VNodes</code>). Обязательный. Тосты с пустым сообщением отображаться не будут. Смотрите раздел <a href="#advanced-usage" class="font-weight-bold">Расширенное использование</a> для примера передачи массива <code class="text-nowrap" translate="no">VNodes</code> в качестве сообщения.</li> <li><code class="text-nowrap" translate="no">options</code>: необязательный объект опций для предоставления заголовка и/или дополнительных опций конфигурации. Опция <code class="text-nowrap" translate="no">title</code> может быть либо строкой, либо массивом <code class="text-nowrap" translate="no">VNodes</code></li> </ul> <p>Аргумент options принимает большинство свойств, которые принимает компонент <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> (за исключением <code class="text-nowrap" translate="no">static</code> и <code class="text-nowrap" translate="no">visible</code>) в формате имени <samp class="notranslate" translate="no">camelCase</samp> вместо <samp class="notranslate" translate="no">kebab-case</samp>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast()&quot;</span>&gt;</span>Показать тост<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(true)&quot;</span>&gt;</span>Показать тост (добавленный)<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">toastCount</span>: <span class="hljs-number">0</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">makeToast</span>(<span class="hljs-params">append = <span class="hljs-literal">false</span></span>)</span> {\n        <span class="hljs-built_in">this</span>.toastCount++\n        <span class="hljs-built_in">this</span>.$bvToast.toast(<span class="hljs-string">`Это тост номер <span class="hljs-subst">${<span class="hljs-built_in">this</span>.toastCount}</span>`</span>, {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;BootstrapVue Toast&#x27;</span>,\n          <span class="hljs-attr">autoHideDelay</span>: <span class="hljs-number">5000</span>,\n          <span class="hljs-attr">appendToast</span>: append\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toasts-bv-toast-example.vue --&gt;</span></pre></div><p>Как только всплывающее уведомление, созданное с помощью <code class="text-nowrap" translate="no">this.$bvToast.toast()</code>, будет скрыто, оно будет автоматически уничтожено и удалено из документа.</p> <p><strong>Примечания:</strong></p> <ul> <li>Внедрение <code class="text-nowrap" translate="no">this.$bvToast</code> доступно только при использовании полного плагина <code class="text-nowrap" translate="no">BootstrapVue</code> или плагина <code class="text-nowrap" translate="no">ToastPlugin</code>. Он недоступен при импорте только компонентов <code class="text-nowrap" translate="no">b-toast</code> или <code class="text-nowrap" translate="no">b-toaster</code>. Чтобы просто импортировать инъекцию <code class="text-nowrap" translate="no">$bvToast</code>, используйте плагин <code class="text-nowrap" translate="no">BVToastPlugin</code>.</li> <li>Новая инъекция <code class="text-nowrap" translate="no">$bvToast</code> (примесь) создается для каждого экземпляра виртуальной машины Vue (т. е. каждого созданного компонента), и ее нельзя использовать через прямой доступ к <code class="text-nowrap" translate="no">Vue.prototype</code>, так как ему нужен доступ к контекстам <code class="text-nowrap" translate="no">this</code> и <code class="text-nowrap" translate="no">$root</code>.</li> <li>Тосты, созданные с помощью <code class="text-nowrap" translate="no">this.$bvToast.toast()</code>, являются дочерними элементами экземпляра Vue, вызывающего метод <code class="text-nowrap" translate="no">this.$bvToast.toast()</code>, и будут скрыты и уничтожены, если этот экземпляр Vue (т.е. ваш компонент или приложение) также уничтожается. Если контекст vm находится внутри <code class="text-nowrap" translate="no">&lt;router-view&gt;</code>, а <code class="text-nowrap" translate="no">$route</code> изменяется, всплывающее уведомление также будет уничтожено (поскольку все дочерние элементы <code class="text-nowrap" translate="no">&lt;router-view&gt;</code> уничтожаются. Чтобы сделать запрос по запросу тосты сохраняются при изменении маршрутизатора <code class="text-nowrap" translate="no">$route</code>, вместо этого используйте <code class="text-nowrap" translate="no">this.$root.$bvToast.toast()</code>, чтобы сделать родителем всплывающего уведомления корень вашего приложения.</li> <li>Тосты требуют сообщения. Тосты по запросу с пустым сообщением не будут отображаться.</li> </ul> <h2 id="опции" class="bv-no-focus-ring"><span class="bd-content-title">Опции<a class="anchorjs-link" href="#опции" aria-labelledby="опции"></a></span></h2> <p>Тосты имеют различные параметры, которые могут управлять их стилем и поведением. Параметры доступны как в качестве свойств компонента <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code>, так и в качестве свойств объекта параметров, переданного в <code class="text-nowrap" translate="no">this.$bvToast.toast()</code>. При передаче опций в <code class="text-nowrap" translate="no">this.$bvToast.toast()</code>, используйте <samp class="notranslate" translate="no">camelCase</samp> версию имени свойства компонента, т.е. используйте <code class="text-nowrap" translate="no">noAutoHide</code> вместо <code class="text-nowrap" translate="no">no-auto-hide</code>.</p> <h3 id="заголовок" class="bv-no-focus-ring"><span class="bd-content-title">Заголовок<a class="anchorjs-link" href="#заголовок" aria-labelledby="заголовок"></a></span></h3> <p>Добавьте заголовок к вашему тосту с помощью опции <code class="text-nowrap" translate="no">title</code>. Как и всплывающее сообщение <code class="text-nowrap" translate="no">message</code>, заголовок может быть простой строкой или массивом VNodes. Смотрите раздел <a href="#advanced-usage" class="font-weight-bold">Расширенное использование</a> для примера передачи массива <code class="text-nowrap" translate="no">VNodes</code> в качестве сообщения и заголовка.</p> <h3 id="прозрачность" class="bv-no-focus-ring"><span class="bd-content-title">Прозрачность<a class="anchorjs-link" href="#прозрачность" aria-labelledby="прозрачность"></a></span></h3> <p>Тосты по умолчанию имеют полупрозрачный фон. Чтобы отключить прозрачность по умолчанию, просто установите свойство <code class="text-nowrap" translate="no">solid</code> в значение <code class="text-nowrap" translate="no">true</code>, чтобы удалить альфа-канал из цвета фона.</p> <p>Прозрачность также можно изменить с помощью пользовательской переменной SCSS BootstrapVue <code class="text-nowrap" translate="no">$b-toast-background-opacity</code> при использовании файлов SCSS, а не файлов CSS. Смотрите справочный раздел <a href="/docs/reference/theming" class="font-weight-bold">Тематика</a>.</p> <h3 id="варианты" class="bv-no-focus-ring"><span class="bd-content-title">Варианты<a class="anchorjs-link" href="#варианты" aria-labelledby="варианты"></a></span></h3> <p>Тосты BootstrapVue предоставляют настраиваемый CSS для определения цветовых вариантов. Варианты следуют стандартным именам вариантов Bootstrap v4. Если у вас есть определенные в SCSS варианты цветовой темы Bootstrap, пользовательский SCSS всплывающих уведомлений автоматически создаст для вас варианты всплывающих уведомлений (смотрите справочный раздел <a href="/docs/reference/theming" class="font-weight-bold">Тематика</a>).</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast()&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>По умолчанию<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;primary&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;secondary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;secondary&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Secondary<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;danger&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;danger&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Danger<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;warning&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;warning&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Warning<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;success&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;success&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;info&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;makeToast(&#x27;info&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>Info<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">makeToast</span>(<span class="hljs-params">variant = <span class="hljs-literal">null</span></span>)</span> {\n        <span class="hljs-built_in">this</span>.$bvToast.toast(<span class="hljs-string">&#x27;Toast body content&#x27;</span>, {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">`Variant <span class="hljs-subst">${variant || <span class="hljs-string">&#x27;default&#x27;</span>}</span>`</span>,\n          <span class="hljs-attr">variant</span>: variant,\n          <span class="hljs-attr">solid</span>: <span class="hljs-literal">true</span>\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toast-variants.vue --&gt;</span></pre></div><h3 id="цель-тостера" class="bv-no-focus-ring"><span class="bd-content-title">Цель тостера<a class="anchorjs-link" href="#цель-тостера" aria-labelledby="цель-тостера"></a></span></h3> <p>BootstrapVue поставляется со следующими «встроенными» именами тостеров (и связанными стилями, определенными в SCSS):</p> <ul> <li><code class="text-nowrap" translate="no">b-toaster-top-right</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-left</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-center</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-full</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-right</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-left</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-center</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-full</code></li> </ul> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-top-right&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-top-right<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-top-left&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-top-left<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-top-center&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-top-center<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-top-full&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-top-full<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-bottom-right&#x27;, true)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-bottom-right<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-bottom-left&#x27;, true)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-bottom-left<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-bottom-center&#x27;, true)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-bottom-center<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast(&#x27;b-toaster-bottom-full&#x27;, true)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>b-toaster-bottom-full<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">toast</span>(<span class="hljs-params">toaster, append = <span class="hljs-literal">false</span></span>)</span> {\n        <span class="hljs-built_in">this</span>.counter++\n        <span class="hljs-built_in">this</span>.$bvToast.toast(<span class="hljs-string">`Toast <span class="hljs-subst">${<span class="hljs-built_in">this</span>.counter}</span> body content`</span>, {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">`Toaster <span class="hljs-subst">${toaster}</span>`</span>,\n          <span class="hljs-attr">toaster</span>: toaster,\n          <span class="hljs-attr">solid</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">appendToast</span>: append\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toast-targets.vue --&gt;</span></pre></div><p><strong>Примечания:</strong></p> <ul> <li>Имена целей тостера, которые не были определены в CSS, будут отображаться в нижней части документа, сгруппированы и не позиционированы (добавлены к <code class="text-nowrap" translate="no">&lt;body&gt;</code> внутри <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> с именем класса и идентификатором, установленными для тостера). имя цели). Единственный стиль по умолчанию, который будет иметь тостер, — это <code class="text-nowrap" translate="no">z-index</code> равный <code class="text-nowrap" translate="no">1100</code>.</li> <li>Избегайте одновременного использования тостеров <code class="text-nowrap" translate="no">b-toaster-top-*</code> или <code class="text-nowrap" translate="no">b-toaster-bottom-*</code> вместе в вашем приложении, так как уведомления могут быть скрыты/перекрываться на маленьких экранах (например, <code class="text-nowrap" translate="no">xs</code>).</li> </ul> <h3 id="подготовка-и-добавление" class="bv-no-focus-ring"><span class="bd-content-title">Подготовка и добавление<a class="anchorjs-link" href="#подготовка-и-добавление" aria-labelledby="подготовка-и-добавление"></a></span></h3> <p>Тосты по умолчанию добавляются в начало всплывающих уведомлений, отображаемых в указанном тостере, в порядке их создания. Чтобы добавить новые всплывающие уведомления в конец, установите для свойства <code class="text-nowrap" translate="no">append-toast</code> значение <code class="text-nowrap" translate="no">true</code>.</p> <h3 id="авто-скрытие" class="bv-no-focus-ring"><span class="bd-content-title">Авто-скрытие<a class="anchorjs-link" href="#авто-скрытие" aria-labelledby="авто-скрытие"></a></span></h3> <p>Измените время задержки автоматического скрытия с помощью свойства <code class="text-nowrap" translate="no">auto-hide-delay</code> (значение в миллисекундах), которое по умолчанию равно <code class="text-nowrap" translate="no">5000</code> (минимальное значение <code class="text-nowrap" translate="no">1000</code>). Или полностью отключите функцию автоматического скрытия, установив для параметра <code class="text-nowrap" translate="no">no-auto-hide</code> значение <code class="text-nowrap" translate="no">true</code>.</p> <p>Когда автоматическое скрытие включено, наведение курсора на всплывающее уведомление приостанавливает таймер автоматического скрытия. Когда вы уберете всплывающее уведомление, таймер автоматического скрытия будет возобновлен. Вы можете отключить эту функцию, установив для параметра <code class="text-nowrap" translate="no">no-hover-pause</code> значение <code class="text-nowrap" translate="no">true</code>.</p> <h3 id="кнопка-закрытия" class="bv-no-focus-ring"><span class="bd-content-title">Кнопка закрытия<a class="anchorjs-link" href="#кнопка-закрытия" aria-labelledby="кнопка-закрытия"></a></span></h3> <p>По умолчанию у тостов есть кнопка закрытия, чтобы скрыть их при использовании. Установка свойства <code class="text-nowrap" translate="no">no-close-button</code> в значение <code class="text-nowrap" translate="no">true</code> предотвратит это и создаст всплывающее уведомление без кнопки закрытия по умолчанию.</p> <p>По-прежнему можно создать пользовательскую кнопку закрытия для всплывающего уведомления, указав уникальный идентификатор и используя метод <code class="text-nowrap" translate="no">this.$bvToast.hide(id)</code>, чтобы скрыть конкретное всплывающее уведомление:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showToast&quot;</span>&gt;</span>Показать тост<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">showToast</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Use a shorter name for `this.$createElement`</span>\n        <span class="hljs-keyword">const</span> h = <span class="hljs-built_in">this</span>.$createElement\n        <span class="hljs-comment">// Create a ID with a incremented count</span>\n        <span class="hljs-keyword">const</span> id = <span class="hljs-string">`my-toast-<span class="hljs-subst">${<span class="hljs-built_in">this</span>.count++}</span>`</span>\n\n        <span class="hljs-comment">// Create the custom close button</span>\n        <span class="hljs-keyword">const</span> $closeButton = h(\n          <span class="hljs-string">&#x27;b-button&#x27;</span>,\n          {\n            <span class="hljs-attr">on</span>: { <span class="hljs-attr">click</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">this</span>.$bvToast.hide(id) }\n          },\n          <span class="hljs-string">&#x27;Close&#x27;</span>\n        )\n\n        <span class="hljs-comment">// Create the toast</span>\n        <span class="hljs-built_in">this</span>.$bvToast.toast([$closeButton], {\n          <span class="hljs-attr">id</span>: id,\n          <span class="hljs-attr">title</span>: <span class="hljs-string">`Toast <span class="hljs-subst">${<span class="hljs-built_in">this</span>.count}</span>`</span>,\n          <span class="hljs-attr">noCloseButton</span>: <span class="hljs-literal">true</span>\n        })\n      }\n    }\n }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toasts-advanced.vue --&gt;</span></pre></div><h3 id="роли-тостов" class="bv-no-focus-ring"><span class="bd-content-title">Роли тостов<a class="anchorjs-link" href="#роли-тостов" aria-labelledby="роли-тостов"></a></span></h3> <p>Тосты отображаются с атрибутом <code class="text-nowrap" translate="no">role</code> по умолчанию <code class="text-nowrap" translate="no">&#39;alert&#39;</code> и атрибутом <code class="text-nowrap" translate="no">aria-live</code> со значением <code class="text-nowrap" translate="no">&#39;assertive&#39;</code>. Для тостов, предназначенных для случайного уведомления, установите свойство <code class="text-nowrap" translate="no">is-status</code> на <code class="text-nowrap" translate="no">true</code>, что изменит атрибуты <code class="text-nowrap" translate="no">role</code> и <code class="text-nowrap" translate="no">aria-live</code> на <code class="text-nowrap" translate="no">&#39;status&#39;</code> и <code class="text-nowrap" translate="no">&#39;polite&#39;</code> соответственно.</p> <p>Для получения дополнительной информации смотрите раздел <a href="#accessibility" class="font-weight-bold">Специальные возможности</a> ниже.</p> <h3 id="ссылки" class="bv-no-focus-ring"><span class="bd-content-title">Ссылки<a class="anchorjs-link" href="#ссылки" aria-labelledby="ссылки"></a></span></h3> <p>При желании можно преобразовать тело сообщения в ссылку (<code class="text-nowrap" translate="no">&lt;a&gt;</code>) или <code class="text-nowrap" translate="no">&lt;router-link&gt;</code> (или <code class="text-nowrap" translate="no">&lt;nuxt-link&gt;</code>) с помощью свойств <code class="text-nowrap" translate="no">href</code> и <code class="text-nowrap" translate="no">to</code> соответственно. Если установлено, все тело всплывающего уведомления становится ссылкой.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toast()&quot;</span>&gt;</span>Тост с ссылкой<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">toast</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$bvToast.toast(<span class="hljs-string">`Тост со ссылкой действия`</span>, {\n          <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;#foo&#x27;</span>,\n          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Пример&#x27;</span>\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toast-link.vue --&gt;</span></pre></div><h2 id="компонент-b-toast" class="bv-no-focus-ring"><span class="bd-content-title">Компонент <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code><a class="anchorjs-link" href="#компонент-b-toast" aria-labelledby="компонент-b-toast"></a></span></h2> <p>Если у вас есть пользовательский компонент, который хотел бы отображать только одно уведомление за раз, используйте компонент <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code>. Компонент <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> можно разместить в любом месте вашего пользовательского компонента или приложения, и он не отображает элемент (они отображают узел-заполнитель комментария, который не влияет на макет).</p> <p>Тост можно сделать видимым с помощью <code class="text-nowrap" translate="no">v-model</code> (который привязан к свойству <code class="text-nowrap" translate="no">visible</code>), или показать с помощью методов экземпляра <code class="text-nowrap" translate="no">show()</code> и <code class="text-nowrap" translate="no">hide()</code> компонента, или с помощью <code class="text-nowrap" translate="no">this.$bvToast.show(id)</code> и <code class="text-nowrap" translate="no">this.$bvToast.hide(id)</code> (требуется, чтобы для компонента <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> был установлен уникальный идентификатор).</p> <p>Тосты по умолчанию будут помещаться в компонент <code class="text-nowrap" translate="no">b-toaster-top-right</code> <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code>. Тостер, указанный в свойстве <code class="text-nowrap" translate="no">toaster</code>, будет создан по запросу, если он еще не существует в документе.</p> <p>Вы можете принудительно отобразить <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> в документе, установив свойство <code class="text-nowrap" translate="no">static</code> в значение <code class="text-nowrap" translate="no">true</code>. Вам по-прежнему нужно показывать и скрывать всплывающее уведомление, но оно не будет перенесено в компонент тостера.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$bvToast.show(&#x27;my-toast&#x27;)&quot;</span>&gt;</span>Показать тост<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-toast</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-toast&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;warning&quot;</span> <span class="hljs-attr">solid</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">toast-title</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-grow-1 align-items-baseline&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-img</span> <span class="hljs-attr">blank</span> <span class="hljs-attr">blank-color</span>=<span class="hljs-string">&quot;#ff5555&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-2&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-img</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-auto&quot;</span>&gt;</span>Уведомление!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted mr-2&quot;</span>&gt;</span>42 секунды назад<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      Это содержание тоста.\n      Это кратко и по делу.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-toast</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toast-component.vue --&gt;</span></pre></div><h3 id="слоты" class="bv-no-focus-ring"><span class="bd-content-title">Слоты<a class="anchorjs-link" href="#слоты" aria-labelledby="слоты"></a></span></h3> <ul> <li><code class="text-nowrap" translate="no">toast-title</code>: Контент для замены элемента заголовка по умолчанию.</li> <li><code class="text-nowrap" translate="no">default</code>: Содержимое тела всплывающего уведомления</li> </ul> <p>Оба слота опционально имеют следующую область действия:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Метод или свойство</th> <th>Описание</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">hide()</code></td> <td>Скрывает тост при вызове. Полезно, если вы предоставляете собственную кнопку закрытия.</td> </tr> </tbody></table> </div><p>Слоты доступны только при использовании компонента <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code>.</p> <h2 id="целевой-компонент-b-toaster" class="bv-no-focus-ring"><span class="bd-content-title">Целевой компонент <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code><a class="anchorjs-link" href="#целевой-компонент-b-toaster" aria-labelledby="целевой-компонент-b-toaster"></a></span></h2> <p>Компонент <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> предоставляет контейнер, в котором будут появляться всплывающие уведомления (<em>Тостер</em>). Для тостеров требуется уникальное имя, и тосты могут быть настроены так, чтобы они отображались в тостере с конкретным именем.</p> <p>В большинстве случаев вам не нужно будет напрямую использовать этот компонент, так как <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> автоматически вставит компонент <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> (добавленный к <code class="text-nowrap" translate="no">&lt;body&gt;</code>) с запрошенным именем тостера, если таковой имеется. в документе не нашел. Но иногда вы можете захотеть явно разместить тостер в своем приложении.</p> <p><code class="text-nowrap" translate="no">name</code> тостера становится идентификатором вставленного контейнера, а также будет использоваться в качестве имени класса в отображаемом контейнере тостера.</p> <p>Позиционирование тостера и тостов внутри тостера полностью управляется классами CSS (в зависимости от названия тостера).</p> <p>Следующие «встроенные» имена тостеров (и связанные стили) определены в пользовательском SCSS BootstrapVue:</p> <ul> <li><code class="text-nowrap" translate="no">b-toaster-top-right</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-left</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-center</code></li> <li><code class="text-nowrap" translate="no">b-toaster-top-full</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-right</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-left</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-center</code></li> <li><code class="text-nowrap" translate="no">b-toaster-bottom-full</code></li> </ul> <p>Вышеупомянутые тостеры помещают всплывающие уведомления в стопку (столбчатый формат), фиксированные в области просмотра (это означает, что они всегда будут в поле зрения независимо от положения прокрутки области просмотра). Если тостов больше, чем может поместиться на экране окна просмотра, некоторые из них будут визуально скрыты за пределами экрана, пока другие всплывающие уведомления не будут закрыты/спрятаны.</p> <p><code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> по умолчанию использует тостер <code class="text-nowrap" translate="no">b-toaster-top-right</code>.</p> <p><strong>Примечания:</strong></p> <ul> <li>Если в документе уже существует <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> с таким именем (автоматически созданный <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code>, <code class="text-nowrap" translate="no">this.$bvToast.toast()</code>, либо размещенный вручную), то <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> просто отобразит пустой элемент <code class="text-nowrap" translate="no">&lt;div&gt;</code> и выдаст предупреждение консоли.</li> <li>При ручном размещении компонента <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> убедитесь, что он размещен последним элементом в нижней части корневого элемента вашего приложения, чтобы он был доступен для всех страниц вашего приложения.</li> <li>Уничтоженные тостеры будут автоматически воссозданы, если появится новый тост, предназначенный для имени тостера.</li> <li>В большинстве случаев вам не нужно вручную размещать/создавать компонент <code class="text-nowrap" translate="no">&lt;b-toaster&gt;</code> в вашем приложении, поскольку при необходимости они будут автоматически генерироваться по запросу. Но если вам нужно переопределить какие-либо настройки тостера по умолчанию, убедитесь, что вы поместили тостер в свое приложение в место, которое не будет уничтожено из-за изменений в маршруте.</li> </ul> <h2 id="расширенное-использование" class="bv-no-focus-ring"><span class="bd-content-title">Расширенное использование<a class="anchorjs-link" href="#расширенное-использование" aria-labelledby="расширенное-использование"></a></span></h2> <p>При использовании метода <code class="text-nowrap" translate="no">this.$bvToast.toast(...)</code> для создания всплывающих уведомлений вы можете захотеть, чтобы содержание всплывающего уведомления было чем-то большим, чем просто строковое сообщение. Как упоминалось в разделе <a href="#toasts-on-demand" class="font-weight-bold">Всплывающие сообщения по запросу</a> выше, вы можете передавать массивы <code class="text-nowrap" translate="no">VNodes</code> в качестве сообщения и заголовка для более сложного контента.</p> <p>Не забывайте, что содержание тостов должно быть простым и содержательным. Избегайте размещения интерактивных компонентов или элементов внутри всплывающих уведомлений, так как это может вызвать проблемы у пользователей вспомогательных технологий. Смотрите раздел <a href="#accessibility" class="font-weight-bold">Доступность</a> ниже.</p> <p>Ниже приведен пример использования метода Vue <a href="https://vuejs.org/v2/guide/render-function.html#The-Virtual-DOM" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">this.$createElement()</code></a> для создания более сложного всплывающего содержимого:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showToast&quot;</span>&gt;</span>Показать тост с кастомным контентом<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">showToast</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Use a shorter name for this.$createElement</span>\n        <span class="hljs-keyword">const</span> h = <span class="hljs-built_in">this</span>.$createElement\n        <span class="hljs-comment">// Increment the toast count</span>\n        <span class="hljs-built_in">this</span>.count++\n        <span class="hljs-comment">// Create the message</span>\n        <span class="hljs-keyword">const</span> vNodesMsg = h(\n          <span class="hljs-string">&#x27;p&#x27;</span>,\n          { <span class="hljs-attr">class</span>: [<span class="hljs-string">&#x27;text-center&#x27;</span>, <span class="hljs-string">&#x27;mb-0&#x27;</span>] },\n          [\n            h(<span class="hljs-string">&#x27;b-spinner&#x27;</span>, { <span class="hljs-attr">props</span>: { <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;grow&#x27;</span>, <span class="hljs-attr">small</span>: <span class="hljs-literal">true</span> } }),\n            <span class="hljs-string">&#x27; Flashy &#x27;</span>,\n            h(<span class="hljs-string">&#x27;strong&#x27;</span>, <span class="hljs-string">&#x27;toast&#x27;</span>),\n            <span class="hljs-string">` message #<span class="hljs-subst">${<span class="hljs-built_in">this</span>.count}</span> `</span>,\n            h(<span class="hljs-string">&#x27;b-spinner&#x27;</span>, { <span class="hljs-attr">props</span>: { <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;grow&#x27;</span>, <span class="hljs-attr">small</span>: <span class="hljs-literal">true</span> } })\n          ]\n        )\n        <span class="hljs-comment">// Create the title</span>\n        <span class="hljs-keyword">const</span> vNodesTitle = h(\n          <span class="hljs-string">&#x27;div&#x27;</span>,\n          { <span class="hljs-attr">class</span>: [<span class="hljs-string">&#x27;d-flex&#x27;</span>, <span class="hljs-string">&#x27;flex-grow-1&#x27;</span>, <span class="hljs-string">&#x27;align-items-baseline&#x27;</span>, <span class="hljs-string">&#x27;mr-2&#x27;</span>] },\n          [\n            h(<span class="hljs-string">&#x27;strong&#x27;</span>, { <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;mr-2&#x27;</span> }, <span class="hljs-string">&#x27;The Title&#x27;</span>),\n            h(<span class="hljs-string">&#x27;small&#x27;</span>, { <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;ml-auto text-italics&#x27;</span> }, <span class="hljs-string">&#x27;5 minutes ago&#x27;</span>)\n          ]\n        )\n        <span class="hljs-comment">// Pass the VNodes as an array for message and title</span>\n        <span class="hljs-built_in">this</span>.$bvToast.toast([vNodesMsg], {\n          <span class="hljs-attr">title</span>: [vNodesTitle],\n          <span class="hljs-attr">solid</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">variant</span>: <span class="hljs-string">&#x27;info&#x27;</span>\n        })\n      }\n    }\n }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- toasts-advanced.vue --&gt;</span></pre></div><h2 id="оповещения-против-тостов" class="bv-no-focus-ring"><span class="bd-content-title">Оповещения против тостов<a class="anchorjs-link" href="#оповещения-против-тостов" aria-labelledby="оповещения-против-тостов"></a></span></h2> <p>В некоторых случаях вам может понадобиться простое сообщение в стиле предупреждения (например, уведомления об использовании файлов cookie и т. д.). В этих случаях обычно лучше использовать оповещение о фиксированной позиции вместо всплывающего уведомления, применив несколько <a href="/docs/reference/utility-classes" class="font-weight-bold">служебных классов Bootstrap</a> и немного настраиваемого стиля для <a href="/docs/components/alert" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-alert&gt;</code></a>:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showBottom = !showBottom&quot;</span>&gt;</span>\n      {{ showBottom ? &#x27;Hide&#x27; : &#x27;Show&#x27; }} Fixed bottom Alert\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-alert</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;showBottom&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;position-fixed fixed-bottom m-0 rounded-0&quot;</span>\n      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;z-index: 2000;&quot;</span>\n      <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;warning&quot;</span>\n      <span class="hljs-attr">dismissible</span>\n    &gt;</span>\n      Fixed position (bottom) alert!\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-alert</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showTop = !showTop&quot;</span>&gt;</span>\n      {{ showTop ? &#x27;Hide&#x27; : &#x27;Show&#x27; }} Fixed top Alert\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-alert</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;showTop&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;position-fixed fixed-top m-0 rounded-0&quot;</span>\n      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;z-index: 2000;&quot;</span>\n      <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;success&quot;</span>\n      <span class="hljs-attr">dismissible</span>\n    &gt;</span>\n      Fixed position (top) alert!\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-alert</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">showBottom</span>: <span class="hljs-literal">false</span>,\n      <span class="hljs-attr">showTop</span>: <span class="hljs-literal">false</span>\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- fixed-position-alerts.vue --&gt;</span></pre></div><p>Мы используем класс <code class="text-nowrap" translate="no">position-fixed</code>, чтобы установить фиксированное позиционирование в окне просмотра пользователя, и либо класс <code class="text-nowrap" translate="no">fixed-bottom</code>, либо <code class="text-nowrap" translate="no">fixed-top</code>, чтобы поместить предупреждение внизу или вверху окна просмотра. Класс <code class="text-nowrap" translate="no">m-0</code> удаляет поля по умолчанию вокруг предупреждения, а <code class="text-nowrap" translate="no">rounded-0</code> удаляет закругленные углы по умолчанию. Мы также устанавливаем для <code class="text-nowrap" translate="no">z-index</code> большое значение, чтобы предупреждение отображалось поверх любого другого контента на странице (по умолчанию для <code class="text-nowrap" translate="no">fixed-top</code> и <code class="text-nowrap" translate="no">fixed-bottom</code> - <code class="text-nowrap" translate="no">1030</code>). Возможно, вам придется настроить <code class="text-nowrap" translate="no">z-index</code> для вашего конкретного макета.</p> <p>Поскольку разметка предупреждения остается в DOM, где вы разместили компонентe <code class="text-nowrap" translate="no">&lt;b-alert&gt;</code>, его последовательность вкладок (для доступа к кнопке закрытия) легко доступна для программ чтения с экрана и пользователей, использующих только клавиатуру.</p> <h2 id="доступность" class="bv-no-focus-ring"><span class="bd-content-title">Доступность<a class="anchorjs-link" href="#доступность" aria-labelledby="доступность"></a></span></h2> <p>Тосты предназначены для того, чтобы <strong>небольшие помехи</strong> вашим посетителям или пользователям, поэтому, чтобы помочь тем, у кого есть программы для чтения с экрана и аналогичные вспомогательные технологии, всплывающие уведомления заключены в область aria-live. Изменения в активных регионах (такие как внедрение/обновление компонента всплывающего уведомления) автоматически объявляются программами чтения с экрана без необходимости перемещать фокус пользователя или иным образом прерывать его. Кроме того, параметр <code class="text-nowrap" translate="no">aria-atomic=&quot;true&quot;</code> автоматически устанавливается таким образом, чтобы вся всплывающая подсказка всегда объявлялась как единая (атомарная) единица, а не сообщалось об изменениях (что может привести к проблемам, если вы обновите только часть всплывающей подсказки). содержание всплывающего уведомления или отображение того же содержимого всплывающего уведомления в более поздний момент времени).</p> <p>Если вам просто нужно, чтобы одно простое сообщение отображалось в нижней или верхней части окна пользователя, вместо этого используйте <a href="#alerts-versus-toasts" class="font-weight-bold">фиксированное положение <code class="text-nowrap" translate="no">&lt;b-alert&gt;</code></a>.</p> <h3 id="советы-по-доступности" class="bv-no-focus-ring"><span class="bd-content-title">Советы по доступности<a class="anchorjs-link" href="#советы-по-доступности" aria-labelledby="советы-по-доступности"></a></span></h3> <p>Как правило, всплывающие сообщения должны отображать некритические сообщения в одну или две строки, которые <strong>не</strong> требуют вмешательства пользователя. Без принятия дополнительных мер всплывающие уведомления могут иметь многочисленные проблемы с доступностью, которые могут повлиять как на людей с ограниченными возможностями, так и на людей без инвалидности. Следующий список, хотя и не полный, содержит общие рекомендации по использованию тостов.</p> <ul> <li>Если необходимая информация важна для процесса, т.е. для списка ошибок в форме используйте компонент <a href="/docs/components/alert" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-alert&gt;</code></a> вместо <code class="text-nowrap" translate="no">&lt;b-toast&gt;</code>.</li> <li><code class="text-nowrap" translate="no">&lt;b-toast&gt;</code> по умолчанию устанавливает атрибуты <code class="text-nowrap" translate="no">role</code> в <code class="text-nowrap" translate="no">&#39;alert&#39;</code> и <code class="text-nowrap" translate="no">aria-live</code> в <code class="text-nowrap" translate="no">&#39;assertive&#39;</code>. Если это важное сообщение, такое как ошибка, этот параметр по умолчанию является подходящим, в противном случае установите свойство <code class="text-nowrap" translate="no">is-status</code> в <code class="text-nowrap" translate="no">true</code>, что изменит атрибуты <code class="text-nowrap" translate="no">role</code> на <code class="text-nowrap" translate="no">&#39;status&#39;</code> и <code class="text-nowrap" translate="no">aria-live</code> на <code class="text-nowrap" translate="no">&#39;polite&#39;</code>.</li> <li>Избегайте всплывающих всплывающих сообщений при загрузке страницы. Выполнение неожиданных действий при загрузке страницы очень сбивает с толку пользователей программ чтения с экрана. Если всплывающее уведомление необходимо при загрузке страницы или изменении маршрута, задержите отображение всплывающего уведомления на несколько секунд, чтобы средство чтения с экрана завершило объявление информации о текущей странице без прерывания всплывающего уведомления.</li> <li>При установке параметра <code class="text-nowrap" translate="no">no-auto-hide</code> в значение <code class="text-nowrap" translate="no">true</code>, у вас должна быть кнопка закрытия, чтобы пользователи могли отклонить всплывающее уведомление. Если вы также установили свойство <code class="text-nowrap" translate="no">no-close-button</code> в значение <code class="text-nowrap" translate="no">true</code>, вы должны предоставить свою собственную кнопку закрытия или отклонить всплывающее уведомление каким-либо другим способом. Тосты имеют индекс табуляции <code class="text-nowrap" translate="no">0</code>, так что они могут быть доступны пользователям, использующим только клавиатуру.</li> <li>Избегайте запуска большого количества всплывающих уведомлений в быстрой последовательности, так как программы чтения с экрана могут прервать чтение текущего всплывающего уведомления и объявить новое всплывающее сообщение, что приведет к пропуску контекста предыдущего всплывающего уведомления.</li> <li>Для всплывающих уведомлений с длинным текстовым содержимым установите для параметра <code class="text-nowrap" translate="no">auto-hide-delay</code> большее время ожидания, чтобы у пользователей было время прочитать содержимое всплывающего уведомления. Среднестатистический человек читает около 200 слов в минуту, поэтому хорошее время для сохранения сообщения составляет 5 секунд плюс 300 дополнительных миллисекунд на слово. Самое короткое значение по умолчанию, которое следует использовать в качестве наилучшей практики, составляет 5 секунд (5000 мс). В дополнение к разумному тайм-ауту по умолчанию вы также можете позволить пользователю выбирать, как долго он хочет, чтобы тосты не спали. Большинство людей изначально понимают, быстро они или медленно читают. Наличие настройки профиля, которая является частью входа пользователя, позволит медленным читателям выбирать более длительное время, если сообщения уходят слишком быстро, а быстрым читателям выбирать короткое время, если сообщения остаются слишком долго.</li> <li>Для учета потери памяти и отвлечения внимания, а также проблем, связанных с инвалидностью, таких как СДВГ, рекомендуется создать место, где пользователи могут обращаться к списку прошлых всплывающих сообщений, которые были показаны. Желательно, чтобы этот список был сортируемым, по умолчанию в хронологическом порядке.</li> </ul> <h3 id="поддержка-программы-чтения-с-экрана-internet-explorer" class="bv-no-focus-ring"><span class="bd-content-title">Поддержка программы чтения с экрана Internet Explorer<a class="anchorjs-link" href="#поддержка-программы-чтения-с-экрана-internet-explorer" aria-labelledby="поддержка-программы-чтения-с-экрана-internet-explorer"></a></span></h3> <p>К сожалению, IE 11 при использовании с программами чтения с экрана <a href="https://github.com/nvaccess/nvda" target="_blank" rel="noopener">NVDA</a> или <a href="https://www.freedomscientific.com/products/software/jaws/" target="_blank" rel="noopener">JAWS</a> не будет правильно объявлять/озвучивать тосты, когда они появляются. Если у вас есть большая база незрячих пользователей, использующих IE 11, вы можете создать дополнительную область <code class="text-nowrap" translate="no">aria-live</code> за пределами экрана только для браузеров IE 11 (создается при загрузке страницы), где размещаются копии текста всплывающего сообщения. динамически, в дополнение к отображению тостов.</p>'}}}]);