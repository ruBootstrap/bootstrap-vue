(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{455:function(n,t){n.exports={baseTOC:{top:"#поле-ввода-формы",title:"Поле ввода формы",toc:[{href:"#тип-поля-ввода",label:"Тип поля ввода",toc:[{href:"#ввод-типа-диапазона",label:"Ввод типа диапазона"}]},{href:"#размер-контролов",label:"Размер контролов"},{href:"#контекстные-состояния",label:"Контекстные состояния",toc:[{href:"#передача-состояния-контекста-вспомогательным-технологиям-и-дальтоникам",label:"Передача состояния контекста вспомогательным технологиям и дальтоникам"},{href:"#атрибут-aria-aria-invalid",label:"Атрибут ARIA aria-invalid"}]},{href:"#поддержка-форматтера",label:"Поддержка форматтера"},{href:"#обычный-текст-только-для-чтения",label:"Обычный текст только для чтения"},{href:"#отключение-событий-колесика-мыши-для-числовых-входов",label:"Отключение событий колесика мыши для числовых входов"},{href:"#поддержка-datalist",label:"Поддержка Datalist"},{href:"#модификаторы-v-model",label:"Модификаторы v-model"},{href:"#поддержка-debounce",label:"Поддержка Debounce"},{href:"#автофокус",label:"Автофокус"},{href:"#собственные-и-пользовательские-события",label:"Собственные и пользовательские события"},{href:"#открытые-свойства-и-методы-полей-ввода",label:"Открытые свойства и методы полей ввода",toc:[{href:"#свойства-полей-ввода",label:"Свойства полей ввода"},{href:"#методы-полей-ввода",label:"Методы полей ввода"}]},{href:"#использование-html5-input-в-качестве-альтернативы",label:"Использование HTML5 &lt;input&gt; в качестве альтернативы"}]},titleLead:'<h1 id="поле-ввода-формы" class="bv-no-focus-ring"><span class="bd-content-title">Поле ввода формы</span></h1> <p class="bd-lead">Создавайте различные типы входных данных, такие как: <code class="text-nowrap" translate="no">text</code>, <code class="text-nowrap" translate="no">password</code>, <code class="text-nowrap" translate="no">number</code>, <code class="text-nowrap" translate="no">url</code>, <code class="text-nowrap" translate="no">email</code>, <code class="text-nowrap" translate="no">search</code>, <code class="text-nowrap" translate="no">range</code>, <code class="text-nowrap" translate="no">date</code> и другие.</p>',body:'<div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Введите ваше имя&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Значение: {{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input.vue --&gt;</span></pre></div><h2 id="тип-поля-ввода" class="bv-no-focus-ring"><span class="bd-content-title">Тип поля ввода<a class="anchorjs-link" href="#тип-поля-ввода" aria-labelledby="тип-поля-ввода"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code> по умолчанию используется для ввода <code class="text-nowrap" translate="no">text</code>, но вы можете установить для свойства <code class="text-nowrap" translate="no">type</code> один из поддерживаемых типов HTML5 собственного браузера: <code class="text-nowrap" translate="no">text</code>, <code class="text-nowrap" translate="no">password</code>, <code class="text-nowrap" translate="no">email</code>, <code class="text-nowrap" translate="no">number</code>, <code class="text-nowrap" translate="no">url</code>, <code class="text-nowrap" translate="no">tel</code>, <code class="text-nowrap" translate="no">search</code>, <code class="text-nowrap" translate="no">date</code>, <code class="text-nowrap" translate="no">datetime</code>, <code class="text-nowrap" translate="no">datetime-local</code>, <code class="text-nowrap" translate="no">month</code>, <code class="text-nowrap" translate="no">week</code>, <code class="text-nowrap" translate="no">time</code>, <code class="text-nowrap" translate="no">range</code>, или <code class="text-nowrap" translate="no">color</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;type in types&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;type&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">:for</span>=<span class="hljs-string">&quot;`type-${type}`&quot;</span>&gt;</span>Тип <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>{{ type }}<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;`type-${type}`&quot;</span> <span class="hljs-attr">:type</span>=<span class="hljs-string">&quot;type&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">types</span>: [\n          <span class="hljs-string">&#x27;text&#x27;</span>,\n          <span class="hljs-string">&#x27;number&#x27;</span>,\n          <span class="hljs-string">&#x27;email&#x27;</span>,\n          <span class="hljs-string">&#x27;password&#x27;</span>,\n          <span class="hljs-string">&#x27;search&#x27;</span>,\n          <span class="hljs-string">&#x27;url&#x27;</span>,\n          <span class="hljs-string">&#x27;tel&#x27;</span>,\n          <span class="hljs-string">&#x27;date&#x27;</span>,\n          <span class="hljs-string">&#x27;time&#x27;</span>,\n          <span class="hljs-string">&#x27;range&#x27;</span>,\n          <span class="hljs-string">&#x27;color&#x27;</span>\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-types.vue --&gt;</span></pre></div><p>Если для свойства <code class="text-nowrap" translate="no">type</code> задан неподдерживаемый тип ввода (смотрите выше), будет отображен ввод <code class="text-nowrap" translate="no">text</code> и будет выдано предупреждение консоли.</p> <p><strong>Предостережения с типами ввода:</strong></p> <ul> <li>Не все браузеры поддерживают все типы ввода, и некоторые типы не отображаются в одном и том же формате в разных типах/версиях браузеров. Смотрите <a href="https://caniuse.com/?search=input" target="_blank" rel="noopener">Can I use</a>.</li> <li>Браузеры, которые не поддерживают конкретный тип, вернутся к типу ввода <code class="text-nowrap" translate="no">text</code> (даже если отображаемая разметка атрибута <code class="text-nowrap" translate="no">type</code> показывает запрошенный тип).</li> <li>Тестирование не проводится, чтобы узнать, поддерживается ли запрашиваемый тип ввода браузером.</li> <li>Chrome потерял поддержку <code class="text-nowrap" translate="no">datetime</code> в версии 26, Opera в версии 15, а Safari в iOS 7. Вместо использования <code class="text-nowrap" translate="no">datetime</code>, поскольку поддержка должна быть прекращена, используйте <code class="text-nowrap" translate="no">date</code> и <code class="text-nowrap" translate="no">time</code> как два отдельных входа.</li> <li>Вводы <code class="text-nowrap" translate="no">date</code> и <code class="text-nowrap" translate="no">time</code> являются собственными типами браузера и не являются настраиваемым средством выбора даты/времени.</li> <li>Для входных данных в стиле даты и времени, если они поддерживаются, отображаемое значение в графическом интерфейсе пользователя может отличаться от того, что возвращается его значением (т. е. порядок год-месяц-дата).</li> <li>Независимо от типа ввода значение <strong>всегда</strong> возвращается в виде строкового представления.</li> <li><code class="text-nowrap" translate="no">v-model.lazy</code> не поддерживается <code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code> (ни каким-либо пользовательским компонентом Vue). Вместо этого используйте опцию <code class="text-nowrap" translate="no">lazy</code>.</li> <li>Модификаторы <code class="text-nowrap" translate="no">v-model</code>, <code class="text-nowrap" translate="no">.number</code> и <code class="text-nowrap" translate="no">.trim</code> могут вызывать неожиданные скачки курсора, когда пользователь вводит текст (это проблема Vue <code class="text-nowrap" translate="no">v-model</code> на пользовательских компонентах). <em>Избегайте использования этих модификаторов</em>. Вместо этого используйте свойства <code class="text-nowrap" translate="no">number</code> или <code class="text-nowrap" translate="no">trim</code>.</li> <li>Более старая версия Firefox может не поддерживать <code class="text-nowrap" translate="no">readonly</code> для входных данных типа <code class="text-nowrap" translate="no">range</code>.</li> <li>Типы ввода, которые не поддерживают <code class="text-nowrap" translate="no">min</code>, <code class="text-nowrap" translate="no">max</code> и <code class="text-nowrap" translate="no">step</code> (т.е. <code class="text-nowrap" translate="no">text</code>, <code class="text-nowrap" translate="no">password</code>, <code class="text-nowrap" translate="no">tel</code>, <code class="text-nowrap" translate="no">email</code>, <code class="text-nowrap" translate="no">url</code> и т. д.) будут игнорировать эти значения (хотя они все равно будут отображаться во входной разметке), если указаны значения.</li> </ul> <p><strong>Предостережения в отношении интеллектуального ввода текста и ввода композиции IME:</strong></p> <ul> <li>При использовании слов с автоматическим предложением интеллектуального текста, <code class="text-nowrap" translate="no">v-model</code> не будет обновляться до тех пор, пока автоматически предложенное слово не будет выбрано (или не будет введен пробел). Если автоматически предлагаемое слово не выбрано, v-model будет обновляться с текущим <em>отображаемым текстом</em> ввода, когда ввод размыт.</li> <li>При использовании композиции IME (например, китайский, японский и т. д.) <code class="text-nowrap" translate="no">v-model</code> не будет обновляться, пока композиция IME не будет завершена.</li> </ul> <h3 id="ввод-типа-диапазона" class="bv-no-focus-ring"><span class="bd-content-title">Ввод типа диапазона<a class="anchorjs-link" href="#ввод-типа-диапазона" aria-labelledby="ввод-типа-диапазона"></a></span></h3> <p>Входные данные с типом <code class="text-nowrap" translate="no">range</code> отображаются с использованием класса Bootstrap v4 <code class="text-nowrap" translate="no">.custom-range</code>. Дорожка (фон) и ползунок (значение) имеют одинаковый стиль во всех браузерах.</p> <p>Входы диапазона имеют неявные значения для <code class="text-nowrap" translate="no">min</code> и <code class="text-nowrap" translate="no">max</code>, равные <code class="text-nowrap" translate="no">0</code> и <code class="text-nowrap" translate="no">100</code> соответственно. Вы можете указать новые значения для тех, кто использует свойства <code class="text-nowrap" translate="no">min</code> и <code class="text-nowrap" translate="no">max</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;range-1&quot;</span>&gt;</span>Пример диапазона с минимальным и максимальным<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;range-1&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Значение: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;2&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-range.vue --&gt;</span></pre></div><p>По умолчанию входные данные диапазона «привязываются» к целочисленным значениям. Чтобы изменить это, вы можете указать значение шага <code class="text-nowrap" translate="no">step</code>. В приведенном ниже примере мы удваиваем количество шагов, используя <code class="text-nowrap" translate="no">step=&quot;0.5&quot;</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;range-2&quot;</span>&gt;</span>Пример диапазона со значением шага<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;range-2&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;0.5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Значение: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;2&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-range-step.vue --&gt;</span></pre></div><p><strong>Примечание:</strong> Входные значения диапазона (как и все типы входных данных) возвращают свое значение в виде строки. Возможно, вам потребуется преобразовать значение в собственное число с помощью <code class="text-nowrap" translate="no">Number(value)</code>, <code class="text-nowrap" translate="no">parseInt(value, 10)</code>, <code class="text-nowrap" translate="no">parseFloat(value)</code> или использовать свойство <code class="text-nowrap" translate="no">number</code>.</p> <p><strong>Примечание:</strong> CSS Bootstrap v4 не включает стили для входных данных диапазона внутри групп ввода, а также стиль проверки для входных данных диапазона. Однако BootstrapVue включает настраиваемые стили для обработки этих ситуаций, пока они не будут включены в Bootstrap v4.</p> <h2 id="размер-контролов" class="bv-no-focus-ring"><span class="bd-content-title">Размер контролов<a class="anchorjs-link" href="#размер-контролов" aria-labelledby="размер-контролов"></a></span></h2> <p>Установите высоту, используя свойство <code class="text-nowrap" translate="no">size</code> на <code class="text-nowrap" translate="no">sm</code> или <code class="text-nowrap" translate="no">lg</code> для малых или больших соответственно.</p> <p>Чтобы контролировать ширину, поместите ввод внутри стандартного столбца сетки Bootstrap.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;input-small&quot;</span>&gt;</span>Маленький:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-small&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Введите ваше имя&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;input-default&quot;</span>&gt;</span>По умолчанию:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-default&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Введите ваше имя&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;input-large&quot;</span>&gt;</span>Большой:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-large&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Введите ваше имя&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-size.vue --&gt;</span></pre></div><p><strong>Примечание:</strong> Тип ввода <code class="text-nowrap" translate="no">range</code> в настоящее время не поддерживает изменение размера элемента управления, если он не помещен в <code class="text-nowrap" translate="no">&lt;b-input-group&gt;</code>, у которого установлено его свойство <code class="text-nowrap" translate="no">size</code>.</p> <p><strong>Примечание:</strong> Нативный атрибут HTML <code class="text-nowrap" translate="no">size</code> поля ввода <code class="text-nowrap" translate="no">&lt;input&gt;</code> (который устанавливает горизонтальную ширину для <code class="text-nowrap" translate="no">&lt;input&gt;</code> в символах) не поддерживается. Используйте стили, служебные классы или строки макета (<code class="text-nowrap" translate="no">&lt;b-row&gt;</code>) и столбцы (<code class="text-nowrap" translate="no">&lt;b-col&gt;</code>), чтобы установить желаемую ширину.</p> <h2 id="контекстные-состояния" class="bv-no-focus-ring"><span class="bd-content-title">Контекстные состояния<a class="anchorjs-link" href="#контекстные-состояния" aria-labelledby="контекстные-состояния"></a></span></h2> <p>Bootstrap включает стили проверки правильности <code class="text-nowrap" translate="no">valid</code> и недопустимости <code class="text-nowrap" translate="no">invalid</code> состояний для большинства элементов управления формой.</p> <p>Вообще говоря, вы захотите использовать определенное состояние для определенных типов обратной связи:</p> <ul> <li><code class="text-nowrap" translate="no">false</code> (обозначает недопустимое состояние) отлично подходит, когда есть блокирующее или обязательное поле. Пользователь должен правильно заполнить это поле, чтобы отправить форму.</li> <li><code class="text-nowrap" translate="no">true</code> (обозначает действительное состояние) идеально подходит для ситуаций, когда у вас есть проверка по каждому полю во всей форме и вы хотите поощрить пользователя через остальные поля.</li> <li><code class="text-nowrap" translate="no">null</code> Не отображает состояние проверки (ни действительное, ни недействительное)</li> </ul> <p>Чтобы применить одну из иконок контекстного состояния к <code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code>, установите для свойства <code class="text-nowrap" translate="no">state</code> значение <code class="text-nowrap" translate="no">false</code> (для недопустимого), <code class="text-nowrap" translate="no">true</code> (для действительного) или <code class="text-nowrap" translate="no">null</code> (состояние проверки отсутствует).</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;input-none&quot;</span>&gt;</span>Без состояния:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-none&quot;</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;null&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Без валидации&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;input-valid&quot;</span>&gt;</span>Валидное состояние:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-valid&quot;</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Корректный ввод&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-1&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;input-invalid&quot;</span>&gt;</span>Невалидное состояние:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-invalid&quot;</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Некорректный ввод&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-states.vue --&gt;</span></pre></div><p><strong>Живой пример</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;group&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;input-live&quot;</span>&gt;</span>Имя:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-live&quot;</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;nameState&quot;</span>\n      <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;input-live-help input-live-feedback&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Введите ваше имя&quot;</span>\n      <span class="hljs-attr">trim</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Это будет показано только в том случае, если предыдущий ввод имеет недопустимое состояние --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-invalid-feedback</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-live-feedback&quot;</span>&gt;</span>\n      Введите не менее 3 букв\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-invalid-feedback</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Это текстовый блок формы (ранее известный как блок справки) --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-text</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-live-help&quot;</span>&gt;</span>Ваше полное имя.<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-text</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">nameState</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.length &gt; <span class="hljs-number">2</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-states-feedback.vue --&gt;</span></pre></div><p class="bd-lead"><strong>Совет:</strong> Используйте компонент <a href="/docs/components/form-group" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-group&gt;</code></a> для автоматического создания разметки, подобной описанной выше.</p> <h3 id="передача-состояния-контекста-вспомогательным-технологиям-и-дальтоникам" class="bv-no-focus-ring"><span class="bd-content-title">Передача состояния контекста вспомогательным технологиям и дальтоникам<a class="anchorjs-link" href="#передача-состояния-контекста-вспомогательным-технологиям-и-дальтоникам" aria-labelledby="передача-состояния-контекста-вспомогательным-технологиям-и-дальтоникам"></a></span></h3> <p>Использование этих контекстных состояний для обозначения состояния элемента управления формы обеспечивает только визуальную цветовую индикацию, которая не будет передана пользователям вспомогательных технологий, таких как программы чтения с экрана, или пользователям с дальтонизмом.</p> <p>Убедитесь, что также имеется альтернативная индикация состояния. Например, вы можете включить подсказку о состоянии в самом тексте <code class="text-nowrap" translate="no">&lt;label&gt;</code> элемента управления формой или предоставив дополнительный текстовый блок справки.</p> <h3 id="атрибут-aria-aria-invalid" class="bv-no-focus-ring"><span class="bd-content-title">Атрибут ARIA <code class="text-nowrap" translate="no">aria-invalid</code><a class="anchorjs-link" href="#атрибут-aria-aria-invalid" aria-labelledby="атрибут-aria-aria-invalid"></a></span></h3> <p>Специально для вспомогательных технологий недопустимым элементам управления формой также может быть назначен атрибут <code class="text-nowrap" translate="no">aria-invalid=&quot;true&quot;</code>.</p> <p>Когда <code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code> имеет недопустимое контекстное состояние (т. е. состояние <code class="text-nowrap" translate="no">false</code>), вы также можете захотеть установить для свойства <code class="text-nowrap" translate="no">aria-invalid</code> для <code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code> значение <code class="text-nowrap" translate="no">true</code> или к одному из поддерживаемых значений:</p> <ul> <li><code class="text-nowrap" translate="no">false</code>: Сообщает, что ошибок не обнаружено (по умолчанию)</li> <li><code class="text-nowrap" translate="no">true</code> (или <code class="text-nowrap" translate="no">&#39;true&#39;</code>): Сообщает, что значение не прошло проверку.</li> <li><code class="text-nowrap" translate="no">&#39;grammar&#39;</code> Сообщает, что была обнаружена грамматическая ошибка.</li> <li><code class="text-nowrap" translate="no">&#39;spelling&#39;</code> Сообщает, что была обнаружена орфографическая ошибка.</li> </ul> <p>Если <code class="text-nowrap" translate="no">aria-invalid</code> не задано явно, а <code class="text-nowrap" translate="no">state</code> имеет значение <code class="text-nowrap" translate="no">false</code>, тогда атрибуту <code class="text-nowrap" translate="no">aria-invalid</code> на входе автоматически устанавливается значение <code class="text-nowrap" translate="no">&#39;true&#39;</code>;</p> <h2 id="поддержка-форматтера" class="bv-no-focus-ring"><span class="bd-content-title">Поддержка форматтера<a class="anchorjs-link" href="#поддержка-форматтера" aria-labelledby="поддержка-форматтера"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code> опционально поддерживает форматирование, передавая ссылку на функцию в свойство <code class="text-nowrap" translate="no">formatter</code>.</p> <p>Форматирование (когда предоставляется функция форматирования) происходит, когда срабатывают собственные события элемента управления <code class="text-nowrap" translate="no">input</code> и <code class="text-nowrap" translate="no">change</code>. Вы можете использовать логическое свойство <code class="text-nowrap" translate="no">lazy-formatter</code>, чтобы ограничить вызов функции форматирования для собственного события элемента управления <code class="text-nowrap" translate="no">blur</code>.</p> <p>Функция <code class="text-nowrap" translate="no">formatter</code> получает два аргумента: необработанное значение элемента <code class="text-nowrap" translate="no">value</code> и нативный объект <code class="text-nowrap" translate="no">event</code>, который инициировал форматирование (если доступно).</p> <p>Функция <code class="text-nowrap" translate="no">formatter</code> должна возвращать отформатированное значение как <em>строка</em>.</p> <p>Форматирование не происходит, если не предоставлено средство форматирования <code class="text-nowrap" translate="no">formatter</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Ввод текста с помощью средства форматирования (при вводе)&quot;</span>\n      <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input-formatter&quot;</span>\n      <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Мы мгновенно переведем ваше имя в нижний регистр&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-formatter&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text1&quot;</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Введите ваше имя&quot;</span>\n        <span class="hljs-attr">:formatter</span>=<span class="hljs-string">&quot;formatter&quot;</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Значение:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> {{ text1 }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Ввод текста с отложенным форматированием (при размытии)&quot;</span>\n      <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input-lazy&quot;</span>\n      <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Этот немного отложен!&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-lazy&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text2&quot;</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Введите ваше имя&quot;</span>\n        <span class="hljs-attr">lazy-formatter</span>\n        <span class="hljs-attr">:formatter</span>=<span class="hljs-string">&quot;formatter&quot;</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Значение:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> {{ text2 }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">text1</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">text2</span>: <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">formatter</span>(<span class="hljs-params">value</span>)</span> {\n        <span class="hljs-keyword">return</span> value.toLowerCase()\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-formatter.vue --&gt;</span></pre></div><p><strong>Примечание:</strong> При использовании ввода, не похожего на текст (например, <code class="text-nowrap" translate="no">color</code>, <code class="text-nowrap" translate="no">range</code>, <code class="text-nowrap" translate="no">date</code>, <code class="text-nowrap" translate="no">number</code>, <code class="text-nowrap" translate="no">email</code> и т. д.), убедитесь, что функция форматирования возвращает значение в ожидаемый формат (<code class="text-nowrap" translate="no">date</code> -&gt; &#39;2000-06-01&#39;, <code class="text-nowrap" translate="no">color</code> -&gt; &#39;#ff0000&#39;, и т. д.) для типа ввода. Средство форматирования <strong>должно</strong> возвращать значение как <em>строка</em>.</p> <p><strong>Примечание:</strong> При неотложенном форматировании, если курсор не находится в конце входного значения, он может переместиться в конец <em>после</em> ввода символа. Вы можете использовать предоставленный объект события и <code class="text-nowrap" translate="no">event.target</code> для доступа к собственным методам выбора и свойствам ввода, чтобы контролировать, где находится точка вставки. Это оставлено читателю в качестве упражнения.</p> <h2 id="обычный-текст-только-для-чтения" class="bv-no-focus-ring"><span class="bd-content-title">Обычный текст только для чтения<a class="anchorjs-link" href="#обычный-текст-только-для-чтения" aria-labelledby="обычный-текст-только-для-чтения"></a></span></h2> <p>Если вы хотите, чтобы элементы <code class="text-nowrap" translate="no">&lt;b-form-input readonly&gt;</code> в вашей форме были стилизованы как простой текст, установите свойство <code class="text-nowrap" translate="no">plaintext</code> (нет необходимости устанавливать <code class="text-nowrap" translate="no">readonly</code>), чтобы удалить стиль поля формы по умолчанию и сохранить правильный поля и отступы.</p> <p>Опция <code class="text-nowrap" translate="no">plaintext</code> не поддерживается типами ввода <code class="text-nowrap" translate="no">color</code> или <code class="text-nowrap" translate="no">range</code>.</p> <h2 id="отключение-событий-колесика-мыши-для-числовых-входов" class="bv-no-focus-ring"><span class="bd-content-title">Отключение событий колесика мыши для числовых входов<a class="anchorjs-link" href="#отключение-событий-колесика-мыши-для-числовых-входов" aria-labelledby="отключение-событий-колесика-мыши-для-числовых-входов"></a></span></h2> <p>В некоторых браузерах прокрутка колесика мыши при фокусировке числового ввода будет увеличивать или уменьшать значение ввода. Чтобы отключить эту функцию браузера, просто установите для свойства <code class="text-nowrap" translate="no">no-wheel</code> значение <code class="text-nowrap" translate="no">true</code>.</p> <h2 id="поддержка-datalist" class="bv-no-focus-ring"><span class="bd-content-title">Поддержка Datalist<a class="anchorjs-link" href="#поддержка-datalist" aria-labelledby="поддержка-datalist"></a></span></h2> <p>Списки данных - это собственный HTML-тег <code class="text-nowrap" translate="no">&lt;datalist&gt;</code>, который содержит список тегов <code class="text-nowrap" translate="no">&lt;option&gt;</code>. Путем присвоения идентификатора тегу datalist список может быть ссылками из текстового ввода путем добавления атрибута <code class="text-nowrap" translate="no">list</code>.</p> <p>Это придает вводу поведение поля со списком или автозаполнения, позволяя выбирать существующие значения или вводить новые значения.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;my-list-id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-list-id&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>Ручной вариант<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;size in sizes&quot;</span>&gt;</span>{{ size }}<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">sizes</span>: [<span class="hljs-string">&#x27;Small&#x27;</span>, <span class="hljs-string">&#x27;Medium&#x27;</span>, <span class="hljs-string">&#x27;Large&#x27;</span>, <span class="hljs-string">&#x27;Extra Large&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-datalist.vue --&gt;</span></pre></div><p>BootstrapVue предоставляет вспомогательный компонент формы <a href="/docs/components/form/#datalist-helper" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-datalist&gt;</code></a> для быстрого создания <code class="text-nowrap" translate="no">&lt;datalist&gt;</code> из массива параметров.</p> <p><strong>Примечания:</strong></p> <ul> <li>Списки данных работают вместе со встроенной функцией автозаполнения браузера, сначала отображая опции списка данных, а затем опции автозаполнения. Чтобы отображать только параметры списка данных, установите <code class="text-nowrap" translate="no">autocomplete=&quot;off&quot;</code> в <code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code>.</li> <li>Списки данных <strong>нельзя</strong> применять к полям ввода с типом <code class="text-nowrap" translate="no">password</code>, <code class="text-nowrap" translate="no">range</code> или <code class="text-nowrap" translate="no">color</code>.</li> <li>Не все браузеры полностью поддерживают <code class="text-nowrap" translate="no">&lt;datalist&gt;</code>, и реализации могут содержать ошибки. Рекомендуется рассматривать списки данных как расширение и не полагаться на них в настоящее время. Проверьте <a href="https://caniuse.com/datalist" target="_blank" rel="noopener">Can I use</a> для получения полной информации о поддержке во всех браузерах.</li> </ul> <h2 id="модификаторы-v-model" class="bv-no-focus-ring"><span class="bd-content-title">Модификаторы <code class="text-nowrap" translate="no">v-model</code><a class="anchorjs-link" href="#модификаторы-v-model" aria-labelledby="модификаторы-v-model"></a></span></h2> <p>Vue официально не поддерживает модификаторы <code class="text-nowrap" translate="no">.lazy</code>, <code class="text-nowrap" translate="no">.trim</code> и <code class="text-nowrap" translate="no">.number</code> в <code class="text-nowrap" translate="no">v-model</code> входных данных на основе настраиваемых компонентов и может создавать неудобства для пользователей. Избегайте использования собственных модификаторов Vue.</p> <p>Чтобы обойти это, в <code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code> есть три логических свойства <code class="text-nowrap" translate="no">trim</code>, <code class="text-nowrap" translate="no">number</code>и <code class="text-nowrap" translate="no">lazy</code>, которые имитируют нативные модификаторы <code class="text-nowrap" translate="no">v-model</code> Vue: <code class="text-nowrap" translate="no">.trim</code> и <code class="text-nowrap" translate="no">.number</code> и <code class="text-nowrap" translate="no">.lazy</code> соответственно. Свойство <code class="text-nowrap" translate="no">lazy</code> будет обновлять v-model при событиях <code class="text-nowrap" translate="no">change</code>/<code class="text-nowrap" translate="no">blur</code>.</p> <p><strong>Примечания:</strong></p> <ul> <li>Свойство <code class="text-nowrap" translate="no">number</code> имеет приоритет перед свойством <code class="text-nowrap" translate="no">trim</code> (то есть <code class="text-nowrap" translate="no">trim</code> не будет иметь никакого эффекта, если установлено <code class="text-nowrap" translate="no">number</code>).</li> <li>При использовании свойства <code class="text-nowrap" translate="no">number</code>, и если значение может быть проанализировано как число (через <code class="text-nowrap" translate="no">parseFloat</code>), оно вернет значение типа <code class="text-nowrap" translate="no">Number</code> в <code class="text-nowrap" translate="no">v-model</code>, в противном случае возвращается исходное входное значение как тип <code class="text-nowrap" translate="no">String</code>. Это то же самое поведение, что и нативный модификатор <code class="text-nowrap" translate="no">.number</code>.</li> <li>Свойства модификаторов <code class="text-nowrap" translate="no">trim</code> и <code class="text-nowrap" translate="no">number</code> не влияют на значение, возвращаемое событиями <code class="text-nowrap" translate="no">input</code> или <code class="text-nowrap" translate="no">change</code>. Эти события всегда будут возвращать строковое значение содержимого <code class="text-nowrap" translate="no">&lt;textarea&gt;</code> после необязательного форматирования (которое может не соответствовать значению, возвращаемому через событие <code class="text-nowrap" translate="no">update</code> <code class="text-nowrap" translate="no">v-model</code>, которое обрабатывает модификаторы).</li> </ul> <h2 id="поддержка-debounce" class="bv-no-focus-ring"><span class="bd-content-title">Поддержка Debounce<a class="anchorjs-link" href="#поддержка-debounce" aria-labelledby="поддержка-debounce"></a></span></h2> <p>В качестве альтернативы свойства модификатора <code class="text-nowrap" translate="no">lazy</code>, <code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code> опционально поддерживает отладку пользовательского ввода, обновляя <code class="text-nowrap" translate="no">v-model</code> после периода простоя с момента, когда последний символ был введен пользователем ( или происходит событие <code class="text-nowrap" translate="no">change</code>). Если пользователь вводит новый символ (или удаляет символы) до истечения тайм-аута простоя, тайм-аут запускается повторно.</p> <p>Чтобы включить debouncing, установите для свойства <code class="text-nowrap" translate="no">debounce</code> любое целое число больше нуля. Значение указывается в миллисекундах. Установка <code class="text-nowrap" translate="no">debounce</code> на <code class="text-nowrap" translate="no">0</code> отключит debouncing.</p> <p>Примечание: устранение неполадок <em>не</em> произойдет, если установлено свойство <code class="text-nowrap" translate="no">lazy</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">debounce</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Значение: &quot;{{ value }}&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-debounce.vue --&gt;</span></pre></div><h2 id="автофокус" class="bv-no-focus-ring"><span class="bd-content-title">Автофокус<a class="anchorjs-link" href="#автофокус" aria-labelledby="автофокус"></a></span></h2> <p>Когда свойство <code class="text-nowrap" translate="no">autofocus</code> установлено, вход будет автоматически сфокусирован, когда он вставлен (т.е. <strong>смонтирован</strong>) в документ, или повторно активирован, когда он находится внутри компонента Vue <code class="text-nowrap" translate="no">&lt;keep-alive&gt;</code>. Обратите внимание, что это свойство <strong>не</strong> устанавливает атрибут <code class="text-nowrap" translate="no">autofocus</code> на вводе и не может определить, когда ввод становится видимым.</p> <h2 id="собственные-и-пользовательские-события" class="bv-no-focus-ring"><span class="bd-content-title">Собственные и пользовательские события<a class="anchorjs-link" href="#собственные-и-пользовательские-события" aria-labelledby="собственные-и-пользовательские-события"></a></span></h2> <p>Поддерживаются все собственные события (кроме пользовательских событий <code class="text-nowrap" translate="no">input</code> и <code class="text-nowrap" translate="no">change</code>) без модификатора <code class="text-nowrap" translate="no">.native</code>.</p> <p>Пользовательские события <code class="text-nowrap" translate="no">input</code> и <code class="text-nowrap" translate="no">change</code> получают единственный аргумент текущего значения <code class="text-nowrap" translate="no">value</code> (после применения любого форматирования) и запускаются при взаимодействии с пользователем.</p> <p>Пользовательскому событию <code class="text-nowrap" translate="no">update</code> передается входное значение, и оно генерируется всякий раз, когда <code class="text-nowrap" translate="no">v-model</code> нуждается в обновлении (оно генерируется перед <code class="text-nowrap" translate="no">input</code>, <code class="text-nowrap" translate="no">change</code> и <code class="text-nowrap" translate="no">blur</code> по мере необходимости).</p> <p>Вы всегда можете получить доступ к собственным событиям <code class="text-nowrap" translate="no">input</code> и <code class="text-nowrap" translate="no">change</code>, используя модификатор <code class="text-nowrap" translate="no">.native</code>.</p> <h2 id="открытые-свойства-и-методы-полей-ввода" class="bv-no-focus-ring"><span class="bd-content-title">Открытые свойства и методы полей ввода<a class="anchorjs-link" href="#открытые-свойства-и-методы-полей-ввода" aria-labelledby="открытые-свойства-и-методы-полей-ввода"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-form-input&gt;</code> предоставляет несколько свойств и методов встроенного элемента ввода в ссылке на компонент (т. е. присваивает <code class="text-nowrap" translate="no">ref</code> вашему <code class="text-nowrap" translate="no">&lt;b-form-input ref=&quot;foo&quot; ...&gt;</code> и используйте <code class="text-nowrap" translate="no">this.$refs[&#39;foo&#39;].propertyName</code> или <code class="text-nowrap" translate="no">this.$refs[&#39;foo&#39;].methodName(...)</code>).</p> <h3 id="свойства-полей-ввода" class="bv-no-focus-ring"><span class="bd-content-title">Свойства полей ввода<a class="anchorjs-link" href="#свойства-полей-ввода" aria-labelledby="свойства-полей-ввода"></a></span></h3> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Свойство</th> <th>Примечания</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">.selectionStart</code></td> <td>Чтение/Запись</td> </tr> <tr> <td><code class="text-nowrap" translate="no">.selectionEnd</code></td> <td>Чтение/Запись</td> </tr> <tr> <td><code class="text-nowrap" translate="no">.selectionDirection</code></td> <td>Чтение/Запись</td> </tr> <tr> <td><code class="text-nowrap" translate="no">.validity</code></td> <td>Только чтение</td> </tr> <tr> <td><code class="text-nowrap" translate="no">.validationMessage</code></td> <td>Только чтение</td> </tr> <tr> <td><code class="text-nowrap" translate="no">.willValidate</code></td> <td>Только чтение</td> </tr> </tbody></table> </div><h3 id="методы-полей-ввода" class="bv-no-focus-ring"><span class="bd-content-title">Методы полей ввода<a class="anchorjs-link" href="#методы-полей-ввода" aria-labelledby="методы-полей-ввода"></a></span></h3> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Метод</th> <th>Примечания</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">.focus()</code></td> <td>Фокус на поле ввода</td> </tr> <tr> <td><code class="text-nowrap" translate="no">.blur()</code></td> <td>Убрать фокус с ввода</td> </tr> <tr> <td><code class="text-nowrap" translate="no">.select()</code></td> <td>Выбирает весь текст во вводе</td> </tr> <tr> <td><code class="text-nowrap" translate="no">.setSelectionRange()</code></td> <td></td> </tr> <tr> <td><code class="text-nowrap" translate="no">.setRangeText()</code></td> <td></td> </tr> <tr> <td><code class="text-nowrap" translate="no">.setCustomValidity()</code></td> <td></td> </tr> <tr> <td><code class="text-nowrap" translate="no">.checkValidity()</code></td> <td></td> </tr> <tr> <td><code class="text-nowrap" translate="no">.reportValidity()</code></td> <td></td> </tr> </tbody></table> </div><p>Обратитесь к <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement</a> для получения дополнительной информации об этих методах и свойствах. Поддержка будет зависеть от типа ввода.</p> <h2 id="использование-html5-input-в-качестве-альтернативы" class="bv-no-focus-ring"><span class="bd-content-title">Использование HTML5 <code class="text-nowrap" translate="no">&lt;input&gt;</code> в качестве альтернативы<a class="anchorjs-link" href="#использование-html5-input-в-качестве-альтернативы" aria-labelledby="использование-html5-input-в-качестве-альтернативы"></a></span></h2> <p>Если вам просто нужен простой ввод с базовым стилем Bootstrap, вы можете просто использовать следующее:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Значение: &quot;{{ value }}&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- native-input.vue --&gt;</span></pre></div>'}}}]);