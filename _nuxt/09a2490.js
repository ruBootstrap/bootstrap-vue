(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{533:function(t,e){t.exports={baseTOC:{top:"#form-file",title:"Form File",toc:[{href:"#single-file-default",label:"Single file (default)"},{href:"#multiple-files",label:"Multiple files"},{href:"#directory-mode",label:"Directory mode"},{href:"#drag-and-drop-support",label:"Drag and Drop support"},{href:"#limiting-to-certain-file-types",label:"Limiting to certain file types"},{href:"#customizing",label:"Customizing",toc:[{href:"#control-sizing",label:"Control sizing"},{href:"#customize-the-placeholder-text",label:"Customize the placeholder text"},{href:"#customize-browse-button-label",label:"Customize browse button label"},{href:"#file-name-formatter-function",label:"File name formatter function"},{href:"#file-name-formatting-via-scoped-slot",label:"File name formatting via scoped slot"}]},{href:"#non-custom-file-input",label:"Non custom file input"},{href:"#contextual-state-feedback",label:"Contextual state feedback"},{href:"#autofocus",label:"Autofocus"},{href:"#accessibility",label:"Accessibility"},{href:"#clearing-the-file-selection",label:"Clearing the file selection"},{href:"#implementation-notes",label:"Implementation notes"}]},titleLead:'<h1 id="form-file" class="bv-no-focus-ring"><span class="bd-content-title">Form File</span></h1> <p class="bd-lead">Customized, cross-browser consistent, file input control that supports single file, multiple files, and directory upload (for browsers that support directory mode).</p>',body:'<div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Styled --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;file1&quot;</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;Boolean(file1)&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Choose a file or drop it here...&quot;</span>\n      <span class="hljs-attr">drop-placeholder</span>=<span class="hljs-string">&quot;Drop file here...&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected file: {{ file1 ? file1.name : &#x27;&#x27; }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Plain mode --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;file2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span> <span class="hljs-attr">plain</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected file: {{ file2 ? file2.name : &#x27;&#x27; }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">file1</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">file2</span>: <span class="hljs-literal">null</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-file.vue --&gt;</span></pre></div><p>For cross browser consistency, <code class="text-nowrap" translate="no">&lt;b-form-file&gt;</code> defaults to the Bootstrap custom file input to replace the browser defaults. They&#39;re built on top of semantic and accessible markup, so it is a solid replacement for the default file input.</p> <h2 id="single-file-default" class="bv-no-focus-ring"><span class="bd-content-title">Single file (default)<a class="anchorjs-link" href="#single-file-default" aria-labelledby="single-file-default"></a></span></h2> <p>On single file mode, when no file is selected or user cancels the &quot;Browse&quot; dialog, <code class="text-nowrap" translate="no">v-model</code> is <code class="text-nowrap" translate="no">null</code> indicating no file selected. When a file is selected the return value will be a JavaScript <a href="https://developer.mozilla.org/en/docs/Web/API/File" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">File</code></a> object instance.</p> <h2 id="multiple-files" class="bv-no-focus-ring"><span class="bd-content-title">Multiple files<a class="anchorjs-link" href="#multiple-files" aria-labelledby="multiple-files"></a></span></h2> <p>Multiple file uploading is supported by adding <code class="text-nowrap" translate="no">multiple</code> prop to component. In this case <code class="text-nowrap" translate="no">v-model</code> is <em>always</em> an <code class="text-nowrap" translate="no">Array</code>. When no files are selected, an empty array will be returned. When a file or files are selected the return value will be an array of JavaScript <a href="https://developer.mozilla.org/en/docs/Web/API/File" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">File</code></a> object instances.</p> <h2 id="directory-mode" class="bv-no-focus-ring"><span class="bd-content-title">Directory mode<a class="anchorjs-link" href="#directory-mode" aria-labelledby="directory-mode"></a></span></h2> <div class="alert alert-warning small mb-3"> <p class="mb-0"> <strong>CAUTION:</strong> Directory mode is a <em>non-standard</em> feature. While being supported by all modern browsers, it should not be relied on for production. Read more on <a class="alert-link" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory">MDN</a> and <a class="alert-link" href="https://caniuse.com/input-file-directory">Can I use</a>. </p> </div> <p>By adding the <code class="text-nowrap" translate="no">directory</code> prop, a user can select directories instead of files. When a directory is selected, the directory and its entire hierarchy of contents are included in the set of selected items.</p> <p>When in <code class="text-nowrap" translate="no">directory</code> mode, files are returned in a nested array format by default. i.e.</p> <div class="bd-code"><pre class="hljs p-2" translate="no">dirA/\n  - fileA1\n  - fileA2\n  - dirB/\n    - fileB1\n  - dirC/\n    - fileC1\n    - fileC2\ndirD/\n  - fileD1</pre></div><p>will be returned as (or similar, file/directory order may vary):</p> <div class="bd-code"><pre class="hljs p-2" translate="no">[[fileA1, fileA2, [fileB1], [fileC1, fileC2]], [fileD1]]</pre></div><p>If you set the <code class="text-nowrap" translate="no">no-traverse</code> prop, the array will be flattened:</p> <div class="bd-code"><pre class="hljs p-2" translate="no">[fileA1, fileA2, fileB1, fileC1, fileC2, fileD1]</pre></div><p>Each file entry will have a special <code class="text-nowrap" translate="no">$path</code> prop that will contain the relative path of each file. For nested directory structures, BootstrapVue uses its own routine to determine the relative path, otherwise it relies on <a href="https://developer.mozilla.org/en-US/docs/Web/API/File/webkitRelativePath" target="_blank" rel="noopener"><code class="text-nowrap" translate="no">File.webkitRelativePath</code></a>.</p> <p>Directory mode is also supported when the file input is in <a href="#non-custom-file-input" class="font-weight-bold"><code class="text-nowrap" translate="no">plain</code> mode</a> on <strong>most</strong> modern browsers.</p> <h2 id="drag-and-drop-support" class="bv-no-focus-ring"><span class="bd-content-title">Drag and Drop support<a class="anchorjs-link" href="#drag-and-drop-support" aria-labelledby="drag-and-drop-support"></a></span></h2> <p>Drop mode is enabled by default. It can disabled by setting the <code class="text-nowrap" translate="no">no-drop</code> prop. <code class="text-nowrap" translate="no">no-drop</code> has no effect in <a href="#non-custom-file-input" class="font-weight-bold"><code class="text-nowrap" translate="no">plain</code> mode</a> (some browsers support dropping files onto a plain input file).</p> <p>You can optionally set a different placeholder while dragging via the <code class="text-nowrap" translate="no">drop-placeholder</code> prop or the scoped <code class="text-nowrap" translate="no">drop-placeholder</code> slot. The prop only supports plain text. Use the slot for custom HTML markup. The slot takes precedence over the prop. The <code class="text-nowrap" translate="no">drop-placeholder</code> prop/slot has no effect if <code class="text-nowrap" translate="no">no-drop</code> is set or in <a href="#non-custom-file-input" class="font-weight-bold"><code class="text-nowrap" translate="no">plain</code> mode</a>.</p> <p>Note that native browser constraints (such as <code class="text-nowrap" translate="no">required</code>) will not work with drop mode, as the hidden file input does not handle the drag and drop functionality and will have zero files selected.</p> <h2 id="limiting-to-certain-file-types" class="bv-no-focus-ring"><span class="bd-content-title">Limiting to certain file types<a class="anchorjs-link" href="#limiting-to-certain-file-types" aria-labelledby="limiting-to-certain-file-types"></a></span></h2> <p>You can limit the file types by setting the <code class="text-nowrap" translate="no">accept</code> prop to a string containing the allowed file type(s). To specify more than one type, separate the values with a comma.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Accept all image formats by IANA media type wildcard--&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Accept specific image formats by IANA type --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/jpeg, image/png, image/gif&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Accept specific image formats by extension --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;.jpg, .png, .gif&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre></div><p>To accept any file type, leave <code class="text-nowrap" translate="no">accept</code> as <code class="text-nowrap" translate="no">null</code> (default). You can mix and match IANA media types and extensions.</p> <p>Refer to <a href="https://www.iana.org/assignments/media-types/" target="_blank" rel="noopener">IANA Media Types</a> for a complete list of standard media types.</p> <p><strong>Note:</strong> Not all browsers support or respect the <code class="text-nowrap" translate="no">accept</code> attribute on file inputs.</p> <p>For drag and drop, BootstrapVue uses an internal file type checking routine and will filter out files that do not have the correct IANA media type or extension.</p> <h2 id="customizing" class="bv-no-focus-ring"><span class="bd-content-title">Customizing<a class="anchorjs-link" href="#customizing" aria-labelledby="customizing"></a></span></h2> <p><code class="text-nowrap" translate="no">&lt;b-form-file&gt;</code>, when not in <a href="#non-custom-file-input" class="font-weight-bold"><code class="text-nowrap" translate="no">plain</code> mode</a>, provides several features for customizing its appearance.</p> <h3 id="control-sizing" class="bv-no-focus-ring"><span class="bd-content-title">Control sizing<a class="anchorjs-link" href="#control-sizing" aria-labelledby="control-sizing"></a></span></h3> <p>Use the <code class="text-nowrap" translate="no">size</code> prop to control the visual size of the input. The default size is considered <code class="text-nowrap" translate="no">md</code> (medium). Optional sizes are <code class="text-nowrap" translate="no">lg</code> (large) and <code class="text-nowrap" translate="no">sm</code> (small). These sizes line up with the sizes available on other form controls.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Small:&quot;</span> <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file-small&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Default:&quot;</span> <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file-default&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Large:&quot;</span> <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;lg&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file-large&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-file-sizes.vue --&gt;</span></pre></div><p><strong>Note:</strong> Bootstrap v4.x does not natively support sizes for the custom file control. However, BootstrapVue includes custom SCSS/CSS that adds support for sizing the custom file input control.</p> <h3 id="customize-the-placeholder-text" class="bv-no-focus-ring"><span class="bd-content-title">Customize the placeholder text<a class="anchorjs-link" href="#customize-the-placeholder-text" aria-labelledby="customize-the-placeholder-text"></a></span></h3> <p>Use the <code class="text-nowrap" translate="no">placeholder</code> prop or the scoped <code class="text-nowrap" translate="no">placeholder</code> slot to change the prompt text that is shown when no files are selected. The prop only supports plain text. Use the slot for custom HTML markup. The slot takes precedence over the prop.</p> <h3 id="customize-browse-button-label" class="bv-no-focus-ring"><span class="bd-content-title">Customize browse button label<a class="anchorjs-link" href="#customize-browse-button-label" aria-labelledby="customize-browse-button-label"></a></span></h3> <p>If you want to globally change <code class="text-nowrap" translate="no">Browse</code> label, you can add something like this to your global stylesheets. Also it is advised to use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:lang" target="_blank" rel="noopener">:lang()</a> for multi-language sites.</p> <div class="bd-code"><pre class="hljs css p-2" translate="no"><span class="hljs-selector-class">.custom-file-input</span><span class="hljs-selector-pseudo">:lang(en)</span> ~ <span class="hljs-selector-class">.custom-file-label</span><span class="hljs-selector-pseudo">::after</span> {\n  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;Browse&#x27;</span>;\n}</pre></div><p>Alternatively you can set the content of the custom file browse button text via the <code class="text-nowrap" translate="no">browse-text</code> prop. Note, only plain text is supported. HTML and components are not supported.</p> <h3 id="file-name-formatter-function" class="bv-no-focus-ring"><span class="bd-content-title">File name formatter function<a class="anchorjs-link" href="#file-name-formatter-function" aria-labelledby="file-name-formatter-function"></a></span></h3> <p>Set the prop <code class="text-nowrap" translate="no">file-name-formatter</code> to a function that accepts three arguments:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Argument</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td>[1] <code class="text-nowrap" translate="no">files</code></td> <td>Array</td> <td>Flat array of <code class="text-nowrap" translate="no">File</code> objects</td> </tr> <tr> <td>[2] <code class="text-nowrap" translate="no">filesTraversed</code></td> <td>Array</td> <td>Array of arrays of <code class="text-nowrap" translate="no">File</code> objects when in <a href="#directory-mode" class="font-weight-bold"><code class="text-nowrap" translate="no">directory</code> mode</a></td> </tr> <tr> <td>[3] <code class="text-nowrap" translate="no">names</code></td> <td>Array</td> <td>Flat array of file names (strings)</td> </tr> </tbody></table> </div><p>The function should return a single formatted string (HTML is not supported). The formatter will not be called if no files are selected.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">:file-name-formatter</span>=<span class="hljs-string">&quot;formatNames&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">formatNames</span>(<span class="hljs-params">files</span>)</span> {\n        <span class="hljs-keyword">return</span> files.length === <span class="hljs-number">1</span> ? files[<span class="hljs-number">0</span>].name : <span class="hljs-string">`<span class="hljs-subst">${files.length}</span> files selected`</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- file-formatter-function.vue --&gt;</span></pre></div><h3 id="file-name-formatting-via-scoped-slot" class="bv-no-focus-ring"><span class="bd-content-title">File name formatting via scoped slot<a class="anchorjs-link" href="#file-name-formatting-via-scoped-slot" aria-labelledby="file-name-formatting-via-scoped-slot"></a></span></h3> <p>Alternatively, you can use the scoped slot <code class="text-nowrap" translate="no">file-name</code> to render the file names. The scoped slot will receive the following properties:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">files</code></td> <td>Array</td> <td>Flat array of <code class="text-nowrap" translate="no">File</code> objects</td> </tr> <tr> <td><code class="text-nowrap" translate="no">filesTraversed</code></td> <td>Array</td> <td>Array of arrays of <code class="text-nowrap" translate="no">File</code> objects when in <a href="#directory-mode" class="font-weight-bold"><code class="text-nowrap" translate="no">directory</code> mode</a></td> </tr> <tr> <td><code class="text-nowrap" translate="no">names</code></td> <td>Array</td> <td>Flat array of file names (strings)</td> </tr> </tbody></table> </div><p>All three properties are always arrays, regardless of the setting of the <code class="text-nowrap" translate="no">multiple</code> prop.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">multiple</span>&gt;</span>\n   <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;file-name&quot;</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;{ names }&quot;</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-badge</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;dark&quot;</span>&gt;</span>{{ names[0] }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-badge</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-badge</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;names.length &gt; 1&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;dark&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ml-1&quot;</span>&gt;</span>\n       + {{ names.length - 1 }} More files\n     <span class="hljs-tag">&lt;/<span class="hljs-name">b-badge</span>&gt;</span>\n   <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- file-formatter-slot.vue --&gt;</span></pre></div><p>When using the <code class="text-nowrap" translate="no">file-name</code> slot, the <code class="text-nowrap" translate="no">file-name-formatter</code> prop is ignored. The slot <strong>will not</strong> be rendered when there are no file(s) selected.</p> <h2 id="non-custom-file-input" class="bv-no-focus-ring"><span class="bd-content-title">Non custom file input<a class="anchorjs-link" href="#non-custom-file-input" aria-labelledby="non-custom-file-input"></a></span></h2> <p>You can have <code class="text-nowrap" translate="no">&lt;b-form-file&gt;</code> render a browser native file input by setting the <code class="text-nowrap" translate="no">plain</code> prop. Note that many of the custom features do not apply when <code class="text-nowrap" translate="no">plain</code> is set.</p> <h2 id="contextual-state-feedback" class="bv-no-focus-ring"><span class="bd-content-title">Contextual state feedback<a class="anchorjs-link" href="#contextual-state-feedback" aria-labelledby="contextual-state-feedback"></a></span></h2> <p>Bootstrap includes validation styles for <code class="text-nowrap" translate="no">valid</code> and <code class="text-nowrap" translate="no">invalid</code> states on most form controls.</p> <p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p> <ul> <li><code class="text-nowrap" translate="no">false</code> (denotes invalid state) is great for when there&#39;s a blocking or required field. A user must fill in this field properly to submit the form</li> <li><code class="text-nowrap" translate="no">true</code> (denotes valid state) is ideal for situations when you have per-field validation throughout a form and want to encourage a user through the rest of the fields</li> <li><code class="text-nowrap" translate="no">null</code> displays no validation state (neither valid nor invalid)</li> </ul> <p>To apply one of the contextual state icons on <code class="text-nowrap" translate="no">&lt;b-form-file&gt;</code>, set the <code class="text-nowrap" translate="no">state</code> prop to <code class="text-nowrap" translate="no">false</code> (for invalid), <code class="text-nowrap" translate="no">true</code> (for valid), or <code class="text-nowrap" translate="no">null</code> (no validation state).</p> <p><strong>Note:</strong> Contextual states are <strong>not</strong> supported when in <a href="#non-custom-file-input" class="font-weight-bold"><code class="text-nowrap" translate="no">plain</code> mode</a>.</p> <h2 id="autofocus" class="bv-no-focus-ring"><span class="bd-content-title">Autofocus<a class="anchorjs-link" href="#autofocus" aria-labelledby="autofocus"></a></span></h2> <p>When the <code class="text-nowrap" translate="no">autofocus</code> prop is set on <code class="text-nowrap" translate="no">&lt;b-form-file&gt;</code>, the input will be auto-focused when it is inserted (i.e. <strong>mounted</strong>) into the document, or re-activated when inside a Vue <code class="text-nowrap" translate="no">&lt;keep-alive&gt;</code> component. Note that this prop <strong>does not</strong> set the <code class="text-nowrap" translate="no">autofocus</code> attribute on the input, nor can it tell when the input becomes visible.</p> <h2 id="accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-labelledby="accessibility"></a></span></h2> <p>When using the custom version of <code class="text-nowrap" translate="no">&lt;b-form-file&gt;</code> input which hides the original input, it is <strong>highly recommended</strong> that you supply a document unique ID string via the <code class="text-nowrap" translate="no">id</code> prop. This will automatically render the extra ARIA attributes required to improve usability for persons using assistive technologies.</p> <h2 id="clearing-the-file-selection" class="bv-no-focus-ring"><span class="bd-content-title">Clearing the file selection<a class="anchorjs-link" href="#clearing-the-file-selection" aria-labelledby="clearing-the-file-selection"></a></span></h2> <p>With inputs of type file, normally the <code class="text-nowrap" translate="no">v-model</code> is uni-directional (meaning you cannot pre-set the selected files). However, you can clear the file input&#39;s selected files by setting the <code class="text-nowrap" translate="no">v-model</code> to either <code class="text-nowrap" translate="no">null</code> (for single mode) or an empty array <code class="text-nowrap" translate="no">[]</code> (for <a href="#multiple-files" class="font-weight-bold"><code class="text-nowrap" translate="no">multiple</code></a>/<a href="#directory-mode" class="font-weight-bold"><code class="text-nowrap" translate="no">directory</code></a> mode).</p> <p>Alternatively, <code class="text-nowrap" translate="no">&lt;b-form-file&gt;</code> provides a <code class="text-nowrap" translate="no">reset()</code> method that can be called to clear the file input. To take advantage of the <code class="text-nowrap" translate="no">reset()</code> method, you will need to obtain a reference to the <code class="text-nowrap" translate="no">&lt;b-form-file&gt;</code> component.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file-input&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clearFiles&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-2&quot;</span>&gt;</span>Reset via method<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;file = null&quot;</span>&gt;</span>Reset via v-model<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Selected file: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{{ file ? file.name : &#x27;&#x27; }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">file</span>: <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">clearFiles</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.$refs[<span class="hljs-string">&#x27;file-input&#x27;</span>].reset()\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-file-reset.vue --&gt;</span></pre></div><h2 id="implementation-notes" class="bv-no-focus-ring"><span class="bd-content-title">Implementation notes<a class="anchorjs-link" href="#implementation-notes" aria-labelledby="implementation-notes"></a></span></h2> <p>As not all browsers allow setting a value of a file input (even to <code class="text-nowrap" translate="no">null</code> or an empty string), <code class="text-nowrap" translate="no">b-form-input</code> employs a technique that works cross-browser that involves changing the input type to <code class="text-nowrap" translate="no">null</code> and then immediately back to type <code class="text-nowrap" translate="no">file</code>.</p> <p>Nested file structures in <a href="#directory-mode" class="font-weight-bold"><code class="text-nowrap" translate="no">directory</code> mode</a> require <code class="text-nowrap" translate="no">Promise</code> support in the browser. If targeting your app for older browsers, such as IE 11, please include a polyfill that provides <code class="text-nowrap" translate="no">Promise</code> support. If <code class="text-nowrap" translate="no">Promise</code> support is not detected, files will always be in a flat file structure.</p> <p>Due to a <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=138987" target="_blank" rel="noopener">&quot;bug&quot; in Chromium</a>, nested file structures in <a href="#directory-mode" class="font-weight-bold"><code class="text-nowrap" translate="no">directory</code> mode</a> are currently only supported when directories are <a href="#drag-and-drop-support" class="font-weight-bold">dropped</a> on the file input. When selecting them via the &quot;Browse&quot; dialog they will always be in a flattened array structure. Mozilla implemented the behavior <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1326031" target="_blank" rel="noopener">the same way as Chromium.</a></p>'}}}]);