(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{461:function(n,t){n.exports={baseTOC:{top:"#form-tags",title:"Form Tags",toc:[{href:"#basic-usage",label:"Basic usage"},{href:"#tag-creation-using-separators",label:"Tag creation using separators"},{href:"#last-tag-removal-via-backspace-keypress",label:"Last tag removal via backspace keypress"},{href:"#styling-options",label:"Styling Options"},{href:"#using-with-native-browser-form-submission",label:"Using with native browser &lt;form&gt; submission"},{href:"#tag-validation",label:"Tag validation",toc:[{href:"#detecting-new-invalid-and-duplicate-tags",label:"Detecting new, invalid, and duplicate tags"}]},{href:"#limiting-tags",label:"Limiting tags"},{href:"#custom-rendering-with-default-scoped-slot",label:"Custom rendering with default scoped slot",toc:[{href:"#scope-properties",label:"Scope properties"},{href:"#using-native-browser-inputs",label:"Using native browser inputs"},{href:"#using-custom-form-components",label:"Using custom form components"},{href:"#advanced-custom-rendering-usage",label:"Advanced custom rendering usage"},{href:"#creating-wrapper-components",label:"Creating wrapper components"}]},{href:"#b-form-tag-helper-component",label:"&lt;b-form-tag&gt; helper component"}]},titleLead:'<h1 id="form-tags" class="bv-no-focus-ring"><span class="bd-content-title">Form Tags</span></h1> <p class="bd-lead">Lightweight custom tagged input form control, with options for customized interface rendering, duplicate tag detection and optional tag validation.</p>',body:'<p>Tags are arrays of short strings, used in various ways such as assigning categories. Use the default user interface, or create your own custom interface via the use of the default scoped slot.</p> <h2 id="basic-usage" class="bv-no-focus-ring"><span class="bd-content-title">Basic usage<a class="anchorjs-link" href="#basic-usage" aria-labelledby="basic-usage"></a></span></h2> <p>Tags will have any leading and tailing whitespace removed, and duplicate tags are not permitted. Tags that contain spaces are permitted by default.</p> <p>Tags are added by clicking the <strong>Add</strong> button, pressing the <kbd class="notranslate" translate="no">Enter</kbd> key or optionally when the <code class="text-nowrap" translate="no">change</code> event fires on the new tag input (i.e. when focus moves from the input). The <strong>Add</strong> button will only appear when the user has entered a new tag value.</p> <p><strong>Default render:</strong></p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-basic&quot;</span>&gt;</span>Type a new tag and press enter<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-basic&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-example.vue --&gt;</span></pre></div><p>You can disable adding a new tag when pressing <kbd class="notranslate" translate="no">Enter</kbd> via the <code class="text-nowrap" translate="no">no-add-on-enter</code> prop, and enable adding a tag on the input&#39;s <code class="text-nowrap" translate="no">change</code> event via the <code class="text-nowrap" translate="no">add-on-change</code> prop.</p> <h2 id="tag-creation-using-separators" class="bv-no-focus-ring"><span class="bd-content-title">Tag creation using separators<a class="anchorjs-link" href="#tag-creation-using-separators" aria-labelledby="tag-creation-using-separators"></a></span></h2> <p>To auto create tags when a separator character is typed (i.e. <kbd class="notranslate" translate="no">Space</kbd>, <kbd class="notranslate" translate="no">,</kbd>, etc.), set the <code class="text-nowrap" translate="no">separator</code> prop to the character that will trigger the tag to be added. If multiple separator characters are needed, then include them as a single string (i.e. <code class="text-nowrap" translate="no">&#39; ,;&#39;</code>), or an array of characters (i.e. <code class="text-nowrap" translate="no">[&#39; &#39;, &#39;,&#39;, &#39;;&#39;]</code>), which will trigger a new tag to be added when <kbd class="notranslate" translate="no">Space</kbd>, <kbd class="notranslate" translate="no">,</kbd>, <em>or</em> <kbd class="notranslate" translate="no">;</kbd> are typed). Separators must be a single character.</p> <p>The following example will auto create a tag when <kbd class="notranslate" translate="no">Space</kbd>, <kbd class="notranslate" translate="no">,</kbd>, or <kbd class="notranslate" translate="no">;</kbd> are typed:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-separators&quot;</span>&gt;</span>Enter tags separated by space, comma or semicolon<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-separators&quot;</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot; ,;&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter new tags separated by space, comma or semicolon&quot;</span>\n      <span class="hljs-attr">no-add-on-enter</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-separator.vue --&gt;</span></pre></div><h2 id="last-tag-removal-via-backspace-keypress" class="bv-no-focus-ring"><span class="bd-content-title">Last tag removal via backspace keypress<a class="anchorjs-link" href="#last-tag-removal-via-backspace-keypress" aria-labelledby="last-tag-removal-via-backspace-keypress"></a></span></h2> <p>When the prop <code class="text-nowrap" translate="no">remove-on-delete</code> is set, and the user presses <kbd class="notranslate" translate="no">Backspace</kbd> (or <kbd class="notranslate" translate="no">Del</kbd>) <em>and</em> the input value is empty, the last tag in the tag list will be removed.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-remove-on-delete&quot;</span>&gt;</span>Enter new tags separated by space<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-remove-on-delete&quot;</span>\n      <span class="hljs-attr">:input-attrs</span>=<span class="hljs-string">&quot;{ &#x27;aria-describedby&#x27;: &#x27;tags-remove-on-delete-help&#x27; }&quot;</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot; &quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter new tags separated by space&quot;</span>\n      <span class="hljs-attr">remove-on-delete</span>\n      <span class="hljs-attr">no-add-on-enter</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-text</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tags-remove-on-delete-help&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n      Press <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>Backspace<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> to remove the last tag entered\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-text</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;grape&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-remove-on-delete.vue --&gt;</span></pre></div><h2 id="styling-options" class="bv-no-focus-ring"><span class="bd-content-title">Styling Options<a class="anchorjs-link" href="#styling-options" aria-labelledby="styling-options"></a></span></h2> <p>Several props are available to alter the basic styling of the default tagged interface:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Prop</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">tag-pills</code></td> <td>Renders the tags with the appearance of pills</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tag-variant</code></td> <td>Applies one of the Bootstrap contextual variant theme colors to the tags</td> </tr> <tr> <td><code class="text-nowrap" translate="no">size</code></td> <td>Set the size of the component&#39;s appearance. &#39;sm&#39;, &#39;md&#39; (default), or &#39;lg&#39;</td> </tr> <tr> <td><code class="text-nowrap" translate="no">placeholder</code></td> <td>The placeholder text for the new tag input element</td> </tr> <tr> <td><code class="text-nowrap" translate="no">state</code></td> <td>Sets the contextual state of the control. Set to <code class="text-nowrap" translate="no">true</code> (for valid), <code class="text-nowrap" translate="no">false</code> (for invalid), or <code class="text-nowrap" translate="no">null</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">disabled</code></td> <td>Places the component in a disabled state</td> </tr> </tbody></table> </div><p>For additional props, see the component reference section at the bottom of this page.</p> <p>The focus and validation state styling of the component relies upon BootstrapVue&#39;s custom CSS.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-pills&quot;</span>&gt;</span>Enter tags<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-pills&quot;</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n      <span class="hljs-attr">tag-variant</span>=<span class="hljs-string">&quot;primary&quot;</span>\n      <span class="hljs-attr">tag-pills</span>\n      <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot; &quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter new tags separated by space&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;grape&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-style-options.vue --&gt;</span></pre></div><h2 id="using-with-native-browser-form-submission" class="bv-no-focus-ring"><span class="bd-content-title">Using with native browser <code class="text-nowrap" translate="no">&lt;form&gt;</code> submission<a class="anchorjs-link" href="#using-with-native-browser-form-submission" aria-labelledby="using-with-native-browser-form-submission"></a></span></h2> <p>The value of the tagged input will not be submitted via standard form <code class="text-nowrap" translate="no">action</code> unless you provide a name via the <code class="text-nowrap" translate="no">name</code> prop. When a name is provided, <code class="text-nowrap" translate="no">&lt;b-form-tags&gt;</code> will create a hidden <code class="text-nowrap" translate="no">&lt;input&gt;</code> for each tag. The hidden input will have the <code class="text-nowrap" translate="no">name</code> attribute set to the value of the <code class="text-nowrap" translate="no">name</code> prop.</p> <p>The hidden inputs will also be generated when using <a href="#custom-rendering-with-default-scoped-slot" class="font-weight-bold">custom rendering</a> (when the <code class="text-nowrap" translate="no">name</code> prop is set).</p> <h2 id="tag-validation" class="bv-no-focus-ring"><span class="bd-content-title">Tag validation<a class="anchorjs-link" href="#tag-validation" aria-labelledby="tag-validation"></a></span></h2> <p>By default, <code class="text-nowrap" translate="no">&lt;b-form-tags&gt;</code> detects when the user is attempting to enter a (case-sensitive) duplicate tag, and will provide integrated feedback to the user.</p> <p>You can optionally provide a tag validator method via the <code class="text-nowrap" translate="no">tag-validator</code> prop. The validator function will receive one argument which is the tag being added, and should return either <code class="text-nowrap" translate="no">true</code> if the tag passes validation and can be added, or <code class="text-nowrap" translate="no">false</code> if the tag fails validation (in which case it is not added to the array of tags). Integrated feedback will be provided to the user listing the invalid tag(s) that could not be added.</p> <p>Tag validation occurs only for tags added via user input. Changes to the tags via the <code class="text-nowrap" translate="no">v-model</code> are not validated.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Tags validation example&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;tags-validation&quot;</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n        <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-validation&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;tags&quot;</span>\n        <span class="hljs-attr">:input-attrs</span>=<span class="hljs-string">&quot;{ &#x27;aria-describedby&#x27;: &#x27;tags-validation-help&#x27; }&quot;</span>\n        <span class="hljs-attr">:tag-validator</span>=<span class="hljs-string">&quot;tagValidator&quot;</span>\n        <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>\n        <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot; &quot;</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">invalid-feedback</span>&gt;</span>\n        You must provide at least 3 tags and no more than 8\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">description</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tags-validation-help&quot;</span>&gt;</span>\n         Tags must be 3 to 5 characters in length and all lower\n         case. Enter tags separated by spaces or press enter.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">tags</span>: [],\n        <span class="hljs-attr">dirty</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Overall component validation state</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dirty ? (<span class="hljs-built_in">this</span>.tags.length &gt; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-built_in">this</span>.tags.length &lt; <span class="hljs-number">9</span>) : <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-attr">watch</span>: {\n      <span class="hljs-function"><span class="hljs-title">tags</span>(<span class="hljs-params">newValue, oldValue</span>)</span> {\n        <span class="hljs-comment">// Set the dirty flag on first change to the tags array</span>\n        <span class="hljs-built_in">this</span>.dirty = <span class="hljs-literal">true</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">tagValidator</span>(<span class="hljs-params">tag</span>)</span> {\n        <span class="hljs-comment">// Individual tag validator function</span>\n        <span class="hljs-keyword">return</span> tag === tag.toLowerCase() &amp;&amp; tag.length &gt; <span class="hljs-number">2</span> &amp;&amp; tag.length &lt; <span class="hljs-number">6</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-validation-feedback.vue --&gt;</span></pre></div><h3 id="detecting-new-invalid-and-duplicate-tags" class="bv-no-focus-ring"><span class="bd-content-title">Detecting new, invalid, and duplicate tags<a class="anchorjs-link" href="#detecting-new-invalid-and-duplicate-tags" aria-labelledby="detecting-new-invalid-and-duplicate-tags"></a></span></h3> <p>The event <code class="text-nowrap" translate="no">tag-state</code> will be emitted whenever new tags are entered into the new tag input element, tags that do not pass validation, or duplicate tags are detected. The event handler will receive three arrays as its arguments:</p> <ul> <li><code class="text-nowrap" translate="no">validTags</code> (tags that pass validation)</li> <li><code class="text-nowrap" translate="no">invalidTags</code> (tags that do not pass validation)</li> <li><code class="text-nowrap" translate="no">duplicateTags</code> (tags that would be a duplicate of existing or validTags).</li> </ul> <p>The event will be emitted only when the new tag input changes (characters are entered that would be considered part of a tag), or when the user attempts to add a tag (i.e. via <kbd class="notranslate" translate="no">Enter</kbd>, clicking the <strong>Add</strong> button, or entering a separator). The three arrays will be empty when the user clears the new tag input element (or contains just spaces).</p> <p>If you are providing your own feedback for duplicate and invalid tags (via the use of the <code class="text-nowrap" translate="no">tag-state</code> event) outside of the <code class="text-nowrap" translate="no">&lt;b-form-tags&gt;</code> component, you can disable the built in duplicate and invalid messages by setting the props <code class="text-nowrap" translate="no">duplicate-tag-text</code> and <code class="text-nowrap" translate="no">invalid-tag-text</code> (respectively) to either an empty string (<code class="text-nowrap" translate="no">&#39;&#39;</code>) or <code class="text-nowrap" translate="no">null</code>.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-state-event&quot;</span>&gt;</span>Enter tags<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-state-event&quot;</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;tags&quot;</span>\n      <span class="hljs-attr">:tag-validator</span>=<span class="hljs-string">&quot;validator&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter tags (3-5 characters) separated by space&quot;</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot; &quot;</span>\n      @<span class="hljs-attr">tag-state</span>=<span class="hljs-string">&quot;onTagState&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Tags: {{ tags }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Event values:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>validTags: {{ validTags }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>invalidTags: {{ invalidTags }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>duplicateTags: {{ duplicateTags }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">tags</span>: [],\n        <span class="hljs-attr">validTags</span>: [],\n        <span class="hljs-attr">invalidTags</span>: [],\n        <span class="hljs-attr">duplicateTags</span>: []\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onTagState</span>(<span class="hljs-params">valid, invalid, duplicate</span>)</span> {\n        <span class="hljs-built_in">this</span>.validTags = valid\n        <span class="hljs-built_in">this</span>.invalidTags = invalid\n        <span class="hljs-built_in">this</span>.duplicateTags = duplicate\n      },\n      <span class="hljs-function"><span class="hljs-title">validator</span>(<span class="hljs-params">tag</span>)</span> {\n        <span class="hljs-keyword">return</span> tag.length &gt; <span class="hljs-number">2</span> &amp;&amp; tag.length &lt; <span class="hljs-number">6</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-tags-state-event.vue --&gt;</span></pre></div><h2 id="limiting-tags" class="bv-no-focus-ring"><span class="bd-content-title">Limiting tags<a class="anchorjs-link" href="#limiting-tags" aria-labelledby="limiting-tags"></a></span></h2> <p>If you want to limit the amount of tags the user is able to add use the <code class="text-nowrap" translate="no">limit</code> prop. When configured, adding more tags than the <code class="text-nowrap" translate="no">limit</code> allows is only possible by the <code class="text-nowrap" translate="no">v-model</code>.</p> <p>When the limit of tags is reached, the user is still able to type but adding more tags is disabled. A message is shown to give the user feedback about the reached limit. This message can be configured by the <code class="text-nowrap" translate="no">limit-tags-text</code> prop. Setting it to either an empty string (<code class="text-nowrap" translate="no">&#39;&#39;</code>) or <code class="text-nowrap" translate="no">null</code> will disable the feedback.</p> <p>Removing tags is unaffected by the <code class="text-nowrap" translate="no">limit</code> prop.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;tags-limit&quot;</span>&gt;</span>Enter tags<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">input-id</span>=<span class="hljs-string">&quot;tags-limit&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">:limit</span>=<span class="hljs-string">&quot;limit&quot;</span> <span class="hljs-attr">remove-on-delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [],\n        <span class="hljs-attr">limit</span>: <span class="hljs-number">5</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-limit.vue --&gt;</span></pre></div><h2 id="custom-rendering-with-default-scoped-slot" class="bv-no-focus-ring"><span class="bd-content-title">Custom rendering with default scoped slot<a class="anchorjs-link" href="#custom-rendering-with-default-scoped-slot" aria-labelledby="custom-rendering-with-default-scoped-slot"></a></span></h2> <p>If you fancy a different look and feel for the tags control, you can provide your own custom rendering via the default scoped slot. You can either create your own tags, or use our helper <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> component.</p> <h3 id="scope-properties" class="bv-no-focus-ring"><span class="bd-content-title">Scope properties<a class="anchorjs-link" href="#scope-properties" aria-labelledby="scope-properties"></a></span></h3> <p>The default scoped slot provides numerous properties and methods for use in rendering your custom interface. Not all properties or methods are required to generate your interface.</p> <p>The default slot scope properties are as follows:</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">addButtonText</code></td> <td>String</td> <td>The value of the <code class="text-nowrap" translate="no">add-button-text</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">addButtonVariant</code></td> <td>String</td> <td>The value of the <code class="text-nowrap" translate="no">add-button-variant</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">addTag</code></td> <td>Function</td> <td>Method to add a new tag. Assumes the tag is the value of the input, but optionally accepts one argument which is the tag value to be added</td> </tr> <tr> <td><code class="text-nowrap" translate="no">disableAddButton</code></td> <td>Boolean</td> <td>Will be <code class="text-nowrap" translate="no">true</code> if the tag(s) in the input cannot be added (all invalid and/or duplicates)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">disabled</code></td> <td>Boolean</td> <td><code class="text-nowrap" translate="no">true</code> if the component is in the disabled state. Value of the <code class="text-nowrap" translate="no">disabled</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">duplicateTagText</code></td> <td>String</td> <td>The value of the <code class="text-nowrap" translate="no">duplicate-tag-text</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">duplicateTags</code></td> <td>Array</td> <td>Array of the duplicate tag(s) the user has entered</td> </tr> <tr> <td><code class="text-nowrap" translate="no">form</code></td> <td>String</td> <td><span class="badge badge-secondary">v2.20.0+</span> The value of the <code class="text-nowrap" translate="no">form</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">inputAttrs</code></td> <td>Object</td> <td>Object of attributes to apply to the new tag input element via <code class="text-nowrap" translate="no">v-bind=&quot;inputAttrs&quot;</code>. See below for details</td> </tr> <tr> <td><code class="text-nowrap" translate="no">inputHandlers</code></td> <td>Object</td> <td>Object of event handlers to apply to the new tag input element via <code class="text-nowrap" translate="no">v-on=&quot;inputHandlers&quot;</code>. See below for details</td> </tr> <tr> <td><code class="text-nowrap" translate="no">inputId</code></td> <td>String</td> <td>ID to add to the new tag input element. Defaults to prop <code class="text-nowrap" translate="no">input-id</code>. If not provided a unique ID is auto-generated. Also available via &#39;inputAttrs.id&#39;</td> </tr> <tr> <td><code class="text-nowrap" translate="no">inputType</code></td> <td>String</td> <td><span class="badge badge-secondary">v2.3.0+</span> Type of input to render (normalized version of prop <code class="text-nowrap" translate="no">input-type</code>)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">invalidTagText</code></td> <td>String</td> <td>The value of the <code class="text-nowrap" translate="no">invalid-tag-text</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">invalidTags</code></td> <td>Array</td> <td>Array of the invalid tag(s) the user has entered</td> </tr> <tr> <td><code class="text-nowrap" translate="no">isDuplicate</code></td> <td>Boolean</td> <td><code class="text-nowrap" translate="no">true</code> if the user input contains duplicate tag(s)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">isInvalid</code></td> <td>Boolean</td> <td><code class="text-nowrap" translate="no">true</code> if the user input contains invalid tag(s)</td> </tr> <tr> <td><code class="text-nowrap" translate="no">isLimitReached</code></td> <td>Boolean</td> <td><span class="badge badge-secondary">v2.17.0+</span> <code class="text-nowrap" translate="no">true</code> if a <code class="text-nowrap" translate="no">limit</code> is configured and the amount of tags has reached the limit</td> </tr> <tr> <td><code class="text-nowrap" translate="no">limitTagsText</code></td> <td>String</td> <td><span class="badge badge-secondary">v2.17.0+</span> The value of the <code class="text-nowrap" translate="no">limit-tags-text</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">limit</code></td> <td>String</td> <td><span class="badge badge-secondary">v2.17.0+</span> The value of the <code class="text-nowrap" translate="no">limit</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">noTagRemove</code></td> <td>Boolean</td> <td><span class="badge badge-secondary">v2.21.0+</span> The value of the <code class="text-nowrap" translate="no">no-tag-remove</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">placeholder</code></td> <td>String</td> <td>The value of the <code class="text-nowrap" translate="no">placeholder</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">removeTag</code></td> <td>Function</td> <td>Method to remove a tag. Accepts one argument which is the tag value to remove</td> </tr> <tr> <td><code class="text-nowrap" translate="no">required</code></td> <td>Boolean</td> <td><span class="badge badge-secondary">v2.20.0+</span> The value of the <code class="text-nowrap" translate="no">required</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">separator</code></td> <td>String</td> <td>The value of the <code class="text-nowrap" translate="no">separator</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">size</code></td> <td>String</td> <td>The value of the <code class="text-nowrap" translate="no">size</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">state</code></td> <td>Boolean</td> <td>The contextual state of the component. Value of the <code class="text-nowrap" translate="no">state</code> prop. Possible values are <code class="text-nowrap" translate="no">true</code>, <code class="text-nowrap" translate="no">false</code> or <code class="text-nowrap" translate="no">null</code></td> </tr> <tr> <td><code class="text-nowrap" translate="no">tagClass</code></td> <td>String, Array, or Object</td> <td>The value of the <code class="text-nowrap" translate="no">tag-variant</code> prop. Class (or classes) to apply to the tag elements</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tagPills</code></td> <td>Boolean</td> <td>The value of the <code class="text-nowrap" translate="no">tag-pills</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tagRemoveLabel</code></td> <td>String</td> <td>Value of the <code class="text-nowrap" translate="no">tag-remove-label</code> prop. Used as the <code class="text-nowrap" translate="no">aria-label</code> attribute on the remove button of tags</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tagVariant</code></td> <td>String</td> <td>The value of the <code class="text-nowrap" translate="no">tag-variant</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">tags</code></td> <td>Array</td> <td>Array of current tag strings</td> </tr> </tbody></table> </div><h4 id="inputattrs-object-properties" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">inputAttrs</code> object properties<a class="anchorjs-link" href="#inputattrs-object-properties" aria-labelledby="inputattrs-object-properties"></a></span></h4> <p>The <code class="text-nowrap" translate="no">inputAttrs</code> object contains attributes to bind (<code class="text-nowrap" translate="no">v-bind</code>) to the new tag input element.</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">disabled</code></td> <td>Boolean</td> <td>The <code class="text-nowrap" translate="no">disabled</code> attribute for the new tag input. Value of the <code class="text-nowrap" translate="no">disabled</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">form</code></td> <td>String</td> <td>The <code class="text-nowrap" translate="no">form</code> attribute for the new tag input. Value of the <code class="text-nowrap" translate="no">form</code> prop</td> </tr> <tr> <td><code class="text-nowrap" translate="no">id</code></td> <td>String</td> <td>the <code class="text-nowrap" translate="no">id</code> attribute for the new tag input</td> </tr> <tr> <td><code class="text-nowrap" translate="no">value</code></td> <td>String</td> <td>The <code class="text-nowrap" translate="no">value</code> attribute for the new tag input</td> </tr> </tbody></table> </div><p>The <code class="text-nowrap" translate="no">inputAttrs</code> object will also include any attributes set via the <code class="text-nowrap" translate="no">input-attrs</code> prop. Note that the above attributes take precedence over any of the same attributes specified in the <code class="text-nowrap" translate="no">input-attrs</code> prop.</p> <h4 id="inputhandlers-object-properties" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">inputHandlers</code> object properties<a class="anchorjs-link" href="#inputhandlers-object-properties" aria-labelledby="inputhandlers-object-properties"></a></span></h4> <p>The <code class="text-nowrap" translate="no">inputHandlers</code> object contains event handlers to bind (<code class="text-nowrap" translate="no">v-on</code>) to the new tag input element.</p> <div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class="thead-default"> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class="text-nowrap" translate="no">change</code></td> <td>Function</td> <td>Event handler for the input element <code class="text-nowrap" translate="no">change</code> event. Accepts a single argument of either an event object or a string. Change will trigger adding the tag.</td> </tr> <tr> <td><code class="text-nowrap" translate="no">input</code></td> <td>Function</td> <td>Event handler for the input element <code class="text-nowrap" translate="no">input</code> event. Accepts a single argument of either an event object or a string. Updates the internal v-model for the new tag input element</td> </tr> <tr> <td><code class="text-nowrap" translate="no">keydown</code></td> <td>Function</td> <td>Event handler for the input element <code class="text-nowrap" translate="no">keydown</code> <kbd class="notranslate" translate="no">Enter</kbd> and <kbd class="notranslate" translate="no">Del</kbd> events. Accepts a single argument which is the native keydown event object</td> </tr> </tbody></table> </div><p>The <code class="text-nowrap" translate="no">change</code> handler, when needed, must be enabled via the <code class="text-nowrap" translate="no">add-on-change</code> prop, otherwise it is a noop method.</p> <h3 id="using-native-browser-inputs" class="bv-no-focus-ring"><span class="bd-content-title">Using native browser inputs<a class="anchorjs-link" href="#using-native-browser-inputs" aria-labelledby="using-native-browser-inputs"></a></span></h3> <p>The scope contains attributes and event handlers that can be directly bound to native <code class="text-nowrap" translate="no">&lt;input&gt;</code> or <code class="text-nowrap" translate="no">&lt;select&gt;</code> elements.</p> <p>The following example includes the suggested ARIA attributes and roles needed for screen-reader support.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">no-outer-focus</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ tags, inputAttrs, inputHandlers, addTag, removeTag }&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">aria-controls</span>=<span class="hljs-string">&quot;my-custom-tags-list&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n            <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;inputAttrs&quot;</span>\n            <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;inputHandlers&quot;</span>\n            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;New tag - Press enter to add&quot;</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addTag()&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>\n          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-custom-tags-list&quot;</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-unstyled d-inline-flex flex-wrap mb-0&quot;</span>\n          <span class="hljs-attr">aria-live</span>=<span class="hljs-string">&quot;polite&quot;</span>\n          <span class="hljs-attr">aria-atomic</span>=<span class="hljs-string">&quot;false&quot;</span>\n          <span class="hljs-attr">aria-relevant</span>=<span class="hljs-string">&quot;additions removals&quot;</span>\n        &gt;</span>\n          <span class="hljs-comment">&lt;!-- Always use the tag value as the :key, not the index! --&gt;</span>\n          <span class="hljs-comment">&lt;!-- Otherwise screen readers will not read the tag\n               additions and removals correctly --&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>\n            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span>\n            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag&quot;</span>\n            <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;`my-custom-tags-tag_${tag.replace(/\\s/g, &#x27;_&#x27;)}_`&quot;</span>\n            <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;li&quot;</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-1 mr-1&quot;</span>\n            <span class="hljs-attr">body-class</span>=<span class="hljs-string">&quot;py-1 pr-2 text-nowrap&quot;</span>\n          &gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n              @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeTag(tag)&quot;</span>\n              <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;link&quot;</span>\n              <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n              <span class="hljs-attr">:aria-controls</span>=<span class="hljs-string">&quot;`my-custom-tags-tag_${tag.replace(/\\s/g, &#x27;_&#x27;)}_`&quot;</span>\n            &gt;</span>remove<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;peach&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-custom-native.vue --&gt;</span></pre></div><h3 id="using-custom-form-components" class="bv-no-focus-ring"><span class="bd-content-title">Using custom form components<a class="anchorjs-link" href="#using-custom-form-components" aria-labelledby="using-custom-form-components"></a></span></h3> <p>The scope contains attributes and event handlers that can be directly bound to <em>most</em> custom inputs or select components (the event handlers accept either a string tag value <em>or</em> a native event object). Any component that emits <code class="text-nowrap" translate="no">input</code> as characters are typed, and (optionally) emits <code class="text-nowrap" translate="no">change</code> when the input value changes (i.e on blur or select), and uses the prop <code class="text-nowrap" translate="no">value</code> as the v-model, should work without modification.</p> <p>In this example, we are using the <a href="#b-form-tag-helper-component" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> helper component</a>, but feel free to render tags using standard HTML or components.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">no-outer-focus</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ tags, inputAttrs, inputHandlers, tagVariant, addTag, removeTag }&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;inputAttrs&quot;</span>\n            <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;inputHandlers&quot;</span>\n            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;New tag - Press enter to add&quot;</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addTag()&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-inline-block&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 1.5rem;&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tag</span>\n            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span>\n            @<span class="hljs-attr">remove</span>=<span class="hljs-string">&quot;removeTag(tag)&quot;</span>\n            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag&quot;</span>\n            <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;tag&quot;</span>\n            <span class="hljs-attr">:variant</span>=<span class="hljs-string">&quot;tagVariant&quot;</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-1&quot;</span>\n          &gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tag</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-custom-components-input.vue --&gt;</span></pre></div><p>The following is an example of using a custom select component for choosing from a pre-defined set of tags:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Tagged input using select&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;tags-component-select&quot;</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Prop `add-on-change` is needed to enable adding tags vie the `change` event --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tags-component-select&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n        <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span>\n        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>\n        <span class="hljs-attr">add-on-change</span>\n        <span class="hljs-attr">no-outer-focus</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ tags, inputAttrs, inputHandlers, disabled, removeTag }&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;tags.length &gt; 0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline d-inline-block mb-2&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tag</span>\n                @<span class="hljs-attr">remove</span>=<span class="hljs-string">&quot;removeTag(tag)&quot;</span>\n                <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;tag&quot;</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n                <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;info&quot;</span>\n              &gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tag</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n            <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;inputAttrs&quot;</span>\n            <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;inputHandlers&quot;</span>\n            <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled || availableOptions.length === 0&quot;</span>\n            <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;availableOptions&quot;</span>\n          &gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">first</span>&gt;</span>\n              <span class="hljs-comment">&lt;!-- This is required to prevent bugs with Safari --&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Choose a tag...<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>, <span class="hljs-string">&#x27;Banana&#x27;</span>, <span class="hljs-string">&#x27;Lime&#x27;</span>, <span class="hljs-string">&#x27;Peach&#x27;</span>, <span class="hljs-string">&#x27;Chocolate&#x27;</span>, <span class="hljs-string">&#x27;Strawberry&#x27;</span>],\n        <span class="hljs-attr">value</span>: []\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">availableOptions</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.options.filter(<span class="hljs-function"><span class="hljs-params">opt</span> =&gt;</span> <span class="hljs-built_in">this</span>.value.indexOf(opt) === -<span class="hljs-number">1</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-components-select.vue --&gt;</span></pre></div><p>If the custom input is using custom event names that mimic <code class="text-nowrap" translate="no">input</code> and <code class="text-nowrap" translate="no">change</code>, and/or needs the <code class="text-nowrap" translate="no">.native</code> modifier for keydown, you can do something similar to below to bind the event handlers:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;{ inputAttrs, inputHandlers, removeTag, tags }&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span>\n    <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;inputAttrs.id&quot;</span>\n    <span class="hljs-attr">:vistom-value-prop</span>=<span class="hljs-string">&quot;inputAttrs.value&quot;</span>\n    @<span class="hljs-attr">custom-input-event</span>=<span class="hljs-string">&quot;inputHandlers.input($event)&quot;</span>\n    @<span class="hljs-attr">custom-change-event</span>=<span class="hljs-string">&quot;inputHandlers.change($event)&quot;</span>\n    @<span class="hljs-attr">keydown.native</span>=<span class="hljs-string">&quot;inputHandlers.keydown($event)&quot;</span>\n  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Your custom tag list here --&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></pre></div><p>The <code class="text-nowrap" translate="no">inputHandlers.input</code> handler <strong>must</strong> be bound to an event that updates with each character entered by the user for the <em>as-you-type</em> tag validation to work.</p> <h3 id="advanced-custom-rendering-usage" class="bv-no-focus-ring"><span class="bd-content-title">Advanced custom rendering usage<a class="anchorjs-link" href="#advanced-custom-rendering-usage" aria-labelledby="advanced-custom-rendering-usage"></a></span></h3> <p>In situations where the <code class="text-nowrap" translate="no">inputHandlers</code> will not work with your custom input, or if you need greater control over tag creation, you can take advantage of the additional properties provided via the default slot&#39;s scope.</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">switch</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span>Disable<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>\n      @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;resetInputValue()&quot;</span>\n      <span class="hljs-attr">tag-variant</span>=<span class="hljs-string">&quot;success&quot;</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2 mt-2&quot;</span>\n      <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n      <span class="hljs-attr">no-outer-focus</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter a new tag value and click Add&quot;</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{tags, inputId, placeholder, disabled, addTag, removeTag }&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span>&gt;</span>\n          <span class="hljs-comment">&lt;!-- Always bind the id to the input so that it can be focused when needed --&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;newTag&quot;</span>\n            <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;inputId&quot;</span>\n            <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;placeholder&quot;</span>\n            <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n            <span class="hljs-attr">:formatter</span>=<span class="hljs-string">&quot;formatter&quot;</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addTag(newTag)&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-invalid-feedback</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;</span>\n          Duplicate tag value cannot be added again!\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-invalid-feedback</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;tags.length &gt; 0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;`Tag: ${tag}`&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-2&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex align-items-center&quot;</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mr-2&quot;</span>&gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n                <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n                <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-danger&quot;</span>\n                @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeTag(tag)&quot;</span>\n              &gt;</span>\n                remove tag\n              <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-text</span> <span class="hljs-attr">v-else</span>&gt;</span>\n          There are no tags specified. Add a new tag above.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-text</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">newTag</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">value</span>: []\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Return false (invalid) if new tag is a duplicate</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value.indexOf(<span class="hljs-built_in">this</span>.newTag.trim()) &gt; -<span class="hljs-number">1</span> ? <span class="hljs-literal">false</span> : <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">resetInputValue</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-built_in">this</span>.newTag = <span class="hljs-string">&#x27;&#x27;</span>\n      },\n      <span class="hljs-function"><span class="hljs-title">formatter</span>(<span class="hljs-params">value</span>)</span> {\n        <span class="hljs-keyword">return</span> value.toUpperCase()\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-custom-components-advanced.vue --&gt;</span></pre></div><p>The following is an example of using the <code class="text-nowrap" translate="no">&lt;b-dropdown&gt;</code> component for choosing or searching from a pre-defined set of tags:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Tagged input using dropdown&quot;</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;tags-with-dropdown&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tags-with-dropdown&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">no-outer-focus</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ tags, disabled, addTag, removeTag }&quot;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;tags.length &gt; 0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline d-inline-block mb-2&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;tag in tags&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tag</span>\n                @<span class="hljs-attr">remove</span>=<span class="hljs-string">&quot;removeTag(tag)&quot;</span>\n                <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;tag&quot;</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n                <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;info&quot;</span>\n              &gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tag</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-secondary&quot;</span> <span class="hljs-attr">block</span> <span class="hljs-attr">menu-class</span>=<span class="hljs-string">&quot;w-100&quot;</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">button-content</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;tag-fill&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-icon</span>&gt;</span> Choose tags\n            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-form</span> @<span class="hljs-attr">submit.stop.prevent</span>=<span class="hljs-string">&quot;() =&gt; {}&quot;</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Search tags&quot;</span>\n                <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;tag-search-input&quot;</span>\n                <span class="hljs-attr">label-cols-md</span>=<span class="hljs-string">&quot;auto&quot;</span>\n                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>\n                <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n                <span class="hljs-attr">:description</span>=<span class="hljs-string">&quot;searchDesc&quot;</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>\n              &gt;</span>\n                <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n                  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;search&quot;</span>\n                  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tag-search-input&quot;</span>\n                  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span>\n                  <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n                  <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span>\n                 &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n              <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-form</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-divider</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-divider</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-item-button</span>\n              <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;option in availableOptions&quot;</span>\n              <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;option&quot;</span>\n              @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onOptionClick({ option, addTag })&quot;</span>\n            &gt;</span>\n              {{ option }}\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-item-button</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-text</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;availableOptions.length === 0&quot;</span>&gt;</span>\n              There are no tags available to select\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-text</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>, <span class="hljs-string">&#x27;Banana&#x27;</span>, <span class="hljs-string">&#x27;Lime&#x27;</span>, <span class="hljs-string">&#x27;Peach&#x27;</span>, <span class="hljs-string">&#x27;Chocolate&#x27;</span>, <span class="hljs-string">&#x27;Strawberry&#x27;</span>],\n        <span class="hljs-attr">search</span>: <span class="hljs-string">&#x27;&#x27;</span>,\n        <span class="hljs-attr">value</span>: []\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      <span class="hljs-function"><span class="hljs-title">criteria</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-comment">// Compute the search criteria</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.search.trim().toLowerCase()\n      },\n      <span class="hljs-function"><span class="hljs-title">availableOptions</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">const</span> criteria = <span class="hljs-built_in">this</span>.criteria\n        <span class="hljs-comment">// Filter out already selected options</span>\n        <span class="hljs-keyword">const</span> options = <span class="hljs-built_in">this</span>.options.filter(<span class="hljs-function"><span class="hljs-params">opt</span> =&gt;</span> <span class="hljs-built_in">this</span>.value.indexOf(opt) === -<span class="hljs-number">1</span>)\n        <span class="hljs-keyword">if</span> (criteria) {\n          <span class="hljs-comment">// Show only options that match criteria</span>\n          <span class="hljs-keyword">return</span> options.filter(<span class="hljs-function"><span class="hljs-params">opt</span> =&gt;</span> opt.toLowerCase().indexOf(criteria) &gt; -<span class="hljs-number">1</span>);\n        }\n        <span class="hljs-comment">// Show all options available</span>\n        <span class="hljs-keyword">return</span> options\n      },\n      <span class="hljs-function"><span class="hljs-title">searchDesc</span>(<span class="hljs-params"></span>)</span> {\n        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.criteria &amp;&amp; <span class="hljs-built_in">this</span>.availableOptions.length === <span class="hljs-number">0</span>) {\n          <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;There are no tags matching your search criteria&#x27;</span>\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      <span class="hljs-function"><span class="hljs-title">onOptionClick</span>(<span class="hljs-params">{ option, addTag }</span>)</span> {\n        addTag(option)\n        <span class="hljs-built_in">this</span>.search = <span class="hljs-string">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-dropdown-example.vue --&gt;</span></pre></div><h3 id="creating-wrapper-components" class="bv-no-focus-ring"><span class="bd-content-title">Creating wrapper components<a class="anchorjs-link" href="#creating-wrapper-components" aria-labelledby="creating-wrapper-components"></a></span></h3> <p>You can easily create a custom wrapper component with your preferred rendering style as follows:</p> <div class="bd-code"><pre class="hljs html p-2" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;value&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;$emit(&#x27;input&#x27;, $event)&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;{ tags, addTag, removeTag, inputAttrs, inputHandlers }&quot;</span>&gt;</span>\n     <span class="hljs-comment">&lt;!-- Place your custom rendering here --&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">import</span> { BFormTags } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;bootstrap-vue&#x27;</span>\n\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;MyCustomTags&#x27;</span>,\n    <span class="hljs-attr">components</span>: { BFormTags },\n    <span class="hljs-attr">model</span>: {\n      <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;value&#x27;</span>,\n      <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;input&#x27;</span>\n    },\n    <span class="hljs-attr">props</span>: {\n      <span class="hljs-attr">value</span>: {\n        <span class="hljs-attr">type</span>: <span class="hljs-built_in">Array</span>,\n        <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> []\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre></div><h2 id="b-form-tag-helper-component" class="bv-no-focus-ring"><span class="bd-content-title"><code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> helper component<a class="anchorjs-link" href="#b-form-tag-helper-component" aria-labelledby="b-form-tag-helper-component"></a></span></h2> <p>BootstrapVue provides the helper component <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code>, for use with the default scoped slot of <code class="text-nowrap" translate="no">&lt;b-form-tags&gt;</code>. The component is based upon <a href="/docs/components/badge" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-badge&gt;</code></a> and <a href="/docs/components/button/#comp-ref-b-button-close" class="font-weight-bold"><code class="text-nowrap" translate="no">&lt;b-button-close&gt;</code></a>.</p> <p><code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> supports the same variants as <code class="text-nowrap" translate="no">&lt;b-badge&gt;</code> and also supports <code class="text-nowrap" translate="no">pill</code> styling. Sizing is based on the containing element&#39;s font-size.</p> <p>The <code class="text-nowrap" translate="no">remove</code> event is emitted when the <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> remove button is clicked.</p> <p>Tags that are too wide for their parent container will automatically have their text content truncated with an ellipsis. For this reason, it is always good practice to supply a title via the <code class="text-nowrap" translate="no">title</code> prop when using the default slot of <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> for the tag content.</p> <p>Note <code class="text-nowrap" translate="no">&lt;b-form-tag&gt;</code> requires BootstrapVue&#39;s custom CSS/SCSS for proper styling.</p>'}}}]);